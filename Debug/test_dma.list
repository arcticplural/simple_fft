
test_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000136a0  08008678  08008678  00018678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bd18  0801bd18  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  0801bd18  0801bd18  0002bd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bd20  0801bd20  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bd20  0801bd20  0002bd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bd24  0801bd24  0002bd24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0801bd28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000074a8  20000078  0801bda0  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007520  0801bda0  00037520  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010794  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025e5  00000000  00000000  0004083c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f28  00000000  00000000  00042e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  00043d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021e0f  00000000  00000000  00044af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bdf7  00000000  00000000  00066907  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d09ca  00000000  00000000  000726fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  001430c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004720  00000000  00000000  001431b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002a79  00000000  00000000  001478d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008660 	.word	0x08008660

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008660 	.word	0x08008660

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800047e:	f1a4 0401 	sub.w	r4, r4, #1
 8000482:	d1e9      	bne.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_d2iz>:
 8000bec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf4:	d215      	bcs.n	8000c22 <__aeabi_d2iz+0x36>
 8000bf6:	d511      	bpl.n	8000c1c <__aeabi_d2iz+0x30>
 8000bf8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bfc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c00:	d912      	bls.n	8000c28 <__aeabi_d2iz+0x3c>
 8000c02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	bf18      	it	ne
 8000c18:	4240      	negne	r0, r0
 8000c1a:	4770      	bx	lr
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c26:	d105      	bne.n	8000c34 <__aeabi_d2iz+0x48>
 8000c28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	bf08      	it	eq
 8000c2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c32:	4770      	bx	lr
 8000c34:	f04f 0000 	mov.w	r0, #0
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_d2uiz>:
 8000c3c:	004a      	lsls	r2, r1, #1
 8000c3e:	d211      	bcs.n	8000c64 <__aeabi_d2uiz+0x28>
 8000c40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c44:	d211      	bcs.n	8000c6a <__aeabi_d2uiz+0x2e>
 8000c46:	d50d      	bpl.n	8000c64 <__aeabi_d2uiz+0x28>
 8000c48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c50:	d40e      	bmi.n	8000c70 <__aeabi_d2uiz+0x34>
 8000c52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c62:	4770      	bx	lr
 8000c64:	f04f 0000 	mov.w	r0, #0
 8000c68:	4770      	bx	lr
 8000c6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c6e:	d102      	bne.n	8000c76 <__aeabi_d2uiz+0x3a>
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c74:	4770      	bx	lr
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2f>:
 8000c7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c84:	bf24      	itt	cs
 8000c86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c8e:	d90d      	bls.n	8000cac <__aeabi_d2f+0x30>
 8000c90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ca0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ca4:	bf08      	it	eq
 8000ca6:	f020 0001 	biceq.w	r0, r0, #1
 8000caa:	4770      	bx	lr
 8000cac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cb0:	d121      	bne.n	8000cf6 <__aeabi_d2f+0x7a>
 8000cb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cb6:	bfbc      	itt	lt
 8000cb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	4770      	bxlt	lr
 8000cbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cc6:	f1c2 0218 	rsb	r2, r2, #24
 8000cca:	f1c2 0c20 	rsb	ip, r2, #32
 8000cce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000cd6:	bf18      	it	ne
 8000cd8:	f040 0001 	orrne.w	r0, r0, #1
 8000cdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ce0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ce4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ce8:	ea40 000c 	orr.w	r0, r0, ip
 8000cec:	fa23 f302 	lsr.w	r3, r3, r2
 8000cf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cf4:	e7cc      	b.n	8000c90 <__aeabi_d2f+0x14>
 8000cf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cfa:	d107      	bne.n	8000d0c <__aeabi_d2f+0x90>
 8000cfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d00:	bf1e      	ittt	ne
 8000d02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d0a:	4770      	bxne	lr
 8000d0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop

08000d1c <__aeabi_uldivmod>:
 8000d1c:	b953      	cbnz	r3, 8000d34 <__aeabi_uldivmod+0x18>
 8000d1e:	b94a      	cbnz	r2, 8000d34 <__aeabi_uldivmod+0x18>
 8000d20:	2900      	cmp	r1, #0
 8000d22:	bf08      	it	eq
 8000d24:	2800      	cmpeq	r0, #0
 8000d26:	bf1c      	itt	ne
 8000d28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d30:	f000 b972 	b.w	8001018 <__aeabi_idiv0>
 8000d34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d3c:	f000 f806 	bl	8000d4c <__udivmoddi4>
 8000d40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d48:	b004      	add	sp, #16
 8000d4a:	4770      	bx	lr

08000d4c <__udivmoddi4>:
 8000d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d50:	9e08      	ldr	r6, [sp, #32]
 8000d52:	4604      	mov	r4, r0
 8000d54:	4688      	mov	r8, r1
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d14b      	bne.n	8000df2 <__udivmoddi4+0xa6>
 8000d5a:	428a      	cmp	r2, r1
 8000d5c:	4615      	mov	r5, r2
 8000d5e:	d967      	bls.n	8000e30 <__udivmoddi4+0xe4>
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	b14a      	cbz	r2, 8000d7a <__udivmoddi4+0x2e>
 8000d66:	f1c2 0720 	rsb	r7, r2, #32
 8000d6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000d72:	4095      	lsls	r5, r2
 8000d74:	ea47 0803 	orr.w	r8, r7, r3
 8000d78:	4094      	lsls	r4, r2
 8000d7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d7e:	0c23      	lsrs	r3, r4, #16
 8000d80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d84:	fa1f fc85 	uxth.w	ip, r5
 8000d88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d90:	fb07 f10c 	mul.w	r1, r7, ip
 8000d94:	4299      	cmp	r1, r3
 8000d96:	d909      	bls.n	8000dac <__udivmoddi4+0x60>
 8000d98:	18eb      	adds	r3, r5, r3
 8000d9a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d9e:	f080 811b 	bcs.w	8000fd8 <__udivmoddi4+0x28c>
 8000da2:	4299      	cmp	r1, r3
 8000da4:	f240 8118 	bls.w	8000fd8 <__udivmoddi4+0x28c>
 8000da8:	3f02      	subs	r7, #2
 8000daa:	442b      	add	r3, r5
 8000dac:	1a5b      	subs	r3, r3, r1
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000db4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dc0:	45a4      	cmp	ip, r4
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x8c>
 8000dc4:	192c      	adds	r4, r5, r4
 8000dc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dca:	f080 8107 	bcs.w	8000fdc <__udivmoddi4+0x290>
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	f240 8104 	bls.w	8000fdc <__udivmoddi4+0x290>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	442c      	add	r4, r5
 8000dd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ddc:	eba4 040c 	sub.w	r4, r4, ip
 8000de0:	2700      	movs	r7, #0
 8000de2:	b11e      	cbz	r6, 8000dec <__udivmoddi4+0xa0>
 8000de4:	40d4      	lsrs	r4, r2
 8000de6:	2300      	movs	r3, #0
 8000de8:	e9c6 4300 	strd	r4, r3, [r6]
 8000dec:	4639      	mov	r1, r7
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	428b      	cmp	r3, r1
 8000df4:	d909      	bls.n	8000e0a <__udivmoddi4+0xbe>
 8000df6:	2e00      	cmp	r6, #0
 8000df8:	f000 80eb 	beq.w	8000fd2 <__udivmoddi4+0x286>
 8000dfc:	2700      	movs	r7, #0
 8000dfe:	e9c6 0100 	strd	r0, r1, [r6]
 8000e02:	4638      	mov	r0, r7
 8000e04:	4639      	mov	r1, r7
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	fab3 f783 	clz	r7, r3
 8000e0e:	2f00      	cmp	r7, #0
 8000e10:	d147      	bne.n	8000ea2 <__udivmoddi4+0x156>
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xd0>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 80fa 	bhi.w	8001010 <__udivmoddi4+0x2c4>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4698      	mov	r8, r3
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	d0e0      	beq.n	8000dec <__udivmoddi4+0xa0>
 8000e2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000e2e:	e7dd      	b.n	8000dec <__udivmoddi4+0xa0>
 8000e30:	b902      	cbnz	r2, 8000e34 <__udivmoddi4+0xe8>
 8000e32:	deff      	udf	#255	; 0xff
 8000e34:	fab2 f282 	clz	r2, r2
 8000e38:	2a00      	cmp	r2, #0
 8000e3a:	f040 808f 	bne.w	8000f5c <__udivmoddi4+0x210>
 8000e3e:	1b49      	subs	r1, r1, r5
 8000e40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e44:	fa1f f885 	uxth.w	r8, r5
 8000e48:	2701      	movs	r7, #1
 8000e4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e4e:	0c23      	lsrs	r3, r4, #16
 8000e50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e58:	fb08 f10c 	mul.w	r1, r8, ip
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x124>
 8000e60:	18eb      	adds	r3, r5, r3
 8000e62:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x122>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2bc>
 8000e6e:	4684      	mov	ip, r0
 8000e70:	1a59      	subs	r1, r3, r1
 8000e72:	b2a3      	uxth	r3, r4
 8000e74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e80:	fb08 f800 	mul.w	r8, r8, r0
 8000e84:	45a0      	cmp	r8, r4
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x14c>
 8000e88:	192c      	adds	r4, r5, r4
 8000e8a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x14a>
 8000e90:	45a0      	cmp	r8, r4
 8000e92:	f200 80b6 	bhi.w	8001002 <__udivmoddi4+0x2b6>
 8000e96:	4618      	mov	r0, r3
 8000e98:	eba4 0408 	sub.w	r4, r4, r8
 8000e9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ea0:	e79f      	b.n	8000de2 <__udivmoddi4+0x96>
 8000ea2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ea6:	40bb      	lsls	r3, r7
 8000ea8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000eac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000eb0:	fa01 f407 	lsl.w	r4, r1, r7
 8000eb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000eb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ebc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ec0:	4325      	orrs	r5, r4
 8000ec2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ec6:	0c2c      	lsrs	r4, r5, #16
 8000ec8:	fb08 3319 	mls	r3, r8, r9, r3
 8000ecc:	fa1f fa8e 	uxth.w	sl, lr
 8000ed0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ed4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ed8:	429c      	cmp	r4, r3
 8000eda:	fa02 f207 	lsl.w	r2, r2, r7
 8000ede:	fa00 f107 	lsl.w	r1, r0, r7
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b0>
 8000ee4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ee8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000eec:	f080 8087 	bcs.w	8000ffe <__udivmoddi4+0x2b2>
 8000ef0:	429c      	cmp	r4, r3
 8000ef2:	f240 8084 	bls.w	8000ffe <__udivmoddi4+0x2b2>
 8000ef6:	f1a9 0902 	sub.w	r9, r9, #2
 8000efa:	4473      	add	r3, lr
 8000efc:	1b1b      	subs	r3, r3, r4
 8000efe:	b2ad      	uxth	r5, r5
 8000f00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f04:	fb08 3310 	mls	r3, r8, r0, r3
 8000f08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f10:	45a2      	cmp	sl, r4
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1da>
 8000f14:	eb1e 0404 	adds.w	r4, lr, r4
 8000f18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000f1c:	d26b      	bcs.n	8000ff6 <__udivmoddi4+0x2aa>
 8000f1e:	45a2      	cmp	sl, r4
 8000f20:	d969      	bls.n	8000ff6 <__udivmoddi4+0x2aa>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4474      	add	r4, lr
 8000f26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2e:	eba4 040a 	sub.w	r4, r4, sl
 8000f32:	454c      	cmp	r4, r9
 8000f34:	46c2      	mov	sl, r8
 8000f36:	464b      	mov	r3, r9
 8000f38:	d354      	bcc.n	8000fe4 <__udivmoddi4+0x298>
 8000f3a:	d051      	beq.n	8000fe0 <__udivmoddi4+0x294>
 8000f3c:	2e00      	cmp	r6, #0
 8000f3e:	d069      	beq.n	8001014 <__udivmoddi4+0x2c8>
 8000f40:	ebb1 050a 	subs.w	r5, r1, sl
 8000f44:	eb64 0403 	sbc.w	r4, r4, r3
 8000f48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f4c:	40fd      	lsrs	r5, r7
 8000f4e:	40fc      	lsrs	r4, r7
 8000f50:	ea4c 0505 	orr.w	r5, ip, r5
 8000f54:	e9c6 5400 	strd	r5, r4, [r6]
 8000f58:	2700      	movs	r7, #0
 8000f5a:	e747      	b.n	8000dec <__udivmoddi4+0xa0>
 8000f5c:	f1c2 0320 	rsb	r3, r2, #32
 8000f60:	fa20 f703 	lsr.w	r7, r0, r3
 8000f64:	4095      	lsls	r5, r2
 8000f66:	fa01 f002 	lsl.w	r0, r1, r2
 8000f6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f72:	4338      	orrs	r0, r7
 8000f74:	0c01      	lsrs	r1, r0, #16
 8000f76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f7a:	fa1f f885 	uxth.w	r8, r5
 8000f7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f86:	fb07 f308 	mul.w	r3, r7, r8
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d907      	bls.n	8000fa2 <__udivmoddi4+0x256>
 8000f92:	1869      	adds	r1, r5, r1
 8000f94:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f98:	d22f      	bcs.n	8000ffa <__udivmoddi4+0x2ae>
 8000f9a:	428b      	cmp	r3, r1
 8000f9c:	d92d      	bls.n	8000ffa <__udivmoddi4+0x2ae>
 8000f9e:	3f02      	subs	r7, #2
 8000fa0:	4429      	add	r1, r5
 8000fa2:	1acb      	subs	r3, r1, r3
 8000fa4:	b281      	uxth	r1, r0
 8000fa6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000faa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb00 f308 	mul.w	r3, r0, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d907      	bls.n	8000fca <__udivmoddi4+0x27e>
 8000fba:	1869      	adds	r1, r5, r1
 8000fbc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000fc0:	d217      	bcs.n	8000ff2 <__udivmoddi4+0x2a6>
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d915      	bls.n	8000ff2 <__udivmoddi4+0x2a6>
 8000fc6:	3802      	subs	r0, #2
 8000fc8:	4429      	add	r1, r5
 8000fca:	1ac9      	subs	r1, r1, r3
 8000fcc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fd0:	e73b      	b.n	8000e4a <__udivmoddi4+0xfe>
 8000fd2:	4637      	mov	r7, r6
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e709      	b.n	8000dec <__udivmoddi4+0xa0>
 8000fd8:	4607      	mov	r7, r0
 8000fda:	e6e7      	b.n	8000dac <__udivmoddi4+0x60>
 8000fdc:	4618      	mov	r0, r3
 8000fde:	e6fb      	b.n	8000dd8 <__udivmoddi4+0x8c>
 8000fe0:	4541      	cmp	r1, r8
 8000fe2:	d2ab      	bcs.n	8000f3c <__udivmoddi4+0x1f0>
 8000fe4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fe8:	eb69 020e 	sbc.w	r2, r9, lr
 8000fec:	3801      	subs	r0, #1
 8000fee:	4613      	mov	r3, r2
 8000ff0:	e7a4      	b.n	8000f3c <__udivmoddi4+0x1f0>
 8000ff2:	4660      	mov	r0, ip
 8000ff4:	e7e9      	b.n	8000fca <__udivmoddi4+0x27e>
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	e795      	b.n	8000f26 <__udivmoddi4+0x1da>
 8000ffa:	4667      	mov	r7, ip
 8000ffc:	e7d1      	b.n	8000fa2 <__udivmoddi4+0x256>
 8000ffe:	4681      	mov	r9, r0
 8001000:	e77c      	b.n	8000efc <__udivmoddi4+0x1b0>
 8001002:	3802      	subs	r0, #2
 8001004:	442c      	add	r4, r5
 8001006:	e747      	b.n	8000e98 <__udivmoddi4+0x14c>
 8001008:	f1ac 0c02 	sub.w	ip, ip, #2
 800100c:	442b      	add	r3, r5
 800100e:	e72f      	b.n	8000e70 <__udivmoddi4+0x124>
 8001010:	4638      	mov	r0, r7
 8001012:	e708      	b.n	8000e26 <__udivmoddi4+0xda>
 8001014:	4637      	mov	r7, r6
 8001016:	e6e9      	b.n	8000dec <__udivmoddi4+0xa0>

08001018 <__aeabi_idiv0>:
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	0000      	movs	r0, r0
	...

08001020 <calcsin>:

// DAC SIN VAWE BLOCK
uint32_t sine_val[100];
#define PI 3.1415926
void calcsin ()
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
	for (int i=0; i<100; i++)
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	e03a      	b.n	80010a2 <calcsin+0x82>
	{
		sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fad7 	bl	80005e4 <__aeabi_i2d>
 8001036:	a322      	add	r3, pc, #136	; (adr r3, 80010c0 <calcsin+0xa0>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fb3c 	bl	80006b8 <__aeabi_dmul>
 8001040:	4603      	mov	r3, r0
 8001042:	460c      	mov	r4, r1
 8001044:	4618      	mov	r0, r3
 8001046:	4621      	mov	r1, r4
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <calcsin+0x90>)
 800104e:	f7ff fc5d 	bl	800090c <__aeabi_ddiv>
 8001052:	4603      	mov	r3, r0
 8001054:	460c      	mov	r4, r1
 8001056:	ec44 3b17 	vmov	d7, r3, r4
 800105a:	eeb0 0a47 	vmov.f32	s0, s14
 800105e:	eef0 0a67 	vmov.f32	s1, s15
 8001062:	f006 f8d1 	bl	8007208 <sin>
 8001066:	ec51 0b10 	vmov	r0, r1, d0
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <calcsin+0x94>)
 8001070:	f7ff f96c 	bl	800034c <__adddf3>
 8001074:	4603      	mov	r3, r0
 8001076:	460c      	mov	r4, r1
 8001078:	4618      	mov	r0, r3
 800107a:	4621      	mov	r1, r4
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <calcsin+0x98>)
 8001082:	f7ff fb19 	bl	80006b8 <__aeabi_dmul>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	4618      	mov	r0, r3
 800108c:	4621      	mov	r1, r4
 800108e:	f7ff fdd5 	bl	8000c3c <__aeabi_d2uiz>
 8001092:	4601      	mov	r1, r0
 8001094:	4a09      	ldr	r2, [pc, #36]	; (80010bc <calcsin+0x9c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<100; i++)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3301      	adds	r3, #1
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b63      	cmp	r3, #99	; 0x63
 80010a6:	ddc1      	ble.n	800102c <calcsin+0xc>
	}
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	40590000 	.word	0x40590000
 80010b4:	3ff00000 	.word	0x3ff00000
 80010b8:	40a00000 	.word	0x40a00000
 80010bc:	200000bc 	.word	0x200000bc
 80010c0:	4d12d84a 	.word	0x4d12d84a
 80010c4:	400921fb 	.word	0x400921fb

080010c8 <complexABS>:
//			maxIndex=i;
//		}
//	}
//	return maxIndex;
//}
float complexABS(float real, float compl) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80010d2:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 80010d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80010da:	edd7 7a01 	vldr	s15, [r7, #4]
 80010de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e2:	edd7 6a00 	vldr	s13, [r7]
 80010e6:	edd7 7a00 	vldr	s15, [r7]
 80010ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f2:	eeb0 0a67 	vmov.f32	s0, s15
 80010f6:	f006 f945 	bl	8007384 <sqrtf>
 80010fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80010fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <doFFT>:

void doFFT(){
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
	memset(&fft_out_buf,0,ADC_BUF_LEN/2);
 800110e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001112:	2100      	movs	r1, #0
 8001114:	484a      	ldr	r0, [pc, #296]	; (8001240 <doFFT+0x138>)
 8001116:	f005 fc45 	bl	80069a4 <memset>
	arm_rfft_fast_f32(&fft_handler, &fft_in_buf, &fft_out_buf, 0);
 800111a:	2300      	movs	r3, #0
 800111c:	4a48      	ldr	r2, [pc, #288]	; (8001240 <doFFT+0x138>)
 800111e:	4949      	ldr	r1, [pc, #292]	; (8001244 <doFFT+0x13c>)
 8001120:	4849      	ldr	r0, [pc, #292]	; (8001248 <doFFT+0x140>)
 8001122:	f004 fcc5 	bl	8005ab0 <arm_rfft_fast_f32>

	memset(&freqs,0,ADC_BUF_LEN/4);
 8001126:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112a:	2100      	movs	r1, #0
 800112c:	4847      	ldr	r0, [pc, #284]	; (800124c <doFFT+0x144>)
 800112e:	f005 fc39 	bl	80069a4 <memset>
	int freqpoint = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
	int offset = 30; //variable noisefloor offset
 8001136:	231e      	movs	r3, #30
 8001138:	607b      	str	r3, [r7, #4]

	// Calculate abs values and linear-to-dB
	for (int i=0; i<ADC_BUF_LEN/2; i=i+2) {
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	e039      	b.n	80011b4 <doFFT+0xac>
		freqs[freqpoint] = (int)(20*log10f(complexABS(fft_out_buf[i], fft_out_buf[i+1])))-offset;
 8001140:	4a3f      	ldr	r2, [pc, #252]	; (8001240 <doFFT+0x138>)
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	edd3 7a00 	vldr	s15, [r3]
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	3301      	adds	r3, #1
 8001150:	4a3b      	ldr	r2, [pc, #236]	; (8001240 <doFFT+0x138>)
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	ed93 7a00 	vldr	s14, [r3]
 800115a:	eef0 0a47 	vmov.f32	s1, s14
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	f7ff ffb1 	bl	80010c8 <complexABS>
 8001166:	eef0 7a40 	vmov.f32	s15, s0
 800116a:	eeb0 0a67 	vmov.f32	s0, s15
 800116e:	f006 f893 	bl	8007298 <log10f>
 8001172:	eeb0 7a40 	vmov.f32	s14, s0
 8001176:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001182:	ee17 2a90 	vmov	r2, s15
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	1ad2      	subs	r2, r2, r3
 800118a:	4930      	ldr	r1, [pc, #192]	; (800124c <doFFT+0x144>)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (freqs[freqpoint]<0) freqs[freqpoint]=0;
 8001192:	4a2e      	ldr	r2, [pc, #184]	; (800124c <doFFT+0x144>)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800119a:	2b00      	cmp	r3, #0
 800119c:	da04      	bge.n	80011a8 <doFFT+0xa0>
 800119e:	4a2b      	ldr	r2, [pc, #172]	; (800124c <doFFT+0x144>)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2100      	movs	r1, #0
 80011a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		freqpoint++;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3301      	adds	r3, #1
 80011ac:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<ADC_BUF_LEN/2; i=i+2) {
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	3302      	adds	r3, #2
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011ba:	dbc1      	blt.n	8001140 <doFFT+0x38>
	}

	// Extract data from middle of each range
	resultarray_ready = 0;
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <doFFT+0x148>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
//	uint16_t width = (ADC_BUF_LEN/4)/rangesCount;
//	for (int i=0; i<rangesCount; ++i){
//		resultarray[i] = (uint8_t) freqs[ (uint16_t) width*i + width/2 ];
//	}
	resultarray[0] = (uint8_t)freqs[1]; //31-5Hz
 80011c2:	4b22      	ldr	r3, [pc, #136]	; (800124c <doFFT+0x144>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <doFFT+0x14c>)
 80011ca:	701a      	strb	r2, [r3, #0]
	resultarray[1] = (uint8_t)freqs[3]; //63 Hz
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <doFFT+0x144>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <doFFT+0x14c>)
 80011d4:	705a      	strb	r2, [r3, #1]
	resultarray[2] = (uint8_t)freqs[5]; //125 Hz
 80011d6:	4b1d      	ldr	r3, [pc, #116]	; (800124c <doFFT+0x144>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <doFFT+0x14c>)
 80011de:	709a      	strb	r2, [r3, #2]
	resultarray[3] = (uint8_t)freqs[11]; //250 Hz
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <doFFT+0x144>)
 80011e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <doFFT+0x14c>)
 80011e8:	70da      	strb	r2, [r3, #3]
	resultarray[4] = (uint8_t)freqs[22]; //500 Hz
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <doFFT+0x144>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	4b18      	ldr	r3, [pc, #96]	; (8001254 <doFFT+0x14c>)
 80011f2:	711a      	strb	r2, [r3, #4]
	resultarray[5] = (uint8_t)freqs[44]; //1 kHz
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <doFFT+0x144>)
 80011f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	4b15      	ldr	r3, [pc, #84]	; (8001254 <doFFT+0x14c>)
 80011fe:	715a      	strb	r2, [r3, #5]
	resultarray[6] = (uint8_t)freqs[104]; //2.8 kHz
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <doFFT+0x144>)
 8001202:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <doFFT+0x14c>)
 800120a:	719a      	strb	r2, [r3, #6]
	resultarray[7] = (uint8_t)freqs[197]; //4.5 kHz
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <doFFT+0x144>)
 800120e:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8001212:	b2da      	uxtb	r2, r3
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <doFFT+0x14c>)
 8001216:	71da      	strb	r2, [r3, #7]
	resultarray[8] = (uint8_t)freqs[393]; //9 kHz
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <doFFT+0x144>)
 800121a:	f8d3 3624 	ldr.w	r3, [r3, #1572]	; 0x624
 800121e:	b2da      	uxtb	r2, r3
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <doFFT+0x14c>)
 8001222:	721a      	strb	r2, [r3, #8]
	resultarray[9] = (uint8_t)freqs[655]; //15 lHz
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <doFFT+0x144>)
 8001226:	f8d3 3a3c 	ldr.w	r3, [r3, #2620]	; 0xa3c
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b09      	ldr	r3, [pc, #36]	; (8001254 <doFFT+0x14c>)
 800122e:	725a      	strb	r2, [r3, #9]
	resultarray_ready = 1;
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <doFFT+0x148>)
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
}
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000045c 	.word	0x2000045c
 8001244:	200054dc 	.word	0x200054dc
 8001248:	200000a4 	.word	0x200000a4
 800124c:	2000449c 	.word	0x2000449c
 8001250:	20000097 	.word	0x20000097
 8001254:	2000024c 	.word	0x2000024c

08001258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08a      	sub	sp, #40	; 0x28
 800125c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800125e:	f000 ff9d 	bl	800219c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001262:	f000 f929 	bl	80014b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001266:	f000 fbad 	bl	80019c4 <MX_GPIO_Init>
  MX_DMA_Init();
 800126a:	f000 fb6d 	bl	8001948 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800126e:	f000 fb41 	bl	80018f4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001272:	f000 f98b 	bl	800158c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001276:	f000 fa05 	bl	8001684 <MX_TIM1_Init>
  MX_DAC_Init();
 800127a:	f000 f9d9 	bl	8001630 <MX_DAC_Init>
  MX_TIM2_Init();
 800127e:	f000 fa9f 	bl	80017c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001282:	f000 fae9 	bl	8001858 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // ADC CYCLE
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 8001286:	2100      	movs	r1, #0
 8001288:	4874      	ldr	r0, [pc, #464]	; (800145c <main+0x204>)
 800128a:	f003 f94b 	bl	8004524 <HAL_TIM_OC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 800128e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001292:	4973      	ldr	r1, [pc, #460]	; (8001460 <main+0x208>)
 8001294:	4873      	ldr	r0, [pc, #460]	; (8001464 <main+0x20c>)
 8001296:	f001 f837 	bl	8002308 <HAL_ADC_Start_DMA>

  // DAC SIN VAWE CYCLE
  HAL_TIM_Base_Start(&htim2);
 800129a:	4873      	ldr	r0, [pc, #460]	; (8001468 <main+0x210>)
 800129c:	f003 f8c5 	bl	800442a <HAL_TIM_Base_Start>
  calcsin();
 80012a0:	f7ff febe 	bl	8001020 <calcsin>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 80012a4:	2300      	movs	r3, #0
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2364      	movs	r3, #100	; 0x64
 80012aa:	4a70      	ldr	r2, [pc, #448]	; (800146c <main+0x214>)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4870      	ldr	r0, [pc, #448]	; (8001470 <main+0x218>)
 80012b0:	f001 fcfa 	bl	8002ca8 <HAL_DAC_Start_DMA>

  // FFT INIT
  arm_rfft_fast_init_f32(&fft_handler, ADC_BUF_LEN/2);
 80012b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b8:	486e      	ldr	r0, [pc, #440]	; (8001474 <main+0x21c>)
 80012ba:	f004 fb75 	bl	80059a8 <arm_rfft_fast_init_f32>

  // UART TRANSMISSION CYCLE
  HAL_TIM_Base_Start_IT(&htim3);
 80012be:	486e      	ldr	r0, [pc, #440]	; (8001478 <main+0x220>)
 80012c0:	f003 f8d7 	bl	8004472 <HAL_TIM_Base_Start_IT>
  HAL_DMA_RegisterCallback(&hdma_usart2_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMATransferComplete);
 80012c4:	4a6d      	ldr	r2, [pc, #436]	; (800147c <main+0x224>)
 80012c6:	2100      	movs	r1, #0
 80012c8:	486d      	ldr	r0, [pc, #436]	; (8001480 <main+0x228>)
 80012ca:	f002 f921 	bl	8003510 <HAL_DMA_RegisterCallback>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (callback_half_flag  == 1) {
 80012ce:	4b6d      	ldr	r3, [pc, #436]	; (8001484 <main+0x22c>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d122      	bne.n	800131c <main+0xc4>
		  for (int i=0; i<ADC_BUF_LEN/2; i++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	e010      	b.n	80012fe <main+0xa6>
			  fft_in_buf[i] = adc_buf[i];
 80012dc:	4a60      	ldr	r2, [pc, #384]	; (8001460 <main+0x208>)
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e4:	ee07 3a90 	vmov	s15, r3
 80012e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ec:	4a66      	ldr	r2, [pc, #408]	; (8001488 <main+0x230>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	edc3 7a00 	vstr	s15, [r3]
		  for (int i=0; i<ADC_BUF_LEN/2; i++) {
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	3301      	adds	r3, #1
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001304:	dbea      	blt.n	80012dc <main+0x84>
			  // to use math sin instead
//			  fft_in_buf[i] = 1000.0f*arm_sin_f32(2*3.1415926f*50*i/1000)+1000;
		  }
		  doFFT();
 8001306:	f7ff feff 	bl	8001108 <doFFT>
		  HAL_GPIO_WritePin(GPIOD, LD2_Pin, GPIO_PIN_SET); // debug
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001310:	485e      	ldr	r0, [pc, #376]	; (800148c <main+0x234>)
 8001312:	f002 fbc9 	bl	8003aa8 <HAL_GPIO_WritePin>
		  callback_half_flag = 0;
 8001316:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <main+0x22c>)
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
	  }
	  if (callback_full_flag  == 1) {
 800131c:	4b5c      	ldr	r3, [pc, #368]	; (8001490 <main+0x238>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d125      	bne.n	8001370 <main+0x118>
		  for (int i=ADC_BUF_LEN/2; i<ADC_BUF_LEN; i++) {
 8001324:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	e012      	b.n	8001352 <main+0xfa>
			  fft_in_buf[i-ADC_BUF_LEN/2] = adc_buf[i];
 800132c:	4a4c      	ldr	r2, [pc, #304]	; (8001460 <main+0x208>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800133a:	ee07 2a90 	vmov	s15, r2
 800133e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001342:	4a51      	ldr	r2, [pc, #324]	; (8001488 <main+0x230>)
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	edc3 7a00 	vstr	s15, [r3]
		  for (int i=ADC_BUF_LEN/2; i<ADC_BUF_LEN; i++) {
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	3301      	adds	r3, #1
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001358:	dbe8      	blt.n	800132c <main+0xd4>
		  }
		  doFFT();
 800135a:	f7ff fed5 	bl	8001108 <doFFT>
		  HAL_GPIO_WritePin(GPIOD, LD2_Pin, GPIO_PIN_RESET); // debug
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001364:	4849      	ldr	r0, [pc, #292]	; (800148c <main+0x234>)
 8001366:	f002 fb9f 	bl	8003aa8 <HAL_GPIO_WritePin>
		  callback_full_flag = 0;
 800136a:	4b49      	ldr	r3, [pc, #292]	; (8001490 <main+0x238>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
	  }
	  if (callback_uart_flag == 1){
 8001370:	4b48      	ldr	r3, [pc, #288]	; (8001494 <main+0x23c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d1aa      	bne.n	80012ce <main+0x76>
		  if (resultarray_ready && (huart2.gState == HAL_UART_STATE_READY)){ // if array still in progress skip this cycle
 8001378:	4b47      	ldr	r3, [pc, #284]	; (8001498 <main+0x240>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d04b      	beq.n	8001418 <main+0x1c0>
 8001380:	4b46      	ldr	r3, [pc, #280]	; (800149c <main+0x244>)
 8001382:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001386:	b2db      	uxtb	r3, r3
 8001388:	2b20      	cmp	r3, #32
 800138a:	d145      	bne.n	8001418 <main+0x1c0>
			  // PREPARE TEXT FOR UART
			  memset(outmessage,0,60); //clear out buffer
 800138c:	223c      	movs	r2, #60	; 0x3c
 800138e:	2100      	movs	r1, #0
 8001390:	4843      	ldr	r0, [pc, #268]	; (80014a0 <main+0x248>)
 8001392:	f005 fb07 	bl	80069a4 <memset>
			  outmessage[0]='M';
 8001396:	4b42      	ldr	r3, [pc, #264]	; (80014a0 <main+0x248>)
 8001398:	224d      	movs	r2, #77	; 0x4d
 800139a:	701a      	strb	r2, [r3, #0]
			  for (int i=0; i<rangesCount; i++){
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e034      	b.n	800140c <main+0x1b4>
				  char str[10];
				  snprintf(str, sizeof(str), "%d", resultarray[i]*20);
 80013a2:	4a40      	ldr	r2, [pc, #256]	; (80014a4 <main+0x24c>)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	4413      	add	r3, r2
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	1d38      	adds	r0, r7, #4
 80013b6:	4a3c      	ldr	r2, [pc, #240]	; (80014a8 <main+0x250>)
 80013b8:	210a      	movs	r1, #10
 80013ba:	f005 fafb 	bl	80069b4 <sniprintf>
				  strcat(outmessage, str);
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4837      	ldr	r0, [pc, #220]	; (80014a0 <main+0x248>)
 80013c4:	f005 fb2a 	bl	8006a1c <strcat>
				  if (i<rangesCount-1)
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <main+0x254>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	da0c      	bge.n	80013ee <main+0x196>
					  strcat(outmessage, ",");
 80013d4:	4832      	ldr	r0, [pc, #200]	; (80014a0 <main+0x248>)
 80013d6:	f7fe ff5b 	bl	8000290 <strlen>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <main+0x248>)
 80013e0:	4413      	add	r3, r2
 80013e2:	4933      	ldr	r1, [pc, #204]	; (80014b0 <main+0x258>)
 80013e4:	461a      	mov	r2, r3
 80013e6:	460b      	mov	r3, r1
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	8013      	strh	r3, [r2, #0]
 80013ec:	e00b      	b.n	8001406 <main+0x1ae>
				  else
					  strcat(outmessage, "X");
 80013ee:	482c      	ldr	r0, [pc, #176]	; (80014a0 <main+0x248>)
 80013f0:	f7fe ff4e 	bl	8000290 <strlen>
 80013f4:	4603      	mov	r3, r0
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <main+0x248>)
 80013fa:	4413      	add	r3, r2
 80013fc:	492d      	ldr	r1, [pc, #180]	; (80014b4 <main+0x25c>)
 80013fe:	461a      	mov	r2, r3
 8001400:	460b      	mov	r3, r1
 8001402:	881b      	ldrh	r3, [r3, #0]
 8001404:	8013      	strh	r3, [r2, #0]
			  for (int i=0; i<rangesCount; i++){
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	4b27      	ldr	r3, [pc, #156]	; (80014ac <main+0x254>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	4293      	cmp	r3, r2
 8001416:	dbc4      	blt.n	80013a2 <main+0x14a>
			  }
		  }
		  int var = strlen(outmessage);
 8001418:	4821      	ldr	r0, [pc, #132]	; (80014a0 <main+0x248>)
 800141a:	f7fe ff39 	bl	8000290 <strlen>
 800141e:	4603      	mov	r3, r0
 8001420:	613b      	str	r3, [r7, #16]
		  if (var==0) // не отправлять пустой массив, иначе dma зависнет
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d016      	beq.n	8001456 <main+0x1fe>
			  continue;
		  huart2.Instance->CR3 |= USART_CR3_DMAT;
 8001428:	4b1c      	ldr	r3, [pc, #112]	; (800149c <main+0x244>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	695a      	ldr	r2, [r3, #20]
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <main+0x244>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001436:	615a      	str	r2, [r3, #20]
		  // msg отправляется нормально, а вот outmessage порченный почему-то, хотя формируется правильно
		  // эту проблему так и не решил
		  var = HAL_DMA_Start_IT(&hdma_usart2_tx, (uint32_t)outmessage, (uint32_t)&huart2.Instance->DR, var);
 8001438:	4919      	ldr	r1, [pc, #100]	; (80014a0 <main+0x248>)
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <main+0x244>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	3304      	adds	r3, #4
 8001440:	461a      	mov	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	480e      	ldr	r0, [pc, #56]	; (8001480 <main+0x228>)
 8001446:	f001 fe81 	bl	800314c <HAL_DMA_Start_IT>
 800144a:	4603      	mov	r3, r0
 800144c:	613b      	str	r3, [r7, #16]

		  callback_uart_flag = 0;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <main+0x23c>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
 8001454:	e73b      	b.n	80012ce <main+0x76>
			  continue;
 8001456:	bf00      	nop
	  if (callback_half_flag  == 1) {
 8001458:	e739      	b.n	80012ce <main+0x76>
 800145a:	bf00      	nop
 800145c:	20000418 	.word	0x20000418
 8001460:	2000245c 	.word	0x2000245c
 8001464:	200002fc 	.word	0x200002fc
 8001468:	2000445c 	.word	0x2000445c
 800146c:	200000bc 	.word	0x200000bc
 8001470:	200003a4 	.word	0x200003a4
 8001474:	200000a4 	.word	0x200000a4
 8001478:	2000025c 	.word	0x2000025c
 800147c:	08001bf9 	.word	0x08001bf9
 8001480:	20000344 	.word	0x20000344
 8001484:	20000094 	.word	0x20000094
 8001488:	200054dc 	.word	0x200054dc
 800148c:	40020c00 	.word	0x40020c00
 8001490:	20000095 	.word	0x20000095
 8001494:	20000096 	.word	0x20000096
 8001498:	20000097 	.word	0x20000097
 800149c:	2000549c 	.word	0x2000549c
 80014a0:	200074dc 	.word	0x200074dc
 80014a4:	2000024c 	.word	0x2000024c
 80014a8:	08008678 	.word	0x08008678
 80014ac:	20000000 	.word	0x20000000
 80014b0:	0800867c 	.word	0x0800867c
 80014b4:	08008680 	.word	0x08008680

080014b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b094      	sub	sp, #80	; 0x50
 80014bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014be:	f107 0320 	add.w	r3, r7, #32
 80014c2:	2230      	movs	r2, #48	; 0x30
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 fa6c 	bl	80069a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	4b28      	ldr	r3, [pc, #160]	; (8001584 <SystemClock_Config+0xcc>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a27      	ldr	r2, [pc, #156]	; (8001584 <SystemClock_Config+0xcc>)
 80014e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <SystemClock_Config+0xcc>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	4b22      	ldr	r3, [pc, #136]	; (8001588 <SystemClock_Config+0xd0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a21      	ldr	r2, [pc, #132]	; (8001588 <SystemClock_Config+0xd0>)
 8001502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <SystemClock_Config+0xd0>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001514:	2301      	movs	r3, #1
 8001516:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001518:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800151e:	2302      	movs	r3, #2
 8001520:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001522:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001526:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001528:	2308      	movs	r3, #8
 800152a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800152c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001530:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001532:	2302      	movs	r3, #2
 8001534:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001536:	2307      	movs	r3, #7
 8001538:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153a:	f107 0320 	add.w	r3, r7, #32
 800153e:	4618      	mov	r0, r3
 8001540:	f002 fae6 	bl	8003b10 <HAL_RCC_OscConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800154a:	f000 fb6f 	bl	8001c2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154e:	230f      	movs	r3, #15
 8001550:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001552:	2302      	movs	r3, #2
 8001554:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800155a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800155e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001564:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	2105      	movs	r1, #5
 800156c:	4618      	mov	r0, r3
 800156e:	f002 fd3f 	bl	8003ff0 <HAL_RCC_ClockConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001578:	f000 fb58 	bl	8001c2c <Error_Handler>
  }
}
 800157c:	bf00      	nop
 800157e:	3750      	adds	r7, #80	; 0x50
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40007000 	.word	0x40007000

0800158c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001592:	463b      	mov	r3, r7
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800159e:	4b22      	ldr	r3, [pc, #136]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015a0:	4a22      	ldr	r2, [pc, #136]	; (800162c <MX_ADC1_Init+0xa0>)
 80015a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015a4:	4b20      	ldr	r3, [pc, #128]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015ac:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015b2:	4b1d      	ldr	r3, [pc, #116]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015d4:	4b14      	ldr	r3, [pc, #80]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015dc:	2201      	movs	r2, #1
 80015de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ee:	480e      	ldr	r0, [pc, #56]	; (8001628 <MX_ADC1_Init+0x9c>)
 80015f0:	f000 fe46 	bl	8002280 <HAL_ADC_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80015fa:	f000 fb17 	bl	8001c2c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015fe:	2301      	movs	r3, #1
 8001600:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001602:	2301      	movs	r3, #1
 8001604:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800160a:	463b      	mov	r3, r7
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	; (8001628 <MX_ADC1_Init+0x9c>)
 8001610:	f000 ff76 	bl	8002500 <HAL_ADC_ConfigChannel>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800161a:	f000 fb07 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200002fc 	.word	0x200002fc
 800162c:	40012000 	.word	0x40012000

08001630 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001636:	463b      	mov	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_DAC_Init+0x4c>)
 8001640:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <MX_DAC_Init+0x50>)
 8001642:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <MX_DAC_Init+0x4c>)
 8001646:	f001 fb0c 	bl	8002c62 <HAL_DAC_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001650:	f000 faec 	bl	8001c2c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001654:	2324      	movs	r3, #36	; 0x24
 8001656:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	4619      	mov	r1, r3
 8001662:	4806      	ldr	r0, [pc, #24]	; (800167c <MX_DAC_Init+0x4c>)
 8001664:	f001 fbec 	bl	8002e40 <HAL_DAC_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800166e:	f000 fadd 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200003a4 	.word	0x200003a4
 8001680:	40007400 	.word	0x40007400

08001684 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b096      	sub	sp, #88	; 0x58
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001698:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	611a      	str	r2, [r3, #16]
 80016b2:	615a      	str	r2, [r3, #20]
 80016b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2220      	movs	r2, #32
 80016ba:	2100      	movs	r1, #0
 80016bc:	4618      	mov	r0, r3
 80016be:	f005 f971 	bl	80069a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016c2:	4b3d      	ldr	r3, [pc, #244]	; (80017b8 <MX_TIM1_Init+0x134>)
 80016c4:	4a3d      	ldr	r2, [pc, #244]	; (80017bc <MX_TIM1_Init+0x138>)
 80016c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 80016c8:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <MX_TIM1_Init+0x134>)
 80016ca:	2202      	movs	r2, #2
 80016cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ce:	4b3a      	ldr	r3, [pc, #232]	; (80017b8 <MX_TIM1_Init+0x134>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3695;
 80016d4:	4b38      	ldr	r3, [pc, #224]	; (80017b8 <MX_TIM1_Init+0x134>)
 80016d6:	f640 626f 	movw	r2, #3695	; 0xe6f
 80016da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016dc:	4b36      	ldr	r3, [pc, #216]	; (80017b8 <MX_TIM1_Init+0x134>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016e2:	4b35      	ldr	r3, [pc, #212]	; (80017b8 <MX_TIM1_Init+0x134>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <MX_TIM1_Init+0x134>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ee:	4832      	ldr	r0, [pc, #200]	; (80017b8 <MX_TIM1_Init+0x134>)
 80016f0:	f002 fe70 	bl	80043d4 <HAL_TIM_Base_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016fa:	f000 fa97 	bl	8001c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001702:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001704:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001708:	4619      	mov	r1, r3
 800170a:	482b      	ldr	r0, [pc, #172]	; (80017b8 <MX_TIM1_Init+0x134>)
 800170c:	f003 f8b0 	bl	8004870 <HAL_TIM_ConfigClockSource>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001716:	f000 fa89 	bl	8001c2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800171a:	4827      	ldr	r0, [pc, #156]	; (80017b8 <MX_TIM1_Init+0x134>)
 800171c:	f002 fecd 	bl	80044ba <HAL_TIM_OC_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001726:	f000 fa81 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001732:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001736:	4619      	mov	r1, r3
 8001738:	481f      	ldr	r0, [pc, #124]	; (80017b8 <MX_TIM1_Init+0x134>)
 800173a:	f003 fc89 	bl	8005050 <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001744:	f000 fa72 	bl	8001c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001748:	2330      	movs	r3, #48	; 0x30
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001754:	2300      	movs	r3, #0
 8001756:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800175c:	2300      	movs	r3, #0
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001768:	2200      	movs	r2, #0
 800176a:	4619      	mov	r1, r3
 800176c:	4812      	ldr	r0, [pc, #72]	; (80017b8 <MX_TIM1_Init+0x134>)
 800176e:	f003 f81f 	bl	80047b0 <HAL_TIM_OC_ConfigChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001778:	f000 fa58 	bl	8001c2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001794:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	4619      	mov	r1, r3
 800179e:	4806      	ldr	r0, [pc, #24]	; (80017b8 <MX_TIM1_Init+0x134>)
 80017a0:	f003 fcd2 	bl	8005148 <HAL_TIMEx_ConfigBreakDeadTime>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80017aa:	f000 fa3f 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80017ae:	bf00      	nop
 80017b0:	3758      	adds	r7, #88	; 0x58
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000418 	.word	0x20000418
 80017bc:	40010000 	.word	0x40010000

080017c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	463b      	mov	r3, r7
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017dc:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <MX_TIM2_Init+0x94>)
 80017de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <MX_TIM2_Init+0x94>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_TIM2_Init+0x94>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2183;
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <MX_TIM2_Init+0x94>)
 80017f2:	f640 0287 	movw	r2, #2183	; 0x887
 80017f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <MX_TIM2_Init+0x94>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <MX_TIM2_Init+0x94>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001804:	4813      	ldr	r0, [pc, #76]	; (8001854 <MX_TIM2_Init+0x94>)
 8001806:	f002 fde5 	bl	80043d4 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001810:	f000 fa0c 	bl	8001c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001818:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	4619      	mov	r1, r3
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <MX_TIM2_Init+0x94>)
 8001822:	f003 f825 	bl	8004870 <HAL_TIM_ConfigClockSource>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800182c:	f000 f9fe 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001830:	2320      	movs	r3, #32
 8001832:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001838:	463b      	mov	r3, r7
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_TIM2_Init+0x94>)
 800183e:	f003 fc07 	bl	8005050 <HAL_TIMEx_MasterConfigSynchronization>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001848:	f000 f9f0 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	2000445c 	.word	0x2000445c

08001858 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185e:	f107 0308 	add.w	r3, r7, #8
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186c:	463b      	mov	r3, r7
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <MX_TIM3_Init+0x94>)
 8001876:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <MX_TIM3_Init+0x98>)
 8001878:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 256;
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <MX_TIM3_Init+0x94>)
 800187c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001880:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <MX_TIM3_Init+0x94>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001888:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_TIM3_Init+0x94>)
 800188a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800188e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <MX_TIM3_Init+0x94>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <MX_TIM3_Init+0x94>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800189c:	4813      	ldr	r0, [pc, #76]	; (80018ec <MX_TIM3_Init+0x94>)
 800189e:	f002 fd99 	bl	80043d4 <HAL_TIM_Base_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80018a8:	f000 f9c0 	bl	8001c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	4619      	mov	r1, r3
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <MX_TIM3_Init+0x94>)
 80018ba:	f002 ffd9 	bl	8004870 <HAL_TIM_ConfigClockSource>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80018c4:	f000 f9b2 	bl	8001c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018c8:	2320      	movs	r3, #32
 80018ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018d0:	463b      	mov	r3, r7
 80018d2:	4619      	mov	r1, r3
 80018d4:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_TIM3_Init+0x94>)
 80018d6:	f003 fbbb 	bl	8005050 <HAL_TIMEx_MasterConfigSynchronization>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80018e0:	f000 f9a4 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2000025c 	.word	0x2000025c
 80018f0:	40000400 	.word	0x40000400

080018f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018f8:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_USART2_UART_Init+0x4c>)
 80018fa:	4a12      	ldr	r2, [pc, #72]	; (8001944 <MX_USART2_UART_Init+0x50>)
 80018fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <MX_USART2_UART_Init+0x4c>)
 8001900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <MX_USART2_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_USART2_UART_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MX_USART2_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_USART2_UART_Init+0x4c>)
 800191a:	220c      	movs	r2, #12
 800191c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_USART2_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_USART2_UART_Init+0x4c>)
 8001926:	2200      	movs	r2, #0
 8001928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_USART2_UART_Init+0x4c>)
 800192c:	f003 fc72 	bl	8005214 <HAL_UART_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001936:	f000 f979 	bl	8001c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2000549c 	.word	0x2000549c
 8001944:	40004400 	.word	0x40004400

08001948 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	607b      	str	r3, [r7, #4]
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <MX_DMA_Init+0x78>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a1a      	ldr	r2, [pc, #104]	; (80019c0 <MX_DMA_Init+0x78>)
 8001958:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <MX_DMA_Init+0x78>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001966:	607b      	str	r3, [r7, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	603b      	str	r3, [r7, #0]
 800196e:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <MX_DMA_Init+0x78>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <MX_DMA_Init+0x78>)
 8001974:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_DMA_Init+0x78>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	603b      	str	r3, [r7, #0]
 8001984:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	2010      	movs	r0, #16
 800198c:	f001 f933 	bl	8002bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001990:	2010      	movs	r0, #16
 8001992:	f001 f94c 	bl	8002c2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	2011      	movs	r0, #17
 800199c:	f001 f92b 	bl	8002bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80019a0:	2011      	movs	r0, #17
 80019a2:	f001 f944 	bl	8002c2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2038      	movs	r0, #56	; 0x38
 80019ac:	f001 f923 	bl	8002bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019b0:	2038      	movs	r0, #56	; 0x38
 80019b2:	f001 f93c 	bl	8002c2e <HAL_NVIC_EnableIRQ>

}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	4b60      	ldr	r3, [pc, #384]	; (8001b60 <MX_GPIO_Init+0x19c>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a5f      	ldr	r2, [pc, #380]	; (8001b60 <MX_GPIO_Init+0x19c>)
 80019e4:	f043 0310 	orr.w	r3, r3, #16
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b5d      	ldr	r3, [pc, #372]	; (8001b60 <MX_GPIO_Init+0x19c>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	4b59      	ldr	r3, [pc, #356]	; (8001b60 <MX_GPIO_Init+0x19c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a58      	ldr	r2, [pc, #352]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b56      	ldr	r3, [pc, #344]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b52      	ldr	r3, [pc, #328]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a51      	ldr	r2, [pc, #324]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b4f      	ldr	r3, [pc, #316]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b4b      	ldr	r3, [pc, #300]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a4a      	ldr	r2, [pc, #296]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b48      	ldr	r3, [pc, #288]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	4b44      	ldr	r3, [pc, #272]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a43      	ldr	r2, [pc, #268]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b41      	ldr	r3, [pc, #260]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b3d      	ldr	r3, [pc, #244]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a3c      	ldr	r2, [pc, #240]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a70:	f043 0308 	orr.w	r3, r3, #8
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b3a      	ldr	r3, [pc, #232]	; (8001b60 <MX_GPIO_Init+0x19c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2108      	movs	r1, #8
 8001a86:	4837      	ldr	r0, [pc, #220]	; (8001b64 <MX_GPIO_Init+0x1a0>)
 8001a88:	f002 f80e 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2101      	movs	r1, #1
 8001a90:	4835      	ldr	r0, [pc, #212]	; (8001b68 <MX_GPIO_Init+0x1a4>)
 8001a92:	f002 f809 	bl	8003aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD2_Pin|LD1_Pin
 8001a96:	2200      	movs	r2, #0
 8001a98:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001a9c:	4833      	ldr	r0, [pc, #204]	; (8001b6c <MX_GPIO_Init+0x1a8>)
 8001a9e:	f002 f803 	bl	8003aa8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001aa2:	2308      	movs	r3, #8
 8001aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	482a      	ldr	r0, [pc, #168]	; (8001b64 <MX_GPIO_Init+0x1a0>)
 8001aba:	f001 fe5b 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	2300      	movs	r3, #0
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ace:	f107 031c 	add.w	r3, r7, #28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4824      	ldr	r0, [pc, #144]	; (8001b68 <MX_GPIO_Init+0x1a4>)
 8001ad6:	f001 fe4d 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <MX_GPIO_Init+0x1ac>)
 8001ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	4619      	mov	r1, r3
 8001aec:	4821      	ldr	r0, [pc, #132]	; (8001b74 <MX_GPIO_Init+0x1b0>)
 8001aee:	f001 fe41 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001af2:	2304      	movs	r3, #4
 8001af4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af6:	2300      	movs	r3, #0
 8001af8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afe:	f107 031c 	add.w	r3, r7, #28
 8001b02:	4619      	mov	r1, r3
 8001b04:	481c      	ldr	r0, [pc, #112]	; (8001b78 <MX_GPIO_Init+0x1b4>)
 8001b06:	f001 fe35 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD2_Pin LD1_Pin
                           PD4 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD2_Pin|LD1_Pin
 8001b0a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001b0e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	4812      	ldr	r0, [pc, #72]	; (8001b6c <MX_GPIO_Init+0x1a8>)
 8001b24:	f001 fe26 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	480c      	ldr	r0, [pc, #48]	; (8001b6c <MX_GPIO_Init+0x1a8>)
 8001b3c:	f001 fe1a 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b40:	2302      	movs	r3, #2
 8001b42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MX_GPIO_Init+0x1ac>)
 8001b46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	4804      	ldr	r0, [pc, #16]	; (8001b64 <MX_GPIO_Init+0x1a0>)
 8001b54:	f001 fe0e 	bl	8003774 <HAL_GPIO_Init>

}
 8001b58:	bf00      	nop
 8001b5a:	3730      	adds	r7, #48	; 0x30
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800
 8001b64:	40021000 	.word	0x40021000
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	40020c00 	.word	0x40020c00
 8001b70:	10110000 	.word	0x10110000
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400

08001b7c <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

// ADC CALLBACK INT
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc){
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	callback_half_flag = 1;
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_ADC_ConvHalfCpltCallback+0x20>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
	callback_full_flag = 0;
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	20000094 	.word	0x20000094
 8001ba0:	20000095 	.word	0x20000095

08001ba4 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	callback_full_flag = 1;
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_ADC_ConvCpltCallback+0x20>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
	callback_half_flag = 0;
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <HAL_ADC_ConvCpltCallback+0x24>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	20000095 	.word	0x20000095
 8001bc8:	20000094 	.word	0x20000094

08001bcc <HAL_TIM_PeriodElapsedCallback>:

// UART SEND INT
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	if (htim==&htim3){ // check that interrupt is from tim3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a06      	ldr	r2, [pc, #24]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d102      	bne.n	8001be2 <HAL_TIM_PeriodElapsedCallback+0x16>
		callback_uart_flag = 1;
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
	}
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2000025c 	.word	0x2000025c
 8001bf4:	20000096 	.word	0x20000096

08001bf8 <DMATransferComplete>:


void DMATransferComplete(DMA_HandleTypeDef *hdma){
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	huart2.Instance->CR3 &= ~USART_CR3_DMAT;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <DMATransferComplete+0x2c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	695a      	ldr	r2, [r3, #20]
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <DMATransferComplete+0x2c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c0e:	615a      	str	r2, [r3, #20]
	HAL_GPIO_TogglePin(GPIOD, LD3_Pin); // debug
 8001c10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c14:	4804      	ldr	r0, [pc, #16]	; (8001c28 <DMATransferComplete+0x30>)
 8001c16:	f001 ff60 	bl	8003ada <HAL_GPIO_TogglePin>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	2000549c 	.word	0x2000549c
 8001c28:	40020c00 	.word	0x40020c00

08001c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	607b      	str	r3, [r7, #4]
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <HAL_MspInit+0x4c>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	4a0f      	ldr	r2, [pc, #60]	; (8001c88 <HAL_MspInit+0x4c>)
 8001c4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c50:	6453      	str	r3, [r2, #68]	; 0x44
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <HAL_MspInit+0x4c>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_MspInit+0x4c>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a08      	ldr	r2, [pc, #32]	; (8001c88 <HAL_MspInit+0x4c>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_MspInit+0x4c>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c76:	603b      	str	r3, [r7, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c7a:	2007      	movs	r0, #7
 8001c7c:	f000 ffb0 	bl	8002be0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40023800 	.word	0x40023800

08001c8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08a      	sub	sp, #40	; 0x28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a2f      	ldr	r2, [pc, #188]	; (8001d68 <HAL_ADC_MspInit+0xdc>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d157      	bne.n	8001d5e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_ADC_MspInit+0xe0>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a2d      	ldr	r2, [pc, #180]	; (8001d6c <HAL_ADC_MspInit+0xe0>)
 8001cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_ADC_MspInit+0xe0>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc6:	613b      	str	r3, [r7, #16]
 8001cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b27      	ldr	r3, [pc, #156]	; (8001d6c <HAL_ADC_MspInit+0xe0>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a26      	ldr	r2, [pc, #152]	; (8001d6c <HAL_ADC_MspInit+0xe0>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_ADC_MspInit+0xe0>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cea:	2303      	movs	r3, #3
 8001cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	481d      	ldr	r0, [pc, #116]	; (8001d70 <HAL_ADC_MspInit+0xe4>)
 8001cfa:	f001 fd3b 	bl	8003774 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_ADC_MspInit+0xe8>)
 8001d00:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <HAL_ADC_MspInit+0xec>)
 8001d02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_ADC_MspInit+0xe8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <HAL_ADC_MspInit+0xe8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <HAL_ADC_MspInit+0xe8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <HAL_ADC_MspInit+0xe8>)
 8001d18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d1c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d1e:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <HAL_ADC_MspInit+0xe8>)
 8001d20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d24:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_ADC_MspInit+0xe8>)
 8001d28:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_ADC_MspInit+0xe8>)
 8001d30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d34:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_ADC_MspInit+0xe8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d3c:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_ADC_MspInit+0xe8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d42:	480c      	ldr	r0, [pc, #48]	; (8001d74 <HAL_ADC_MspInit+0xe8>)
 8001d44:	f001 f954 	bl	8002ff0 <HAL_DMA_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d4e:	f7ff ff6d 	bl	8001c2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <HAL_ADC_MspInit+0xe8>)
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38
 8001d58:	4a06      	ldr	r2, [pc, #24]	; (8001d74 <HAL_ADC_MspInit+0xe8>)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40012000 	.word	0x40012000
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	200003b8 	.word	0x200003b8
 8001d78:	40026410 	.word	0x40026410

08001d7c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a2f      	ldr	r2, [pc, #188]	; (8001e58 <HAL_DAC_MspInit+0xdc>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d158      	bne.n	8001e50 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <HAL_DAC_MspInit+0xe0>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a2d      	ldr	r2, [pc, #180]	; (8001e5c <HAL_DAC_MspInit+0xe0>)
 8001da8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <HAL_DAC_MspInit+0xe0>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_DAC_MspInit+0xe0>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <HAL_DAC_MspInit+0xe0>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_DAC_MspInit+0xe0>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dd6:	2310      	movs	r3, #16
 8001dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	481d      	ldr	r0, [pc, #116]	; (8001e60 <HAL_DAC_MspInit+0xe4>)
 8001dea:	f001 fcc3 	bl	8003774 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001dee:	4b1d      	ldr	r3, [pc, #116]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001df0:	4a1d      	ldr	r2, [pc, #116]	; (8001e68 <HAL_DAC_MspInit+0xec>)
 8001df2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001df6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001dfa:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dfc:	4b19      	ldr	r3, [pc, #100]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001dfe:	2240      	movs	r2, #64	; 0x40
 8001e00:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e02:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e0e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001e12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e16:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e1e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e26:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001e34:	480b      	ldr	r0, [pc, #44]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001e36:	f001 f8db 	bl	8002ff0 <HAL_DMA_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001e40:	f7ff fef4 	bl	8001c2c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a07      	ldr	r2, [pc, #28]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <HAL_DAC_MspInit+0xe8>)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40007400 	.word	0x40007400
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	2000029c 	.word	0x2000029c
 8001e68:	40026088 	.word	0x40026088

08001e6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <HAL_TIM_Base_MspInit+0x98>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d10e      	bne.n	8001e9c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <HAL_TIM_Base_MspInit+0x9c>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	4a20      	ldr	r2, [pc, #128]	; (8001f08 <HAL_TIM_Base_MspInit+0x9c>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	; (8001f08 <HAL_TIM_Base_MspInit+0x9c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e9a:	e02e      	b.n	8001efa <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ea4:	d10e      	bne.n	8001ec4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_TIM_Base_MspInit+0x9c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a16      	ldr	r2, [pc, #88]	; (8001f08 <HAL_TIM_Base_MspInit+0x9c>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_TIM_Base_MspInit+0x9c>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
}
 8001ec2:	e01a      	b.n	8001efa <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <HAL_TIM_Base_MspInit+0xa0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d115      	bne.n	8001efa <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_TIM_Base_MspInit+0x9c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_TIM_Base_MspInit+0x9c>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_TIM_Base_MspInit+0x9c>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	201d      	movs	r0, #29
 8001ef0:	f000 fe81 	bl	8002bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ef4:	201d      	movs	r0, #29
 8001ef6:	f000 fe9a 	bl	8002c2e <HAL_NVIC_EnableIRQ>
}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40000400 	.word	0x40000400

08001f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a30      	ldr	r2, [pc, #192]	; (8001ff0 <HAL_UART_MspInit+0xe0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d159      	bne.n	8001fe6 <HAL_UART_MspInit+0xd6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b2f      	ldr	r3, [pc, #188]	; (8001ff4 <HAL_UART_MspInit+0xe4>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a2e      	ldr	r2, [pc, #184]	; (8001ff4 <HAL_UART_MspInit+0xe4>)
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40
 8001f42:	4b2c      	ldr	r3, [pc, #176]	; (8001ff4 <HAL_UART_MspInit+0xe4>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b28      	ldr	r3, [pc, #160]	; (8001ff4 <HAL_UART_MspInit+0xe4>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a27      	ldr	r2, [pc, #156]	; (8001ff4 <HAL_UART_MspInit+0xe4>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <HAL_UART_MspInit+0xe4>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7a:	2307      	movs	r3, #7
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 0314 	add.w	r3, r7, #20
 8001f82:	4619      	mov	r1, r3
 8001f84:	481c      	ldr	r0, [pc, #112]	; (8001ff8 <HAL_UART_MspInit+0xe8>)
 8001f86:	f001 fbf5 	bl	8003774 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <HAL_UART_MspInit+0xec>)
 8001f8c:	4a1c      	ldr	r2, [pc, #112]	; (8002000 <HAL_UART_MspInit+0xf0>)
 8001f8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001f90:	4b1a      	ldr	r3, [pc, #104]	; (8001ffc <HAL_UART_MspInit+0xec>)
 8001f92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f96:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f98:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <HAL_UART_MspInit+0xec>)
 8001f9a:	2240      	movs	r2, #64	; 0x40
 8001f9c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <HAL_UART_MspInit+0xec>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa4:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <HAL_UART_MspInit+0xec>)
 8001fa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001faa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <HAL_UART_MspInit+0xec>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_UART_MspInit+0xec>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <HAL_UART_MspInit+0xec>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fbe:	4b0f      	ldr	r3, [pc, #60]	; (8001ffc <HAL_UART_MspInit+0xec>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fc4:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <HAL_UART_MspInit+0xec>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001fca:	480c      	ldr	r0, [pc, #48]	; (8001ffc <HAL_UART_MspInit+0xec>)
 8001fcc:	f001 f810 	bl	8002ff0 <HAL_DMA_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001fd6:	f7ff fe29 	bl	8001c2c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_UART_MspInit+0xec>)
 8001fde:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe0:	4a06      	ldr	r2, [pc, #24]	; (8001ffc <HAL_UART_MspInit+0xec>)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fe6:	bf00      	nop
 8001fe8:	3728      	adds	r7, #40	; 0x28
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40004400 	.word	0x40004400
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40020000 	.word	0x40020000
 8001ffc:	20000344 	.word	0x20000344
 8002000:	400260a0 	.word	0x400260a0

08002004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	e7fe      	b.n	800201c <MemManage_Handler+0x4>

0800201e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002022:	e7fe      	b.n	8002022 <BusFault_Handler+0x4>

08002024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <UsageFault_Handler+0x4>

0800202a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002058:	f000 f8f2 	bl	8002240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}

08002060 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002064:	4802      	ldr	r0, [pc, #8]	; (8002070 <DMA1_Stream5_IRQHandler+0x10>)
 8002066:	f001 f8c9 	bl	80031fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	2000029c 	.word	0x2000029c

08002074 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <DMA1_Stream6_IRQHandler+0x10>)
 800207a:	f001 f8bf 	bl	80031fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000344 	.word	0x20000344

08002088 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <TIM3_IRQHandler+0x10>)
 800208e:	f002 fa87 	bl	80045a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000025c 	.word	0x2000025c

0800209c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80020a0:	4802      	ldr	r0, [pc, #8]	; (80020ac <DMA2_Stream0_IRQHandler+0x10>)
 80020a2:	f001 f8ab 	bl	80031fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200003b8 	.word	0x200003b8

080020b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b8:	4a14      	ldr	r2, [pc, #80]	; (800210c <_sbrk+0x5c>)
 80020ba:	4b15      	ldr	r3, [pc, #84]	; (8002110 <_sbrk+0x60>)
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c4:	4b13      	ldr	r3, [pc, #76]	; (8002114 <_sbrk+0x64>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020cc:	4b11      	ldr	r3, [pc, #68]	; (8002114 <_sbrk+0x64>)
 80020ce:	4a12      	ldr	r2, [pc, #72]	; (8002118 <_sbrk+0x68>)
 80020d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d2:	4b10      	ldr	r3, [pc, #64]	; (8002114 <_sbrk+0x64>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4413      	add	r3, r2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d207      	bcs.n	80020f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e0:	f004 fc36 	bl	8006950 <__errno>
 80020e4:	4602      	mov	r2, r0
 80020e6:	230c      	movs	r3, #12
 80020e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80020ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ee:	e009      	b.n	8002104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <_sbrk+0x64>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	4a05      	ldr	r2, [pc, #20]	; (8002114 <_sbrk+0x64>)
 8002100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20020000 	.word	0x20020000
 8002110:	00000400 	.word	0x00000400
 8002114:	20000098 	.word	0x20000098
 8002118:	20007520 	.word	0x20007520

0800211c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002120:	4b08      	ldr	r3, [pc, #32]	; (8002144 <SystemInit+0x28>)
 8002122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002126:	4a07      	ldr	r2, [pc, #28]	; (8002144 <SystemInit+0x28>)
 8002128:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800212c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SystemInit+0x28>)
 8002132:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002136:	609a      	str	r2, [r3, #8]
#endif
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002180 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800214c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800214e:	e003      	b.n	8002158 <LoopCopyDataInit>

08002150 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002152:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002154:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002156:	3104      	adds	r1, #4

08002158 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002158:	480b      	ldr	r0, [pc, #44]	; (8002188 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800215c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800215e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002160:	d3f6      	bcc.n	8002150 <CopyDataInit>
  ldr  r2, =_sbss
 8002162:	4a0b      	ldr	r2, [pc, #44]	; (8002190 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002164:	e002      	b.n	800216c <LoopFillZerobss>

08002166 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002166:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002168:	f842 3b04 	str.w	r3, [r2], #4

0800216c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800216e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002170:	d3f9      	bcc.n	8002166 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002172:	f7ff ffd3 	bl	800211c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002176:	f004 fbf1 	bl	800695c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800217a:	f7ff f86d 	bl	8001258 <main>
  bx  lr    
 800217e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002180:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002184:	0801bd28 	.word	0x0801bd28
  ldr  r0, =_sdata
 8002188:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800218c:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002190:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002194:	20007520 	.word	0x20007520

08002198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002198:	e7fe      	b.n	8002198 <ADC_IRQHandler>
	...

0800219c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021a0:	4b0e      	ldr	r3, [pc, #56]	; (80021dc <HAL_Init+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0d      	ldr	r2, [pc, #52]	; (80021dc <HAL_Init+0x40>)
 80021a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_Init+0x40>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0a      	ldr	r2, [pc, #40]	; (80021dc <HAL_Init+0x40>)
 80021b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021b8:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_Init+0x40>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a07      	ldr	r2, [pc, #28]	; (80021dc <HAL_Init+0x40>)
 80021be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c4:	2003      	movs	r0, #3
 80021c6:	f000 fd0b 	bl	8002be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f000 f808 	bl	80021e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021d0:	f7ff fd34 	bl	8001c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023c00 	.word	0x40023c00

080021e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021e8:	4b12      	ldr	r3, [pc, #72]	; (8002234 <HAL_InitTick+0x54>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b12      	ldr	r3, [pc, #72]	; (8002238 <HAL_InitTick+0x58>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fd23 	bl	8002c4a <HAL_SYSTICK_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e00e      	b.n	800222c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b0f      	cmp	r3, #15
 8002212:	d80a      	bhi.n	800222a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002214:	2200      	movs	r2, #0
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800221c:	f000 fceb 	bl	8002bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002220:	4a06      	ldr	r2, [pc, #24]	; (800223c <HAL_InitTick+0x5c>)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002226:	2300      	movs	r3, #0
 8002228:	e000      	b.n	800222c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000004 	.word	0x20000004
 8002238:	2000000c 	.word	0x2000000c
 800223c:	20000008 	.word	0x20000008

08002240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_IncTick+0x20>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	461a      	mov	r2, r3
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_IncTick+0x24>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4413      	add	r3, r2
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <HAL_IncTick+0x24>)
 8002252:	6013      	str	r3, [r2, #0]
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	2000000c 	.word	0x2000000c
 8002264:	20007518 	.word	0x20007518

08002268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return uwTick;
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <HAL_GetTick+0x14>)
 800226e:	681b      	ldr	r3, [r3, #0]
}
 8002270:	4618      	mov	r0, r3
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20007518 	.word	0x20007518

08002280 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e033      	b.n	80022fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff fcf4 	bl	8001c8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d118      	bne.n	80022f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022c6:	f023 0302 	bic.w	r3, r3, #2
 80022ca:	f043 0202 	orr.w	r2, r3, #2
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fa36 	bl	8002744 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	f043 0201 	orr.w	r2, r3, #1
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40
 80022ee:	e001      	b.n	80022f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
	...

08002308 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_ADC_Start_DMA+0x1e>
 8002322:	2302      	movs	r3, #2
 8002324:	e0cc      	b.n	80024c0 <HAL_ADC_Start_DMA+0x1b8>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d018      	beq.n	800236e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689a      	ldr	r2, [r3, #8]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800234c:	4b5e      	ldr	r3, [pc, #376]	; (80024c8 <HAL_ADC_Start_DMA+0x1c0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a5e      	ldr	r2, [pc, #376]	; (80024cc <HAL_ADC_Start_DMA+0x1c4>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0c9a      	lsrs	r2, r3, #18
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002360:	e002      	b.n	8002368 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	3b01      	subs	r3, #1
 8002366:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f9      	bne.n	8002362 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	f040 80a0 	bne.w	80024be <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002386:	f023 0301 	bic.w	r3, r3, #1
 800238a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023bc:	d106      	bne.n	80023cc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f023 0206 	bic.w	r2, r3, #6
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
 80023ca:	e002      	b.n	80023d2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <HAL_ADC_Start_DMA+0x1c8>)
 80023dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e2:	4a3c      	ldr	r2, [pc, #240]	; (80024d4 <HAL_ADC_Start_DMA+0x1cc>)
 80023e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ea:	4a3b      	ldr	r2, [pc, #236]	; (80024d8 <HAL_ADC_Start_DMA+0x1d0>)
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	4a3a      	ldr	r2, [pc, #232]	; (80024dc <HAL_ADC_Start_DMA+0x1d4>)
 80023f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80023fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800240e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800241e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	334c      	adds	r3, #76	; 0x4c
 800242a:	4619      	mov	r1, r3
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f000 fe8c 	bl	800314c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	2b00      	cmp	r3, #0
 800243e:	d12a      	bne.n	8002496 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a26      	ldr	r2, [pc, #152]	; (80024e0 <HAL_ADC_Start_DMA+0x1d8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d015      	beq.n	8002476 <HAL_ADC_Start_DMA+0x16e>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <HAL_ADC_Start_DMA+0x1dc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d105      	bne.n	8002460 <HAL_ADC_Start_DMA+0x158>
 8002454:	4b1e      	ldr	r3, [pc, #120]	; (80024d0 <HAL_ADC_Start_DMA+0x1c8>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 031f 	and.w	r3, r3, #31
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00a      	beq.n	8002476 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a20      	ldr	r2, [pc, #128]	; (80024e8 <HAL_ADC_Start_DMA+0x1e0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d129      	bne.n	80024be <HAL_ADC_Start_DMA+0x1b6>
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_ADC_Start_DMA+0x1c8>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 031f 	and.w	r3, r3, #31
 8002472:	2b0f      	cmp	r3, #15
 8002474:	d823      	bhi.n	80024be <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d11c      	bne.n	80024be <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	e013      	b.n	80024be <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_ADC_Start_DMA+0x1d8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d10e      	bne.n	80024be <HAL_ADC_Start_DMA+0x1b6>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d107      	bne.n	80024be <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024bc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000004 	.word	0x20000004
 80024cc:	431bde83 	.word	0x431bde83
 80024d0:	40012300 	.word	0x40012300
 80024d4:	0800293d 	.word	0x0800293d
 80024d8:	080029f7 	.word	0x080029f7
 80024dc:	08002a13 	.word	0x08002a13
 80024e0:	40012000 	.word	0x40012000
 80024e4:	40012100 	.word	0x40012100
 80024e8:	40012200 	.word	0x40012200

080024ec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002514:	2b01      	cmp	r3, #1
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x1c>
 8002518:	2302      	movs	r3, #2
 800251a:	e105      	b.n	8002728 <HAL_ADC_ConfigChannel+0x228>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2b09      	cmp	r3, #9
 800252a:	d925      	bls.n	8002578 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68d9      	ldr	r1, [r3, #12]
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	b29b      	uxth	r3, r3
 8002538:	461a      	mov	r2, r3
 800253a:	4613      	mov	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	3b1e      	subs	r3, #30
 8002542:	2207      	movs	r2, #7
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	43da      	mvns	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	400a      	ands	r2, r1
 8002550:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	68d9      	ldr	r1, [r3, #12]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	4618      	mov	r0, r3
 8002564:	4603      	mov	r3, r0
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4403      	add	r3, r0
 800256a:	3b1e      	subs	r3, #30
 800256c:	409a      	lsls	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	430a      	orrs	r2, r1
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	e022      	b.n	80025be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6919      	ldr	r1, [r3, #16]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	2207      	movs	r2, #7
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	400a      	ands	r2, r1
 800259a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6919      	ldr	r1, [r3, #16]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	4618      	mov	r0, r3
 80025ae:	4603      	mov	r3, r0
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4403      	add	r3, r0
 80025b4:	409a      	lsls	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	430a      	orrs	r2, r1
 80025bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d824      	bhi.n	8002610 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	3b05      	subs	r3, #5
 80025d8:	221f      	movs	r2, #31
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	400a      	ands	r2, r1
 80025e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3b05      	subs	r3, #5
 8002602:	fa00 f203 	lsl.w	r2, r0, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	635a      	str	r2, [r3, #52]	; 0x34
 800260e:	e04c      	b.n	80026aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b0c      	cmp	r3, #12
 8002616:	d824      	bhi.n	8002662 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4413      	add	r3, r2
 8002628:	3b23      	subs	r3, #35	; 0x23
 800262a:	221f      	movs	r2, #31
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43da      	mvns	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	400a      	ands	r2, r1
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	4618      	mov	r0, r3
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	4413      	add	r3, r2
 8002652:	3b23      	subs	r3, #35	; 0x23
 8002654:	fa00 f203 	lsl.w	r2, r0, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	631a      	str	r2, [r3, #48]	; 0x30
 8002660:	e023      	b.n	80026aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	3b41      	subs	r3, #65	; 0x41
 8002674:	221f      	movs	r2, #31
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43da      	mvns	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	400a      	ands	r2, r1
 8002682:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	4618      	mov	r0, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	3b41      	subs	r3, #65	; 0x41
 800269e:	fa00 f203 	lsl.w	r2, r0, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026aa:	4b22      	ldr	r3, [pc, #136]	; (8002734 <HAL_ADC_ConfigChannel+0x234>)
 80026ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a21      	ldr	r2, [pc, #132]	; (8002738 <HAL_ADC_ConfigChannel+0x238>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d109      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1cc>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b12      	cmp	r3, #18
 80026be:	d105      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a19      	ldr	r2, [pc, #100]	; (8002738 <HAL_ADC_ConfigChannel+0x238>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d123      	bne.n	800271e <HAL_ADC_ConfigChannel+0x21e>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d003      	beq.n	80026e6 <HAL_ADC_ConfigChannel+0x1e6>
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b11      	cmp	r3, #17
 80026e4:	d11b      	bne.n	800271e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b10      	cmp	r3, #16
 80026f8:	d111      	bne.n	800271e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_ADC_ConfigChannel+0x23c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a10      	ldr	r2, [pc, #64]	; (8002740 <HAL_ADC_ConfigChannel+0x240>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	0c9a      	lsrs	r2, r3, #18
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002710:	e002      	b.n	8002718 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	3b01      	subs	r3, #1
 8002716:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f9      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	40012300 	.word	0x40012300
 8002738:	40012000 	.word	0x40012000
 800273c:	20000004 	.word	0x20000004
 8002740:	431bde83 	.word	0x431bde83

08002744 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800274c:	4b79      	ldr	r3, [pc, #484]	; (8002934 <ADC_Init+0x1f0>)
 800274e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	431a      	orrs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002778:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	021a      	lsls	r2, r3, #8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	430a      	orrs	r2, r1
 800278c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800279c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6899      	ldr	r1, [r3, #8]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	4a58      	ldr	r2, [pc, #352]	; (8002938 <ADC_Init+0x1f4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d022      	beq.n	8002822 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689a      	ldr	r2, [r3, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	430a      	orrs	r2, r1
 80027fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800280c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6899      	ldr	r1, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	e00f      	b.n	8002842 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002830:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002840:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0202 	bic.w	r2, r2, #2
 8002850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6899      	ldr	r1, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7e1b      	ldrb	r3, [r3, #24]
 800285c:	005a      	lsls	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01b      	beq.n	80028a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800287e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800288e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6859      	ldr	r1, [r3, #4]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	3b01      	subs	r3, #1
 800289c:	035a      	lsls	r2, r3, #13
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	e007      	b.n	80028b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80028c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	051a      	lsls	r2, r3, #20
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6899      	ldr	r1, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028fa:	025a      	lsls	r2, r3, #9
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	430a      	orrs	r2, r1
 8002902:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689a      	ldr	r2, [r3, #8]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	029a      	lsls	r2, r3, #10
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	609a      	str	r2, [r3, #8]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	40012300 	.word	0x40012300
 8002938:	0f000001 	.word	0x0f000001

0800293c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002948:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002952:	2b00      	cmp	r3, #0
 8002954:	d13c      	bne.n	80029d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d12b      	bne.n	80029c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002974:	2b00      	cmp	r3, #0
 8002976:	d127      	bne.n	80029c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002990:	2b00      	cmp	r3, #0
 8002992:	d119      	bne.n	80029c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0220 	bic.w	r2, r2, #32
 80029a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d105      	bne.n	80029c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f043 0201 	orr.w	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff f8eb 	bl	8001ba4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029ce:	e00e      	b.n	80029ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7ff fd85 	bl	80024ec <HAL_ADC_ErrorCallback>
}
 80029e2:	e004      	b.n	80029ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	4798      	blx	r3
}
 80029ee:	bf00      	nop
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7ff f8b9 	bl	8001b7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2240      	movs	r2, #64	; 0x40
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	f043 0204 	orr.w	r2, r3, #4
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f7ff fd5a 	bl	80024ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a72:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	60d3      	str	r3, [r2, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	f003 0307 	and.w	r3, r3, #7
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0b      	blt.n	8002ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4907      	ldr	r1, [pc, #28]	; (8002adc <__NVIC_EnableIRQ+0x38>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000e100 	.word	0xe000e100

08002ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	6039      	str	r1, [r7, #0]
 8002aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	db0a      	blt.n	8002b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	490c      	ldr	r1, [pc, #48]	; (8002b2c <__NVIC_SetPriority+0x4c>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	440b      	add	r3, r1
 8002b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b08:	e00a      	b.n	8002b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <__NVIC_SetPriority+0x50>)
 8002b10:	79fb      	ldrb	r3, [r7, #7]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	3b04      	subs	r3, #4
 8002b18:	0112      	lsls	r2, r2, #4
 8002b1a:	b2d2      	uxtb	r2, r2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	761a      	strb	r2, [r3, #24]
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr
 8002b2c:	e000e100 	.word	0xe000e100
 8002b30:	e000ed00 	.word	0xe000ed00

08002b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b089      	sub	sp, #36	; 0x24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f1c3 0307 	rsb	r3, r3, #7
 8002b4e:	2b04      	cmp	r3, #4
 8002b50:	bf28      	it	cs
 8002b52:	2304      	movcs	r3, #4
 8002b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3304      	adds	r3, #4
 8002b5a:	2b06      	cmp	r3, #6
 8002b5c:	d902      	bls.n	8002b64 <NVIC_EncodePriority+0x30>
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3b03      	subs	r3, #3
 8002b62:	e000      	b.n	8002b66 <NVIC_EncodePriority+0x32>
 8002b64:	2300      	movs	r3, #0
 8002b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	401a      	ands	r2, r3
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fa01 f303 	lsl.w	r3, r1, r3
 8002b86:	43d9      	mvns	r1, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b8c:	4313      	orrs	r3, r2
         );
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3724      	adds	r7, #36	; 0x24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bac:	d301      	bcc.n	8002bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00f      	b.n	8002bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <SysTick_Config+0x40>)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bba:	210f      	movs	r1, #15
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bc0:	f7ff ff8e 	bl	8002ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bc4:	4b05      	ldr	r3, [pc, #20]	; (8002bdc <SysTick_Config+0x40>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bca:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <SysTick_Config+0x40>)
 8002bcc:	2207      	movs	r2, #7
 8002bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	e000e010 	.word	0xe000e010

08002be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f7ff ff29 	bl	8002a40 <__NVIC_SetPriorityGrouping>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c08:	f7ff ff3e 	bl	8002a88 <__NVIC_GetPriorityGrouping>
 8002c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	6978      	ldr	r0, [r7, #20]
 8002c14:	f7ff ff8e 	bl	8002b34 <NVIC_EncodePriority>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff5d 	bl	8002ae0 <__NVIC_SetPriority>
}
 8002c26:	bf00      	nop
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff31 	bl	8002aa4 <__NVIC_EnableIRQ>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff ffa2 	bl	8002b9c <SysTick_Config>
 8002c58:	4603      	mov	r3, r0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e014      	b.n	8002c9e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	791b      	ldrb	r3, [r3, #4]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d105      	bne.n	8002c8a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff f879 	bl	8001d7c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b086      	sub	sp, #24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	795b      	ldrb	r3, [r3, #5]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_DAC_Start_DMA+0x1e>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e08e      	b.n	8002de4 <HAL_DAC_Start_DMA+0x13c>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d12a      	bne.n	8002d2e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a43      	ldr	r2, [pc, #268]	; (8002dec <HAL_DAC_Start_DMA+0x144>)
 8002cde:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a42      	ldr	r2, [pc, #264]	; (8002df0 <HAL_DAC_Start_DMA+0x148>)
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a41      	ldr	r2, [pc, #260]	; (8002df4 <HAL_DAC_Start_DMA+0x14c>)
 8002cee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002cfe:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d009      	beq.n	8002d1a <HAL_DAC_Start_DMA+0x72>
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d00c      	beq.n	8002d24 <HAL_DAC_Start_DMA+0x7c>
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d000      	beq.n	8002d10 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002d0e:	e039      	b.n	8002d84 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3308      	adds	r3, #8
 8002d16:	617b      	str	r3, [r7, #20]
        break;
 8002d18:	e034      	b.n	8002d84 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	330c      	adds	r3, #12
 8002d20:	617b      	str	r3, [r7, #20]
        break;
 8002d22:	e02f      	b.n	8002d84 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	3310      	adds	r3, #16
 8002d2a:	617b      	str	r3, [r7, #20]
        break;
 8002d2c:	e02a      	b.n	8002d84 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	4a31      	ldr	r2, [pc, #196]	; (8002df8 <HAL_DAC_Start_DMA+0x150>)
 8002d34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	4a30      	ldr	r2, [pc, #192]	; (8002dfc <HAL_DAC_Start_DMA+0x154>)
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	4a2f      	ldr	r2, [pc, #188]	; (8002e00 <HAL_DAC_Start_DMA+0x158>)
 8002d44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d54:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	2b04      	cmp	r3, #4
 8002d5a:	d009      	beq.n	8002d70 <HAL_DAC_Start_DMA+0xc8>
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d00c      	beq.n	8002d7a <HAL_DAC_Start_DMA+0xd2>
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d000      	beq.n	8002d66 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002d64:	e00e      	b.n	8002d84 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3314      	adds	r3, #20
 8002d6c:	617b      	str	r3, [r7, #20]
        break;
 8002d6e:	e009      	b.n	8002d84 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3318      	adds	r3, #24
 8002d76:	617b      	str	r3, [r7, #20]
        break;
 8002d78:	e004      	b.n	8002d84 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	331c      	adds	r3, #28
 8002d80:	617b      	str	r3, [r7, #20]
        break;
 8002d82:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d98:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6898      	ldr	r0, [r3, #8]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	f000 f9d2 	bl	800314c <HAL_DMA_Start_IT>
 8002da8:	e00e      	b.n	8002dc8 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002db8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	68d8      	ldr	r0, [r3, #12]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	f000 f9c2 	bl	800314c <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6819      	ldr	r1, [r3, #0]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	08002edb 	.word	0x08002edb
 8002df0:	08002efd 	.word	0x08002efd
 8002df4:	08002f19 	.word	0x08002f19
 8002df8:	08002f83 	.word	0x08002f83
 8002dfc:	08002fa5 	.word	0x08002fa5
 8002e00:	08002fc1 	.word	0x08002fc1

08002e04 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	2300      	movs	r3, #0
 8002e52:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	795b      	ldrb	r3, [r3, #5]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_DAC_ConfigChannel+0x20>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e036      	b.n	8002ece <HAL_DAC_ConfigChannel+0x8e>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2201      	movs	r2, #1
 8002e64:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002e74:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43db      	mvns	r3, r3
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4013      	ands	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6819      	ldr	r1, [r3, #0]
 8002eae:	22c0      	movs	r2, #192	; 0xc0
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	400a      	ands	r2, r1
 8002ebe:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f7ff ff8b 	bl	8002e04 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	711a      	strb	r2, [r3, #4]
}
 8002ef4:	bf00      	nop
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f7ff ff84 	bl	8002e18 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f043 0204 	orr.w	r2, r3, #4
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f7ff ff7a 	bl	8002e2c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	711a      	strb	r2, [r3, #4]
}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002f6e:	b480      	push	{r7}
 8002f70:	b083      	sub	sp, #12
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff ffd8 	bl	8002f46 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	711a      	strb	r2, [r3, #4]
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb0:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f7ff ffd1 	bl	8002f5a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f043 0204 	orr.w	r2, r3, #4
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff ffc7 	bl	8002f6e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	711a      	strb	r2, [r3, #4]
}
 8002fe6:	bf00      	nop
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ffc:	f7ff f934 	bl	8002268 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e099      	b.n	8003140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800302c:	e00f      	b.n	800304e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800302e:	f7ff f91b 	bl	8002268 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b05      	cmp	r3, #5
 800303a:	d908      	bls.n	800304e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2203      	movs	r2, #3
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e078      	b.n	8003140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1e8      	bne.n	800302e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4b38      	ldr	r3, [pc, #224]	; (8003148 <HAL_DMA_Init+0x158>)
 8003068:	4013      	ands	r3, r2
 800306a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800307a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d107      	bne.n	80030b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	4313      	orrs	r3, r2
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f023 0307 	bic.w	r3, r3, #7
 80030ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d117      	bne.n	8003112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00e      	beq.n	8003112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fac3 	bl	8003680 <DMA_CheckFifoParam>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2240      	movs	r2, #64	; 0x40
 8003104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800310e:	2301      	movs	r3, #1
 8003110:	e016      	b.n	8003140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 fa7a 	bl	8003614 <DMA_CalcBaseAndBitshift>
 8003120:	4603      	mov	r3, r0
 8003122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003128:	223f      	movs	r2, #63	; 0x3f
 800312a:	409a      	lsls	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3718      	adds	r7, #24
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	f010803f 	.word	0xf010803f

0800314c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_DMA_Start_IT+0x26>
 800316e:	2302      	movs	r3, #2
 8003170:	e040      	b.n	80031f4 <HAL_DMA_Start_IT+0xa8>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d12f      	bne.n	80031e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2202      	movs	r2, #2
 800318a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68b9      	ldr	r1, [r7, #8]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fa0c 	bl	80035b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a4:	223f      	movs	r2, #63	; 0x3f
 80031a6:	409a      	lsls	r2, r3
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0216 	orr.w	r2, r2, #22
 80031ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0208 	orr.w	r2, r2, #8
 80031d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e005      	b.n	80031f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031ee:	2302      	movs	r3, #2
 80031f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003208:	4b92      	ldr	r3, [pc, #584]	; (8003454 <HAL_DMA_IRQHandler+0x258>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a92      	ldr	r2, [pc, #584]	; (8003458 <HAL_DMA_IRQHandler+0x25c>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	0a9b      	lsrs	r3, r3, #10
 8003214:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003226:	2208      	movs	r2, #8
 8003228:	409a      	lsls	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d01a      	beq.n	8003268 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0204 	bic.w	r2, r2, #4
 800324e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003254:	2208      	movs	r2, #8
 8003256:	409a      	lsls	r2, r3
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003260:	f043 0201 	orr.w	r2, r3, #1
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326c:	2201      	movs	r2, #1
 800326e:	409a      	lsls	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d012      	beq.n	800329e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00b      	beq.n	800329e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328a:	2201      	movs	r2, #1
 800328c:	409a      	lsls	r2, r3
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003296:	f043 0202 	orr.w	r2, r3, #2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a2:	2204      	movs	r2, #4
 80032a4:	409a      	lsls	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4013      	ands	r3, r2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d012      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c0:	2204      	movs	r2, #4
 80032c2:	409a      	lsls	r2, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	f043 0204 	orr.w	r2, r3, #4
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	2210      	movs	r2, #16
 80032da:	409a      	lsls	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4013      	ands	r3, r2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d043      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0308 	and.w	r3, r3, #8
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d03c      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f6:	2210      	movs	r2, #16
 80032f8:	409a      	lsls	r2, r3
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d018      	beq.n	800333e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d108      	bne.n	800332c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d024      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
 800332a:	e01f      	b.n	800336c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01b      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	4798      	blx	r3
 800333c:	e016      	b.n	800336c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003348:	2b00      	cmp	r3, #0
 800334a:	d107      	bne.n	800335c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0208 	bic.w	r2, r2, #8
 800335a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d003      	beq.n	800336c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	2220      	movs	r2, #32
 8003372:	409a      	lsls	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 808e 	beq.w	800349a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 8086 	beq.w	800349a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003392:	2220      	movs	r2, #32
 8003394:	409a      	lsls	r2, r3
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d136      	bne.n	8003414 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0216 	bic.w	r2, r2, #22
 80033b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695a      	ldr	r2, [r3, #20]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d103      	bne.n	80033d6 <HAL_DMA_IRQHandler+0x1da>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0208 	bic.w	r2, r2, #8
 80033e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ea:	223f      	movs	r2, #63	; 0x3f
 80033ec:	409a      	lsls	r2, r3
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003406:	2b00      	cmp	r3, #0
 8003408:	d07d      	beq.n	8003506 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	4798      	blx	r3
        }
        return;
 8003412:	e078      	b.n	8003506 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01c      	beq.n	800345c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d108      	bne.n	8003442 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003434:	2b00      	cmp	r3, #0
 8003436:	d030      	beq.n	800349a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	4798      	blx	r3
 8003440:	e02b      	b.n	800349a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d027      	beq.n	800349a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
 8003452:	e022      	b.n	800349a <HAL_DMA_IRQHandler+0x29e>
 8003454:	20000004 	.word	0x20000004
 8003458:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10f      	bne.n	800348a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0210 	bic.w	r2, r2, #16
 8003478:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d032      	beq.n	8003508 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d022      	beq.n	80034f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2205      	movs	r2, #5
 80034b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 0201 	bic.w	r2, r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	3301      	adds	r3, #1
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d307      	bcc.n	80034e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1f2      	bne.n	80034c6 <HAL_DMA_IRQHandler+0x2ca>
 80034e0:	e000      	b.n	80034e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d005      	beq.n	8003508 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	4798      	blx	r3
 8003504:	e000      	b.n	8003508 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003506:	bf00      	nop
    }
  }
}
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop

08003510 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	460b      	mov	r3, r1
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_DMA_RegisterCallback+0x20>
 800352c:	2302      	movs	r3, #2
 800352e:	e03c      	b.n	80035aa <HAL_DMA_RegisterCallback+0x9a>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d129      	bne.n	8003598 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8003544:	7afb      	ldrb	r3, [r7, #11]
 8003546:	2b05      	cmp	r3, #5
 8003548:	d829      	bhi.n	800359e <HAL_DMA_RegisterCallback+0x8e>
 800354a:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <HAL_DMA_RegisterCallback+0x40>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003569 	.word	0x08003569
 8003554:	08003571 	.word	0x08003571
 8003558:	08003579 	.word	0x08003579
 800355c:	08003581 	.word	0x08003581
 8003560:	08003589 	.word	0x08003589
 8003564:	08003591 	.word	0x08003591
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800356e:	e017      	b.n	80035a0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003576:	e013      	b.n	80035a0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800357e:	e00f      	b.n	80035a0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8003586:	e00b      	b.n	80035a0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800358e:	e007      	b.n	80035a0 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003596:	e003      	b.n	80035a0 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	75fb      	strb	r3, [r7, #23]
 800359c:	e000      	b.n	80035a0 <HAL_DMA_RegisterCallback+0x90>
      break;
 800359e:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
 80035b6:	bf00      	nop

080035b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80035d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	683a      	ldr	r2, [r7, #0]
 80035dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2b40      	cmp	r3, #64	; 0x40
 80035e4:	d108      	bne.n	80035f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80035f6:	e007      	b.n	8003608 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	60da      	str	r2, [r3, #12]
}
 8003608:	bf00      	nop
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	3b10      	subs	r3, #16
 8003624:	4a14      	ldr	r2, [pc, #80]	; (8003678 <DMA_CalcBaseAndBitshift+0x64>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800362e:	4a13      	ldr	r2, [pc, #76]	; (800367c <DMA_CalcBaseAndBitshift+0x68>)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4413      	add	r3, r2
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d909      	bls.n	8003656 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800364a:	f023 0303 	bic.w	r3, r3, #3
 800364e:	1d1a      	adds	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	659a      	str	r2, [r3, #88]	; 0x58
 8003654:	e007      	b.n	8003666 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800365e:	f023 0303 	bic.w	r3, r3, #3
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	aaaaaaab 	.word	0xaaaaaaab
 800367c:	0800869c 	.word	0x0800869c

08003680 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d11f      	bne.n	80036da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b03      	cmp	r3, #3
 800369e:	d855      	bhi.n	800374c <DMA_CheckFifoParam+0xcc>
 80036a0:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <DMA_CheckFifoParam+0x28>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036cb 	.word	0x080036cb
 80036b0:	080036b9 	.word	0x080036b9
 80036b4:	0800374d 	.word	0x0800374d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d045      	beq.n	8003750 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036c8:	e042      	b.n	8003750 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036d2:	d13f      	bne.n	8003754 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036d8:	e03c      	b.n	8003754 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036e2:	d121      	bne.n	8003728 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b03      	cmp	r3, #3
 80036e8:	d836      	bhi.n	8003758 <DMA_CheckFifoParam+0xd8>
 80036ea:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <DMA_CheckFifoParam+0x70>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003701 	.word	0x08003701
 80036f4:	08003707 	.word	0x08003707
 80036f8:	08003701 	.word	0x08003701
 80036fc:	08003719 	.word	0x08003719
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
      break;
 8003704:	e02f      	b.n	8003766 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d024      	beq.n	800375c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003716:	e021      	b.n	800375c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003720:	d11e      	bne.n	8003760 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003726:	e01b      	b.n	8003760 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d902      	bls.n	8003734 <DMA_CheckFifoParam+0xb4>
 800372e:	2b03      	cmp	r3, #3
 8003730:	d003      	beq.n	800373a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003732:	e018      	b.n	8003766 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
      break;
 8003738:	e015      	b.n	8003766 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00e      	beq.n	8003764 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	73fb      	strb	r3, [r7, #15]
      break;
 800374a:	e00b      	b.n	8003764 <DMA_CheckFifoParam+0xe4>
      break;
 800374c:	bf00      	nop
 800374e:	e00a      	b.n	8003766 <DMA_CheckFifoParam+0xe6>
      break;
 8003750:	bf00      	nop
 8003752:	e008      	b.n	8003766 <DMA_CheckFifoParam+0xe6>
      break;
 8003754:	bf00      	nop
 8003756:	e006      	b.n	8003766 <DMA_CheckFifoParam+0xe6>
      break;
 8003758:	bf00      	nop
 800375a:	e004      	b.n	8003766 <DMA_CheckFifoParam+0xe6>
      break;
 800375c:	bf00      	nop
 800375e:	e002      	b.n	8003766 <DMA_CheckFifoParam+0xe6>
      break;   
 8003760:	bf00      	nop
 8003762:	e000      	b.n	8003766 <DMA_CheckFifoParam+0xe6>
      break;
 8003764:	bf00      	nop
    }
  } 
  
  return status; 
 8003766:	7bfb      	ldrb	r3, [r7, #15]
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003774:	b480      	push	{r7}
 8003776:	b089      	sub	sp, #36	; 0x24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003782:	2300      	movs	r3, #0
 8003784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003786:	2300      	movs	r3, #0
 8003788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800378a:	2300      	movs	r3, #0
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	e16b      	b.n	8003a68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003790:	2201      	movs	r2, #1
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4013      	ands	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80037a4:	693a      	ldr	r2, [r7, #16]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	f040 815a 	bne.w	8003a62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d00b      	beq.n	80037ce <HAL_GPIO_Init+0x5a>
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d007      	beq.n	80037ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037c2:	2b11      	cmp	r3, #17
 80037c4:	d003      	beq.n	80037ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2b12      	cmp	r3, #18
 80037cc:	d130      	bne.n	8003830 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	2203      	movs	r2, #3
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43db      	mvns	r3, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4013      	ands	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003804:	2201      	movs	r2, #1
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	091b      	lsrs	r3, r3, #4
 800381a:	f003 0201 	and.w	r2, r3, #1
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	2203      	movs	r2, #3
 800383c:	fa02 f303 	lsl.w	r3, r2, r3
 8003840:	43db      	mvns	r3, r3
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4013      	ands	r3, r2
 8003846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b02      	cmp	r3, #2
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0xfc>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b12      	cmp	r3, #18
 800386e:	d123      	bne.n	80038b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	08da      	lsrs	r2, r3, #3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	3208      	adds	r2, #8
 8003878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800387c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	220f      	movs	r2, #15
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	69ba      	ldr	r2, [r7, #24]
 8003890:	4013      	ands	r3, r2
 8003892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	08da      	lsrs	r2, r3, #3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3208      	adds	r2, #8
 80038b2:	69b9      	ldr	r1, [r7, #24]
 80038b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	2203      	movs	r2, #3
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4013      	ands	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 0203 	and.w	r2, r3, #3
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80b4 	beq.w	8003a62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	4b5f      	ldr	r3, [pc, #380]	; (8003a7c <HAL_GPIO_Init+0x308>)
 8003900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003902:	4a5e      	ldr	r2, [pc, #376]	; (8003a7c <HAL_GPIO_Init+0x308>)
 8003904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003908:	6453      	str	r3, [r2, #68]	; 0x44
 800390a:	4b5c      	ldr	r3, [pc, #368]	; (8003a7c <HAL_GPIO_Init+0x308>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003916:	4a5a      	ldr	r2, [pc, #360]	; (8003a80 <HAL_GPIO_Init+0x30c>)
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	089b      	lsrs	r3, r3, #2
 800391c:	3302      	adds	r3, #2
 800391e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	220f      	movs	r2, #15
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a51      	ldr	r2, [pc, #324]	; (8003a84 <HAL_GPIO_Init+0x310>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d02b      	beq.n	800399a <HAL_GPIO_Init+0x226>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a50      	ldr	r2, [pc, #320]	; (8003a88 <HAL_GPIO_Init+0x314>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d025      	beq.n	8003996 <HAL_GPIO_Init+0x222>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a4f      	ldr	r2, [pc, #316]	; (8003a8c <HAL_GPIO_Init+0x318>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d01f      	beq.n	8003992 <HAL_GPIO_Init+0x21e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a4e      	ldr	r2, [pc, #312]	; (8003a90 <HAL_GPIO_Init+0x31c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d019      	beq.n	800398e <HAL_GPIO_Init+0x21a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a4d      	ldr	r2, [pc, #308]	; (8003a94 <HAL_GPIO_Init+0x320>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d013      	beq.n	800398a <HAL_GPIO_Init+0x216>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a4c      	ldr	r2, [pc, #304]	; (8003a98 <HAL_GPIO_Init+0x324>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00d      	beq.n	8003986 <HAL_GPIO_Init+0x212>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a4b      	ldr	r2, [pc, #300]	; (8003a9c <HAL_GPIO_Init+0x328>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <HAL_GPIO_Init+0x20e>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a4a      	ldr	r2, [pc, #296]	; (8003aa0 <HAL_GPIO_Init+0x32c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d101      	bne.n	800397e <HAL_GPIO_Init+0x20a>
 800397a:	2307      	movs	r3, #7
 800397c:	e00e      	b.n	800399c <HAL_GPIO_Init+0x228>
 800397e:	2308      	movs	r3, #8
 8003980:	e00c      	b.n	800399c <HAL_GPIO_Init+0x228>
 8003982:	2306      	movs	r3, #6
 8003984:	e00a      	b.n	800399c <HAL_GPIO_Init+0x228>
 8003986:	2305      	movs	r3, #5
 8003988:	e008      	b.n	800399c <HAL_GPIO_Init+0x228>
 800398a:	2304      	movs	r3, #4
 800398c:	e006      	b.n	800399c <HAL_GPIO_Init+0x228>
 800398e:	2303      	movs	r3, #3
 8003990:	e004      	b.n	800399c <HAL_GPIO_Init+0x228>
 8003992:	2302      	movs	r3, #2
 8003994:	e002      	b.n	800399c <HAL_GPIO_Init+0x228>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <HAL_GPIO_Init+0x228>
 800399a:	2300      	movs	r3, #0
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f002 0203 	and.w	r2, r2, #3
 80039a2:	0092      	lsls	r2, r2, #2
 80039a4:	4093      	lsls	r3, r2
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039ac:	4934      	ldr	r1, [pc, #208]	; (8003a80 <HAL_GPIO_Init+0x30c>)
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	089b      	lsrs	r3, r3, #2
 80039b2:	3302      	adds	r3, #2
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039ba:	4b3a      	ldr	r3, [pc, #232]	; (8003aa4 <HAL_GPIO_Init+0x330>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	43db      	mvns	r3, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4013      	ands	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	4313      	orrs	r3, r2
 80039dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039de:	4a31      	ldr	r2, [pc, #196]	; (8003aa4 <HAL_GPIO_Init+0x330>)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039e4:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <HAL_GPIO_Init+0x330>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a08:	4a26      	ldr	r2, [pc, #152]	; (8003aa4 <HAL_GPIO_Init+0x330>)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a0e:	4b25      	ldr	r3, [pc, #148]	; (8003aa4 <HAL_GPIO_Init+0x330>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	43db      	mvns	r3, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <HAL_GPIO_Init+0x330>)
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a38:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <HAL_GPIO_Init+0x330>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a5c:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <HAL_GPIO_Init+0x330>)
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	3301      	adds	r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	f67f ae90 	bls.w	8003790 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a70:	bf00      	nop
 8003a72:	3724      	adds	r7, #36	; 0x24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40013800 	.word	0x40013800
 8003a84:	40020000 	.word	0x40020000
 8003a88:	40020400 	.word	0x40020400
 8003a8c:	40020800 	.word	0x40020800
 8003a90:	40020c00 	.word	0x40020c00
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40021400 	.word	0x40021400
 8003a9c:	40021800 	.word	0x40021800
 8003aa0:	40021c00 	.word	0x40021c00
 8003aa4:	40013c00 	.word	0x40013c00

08003aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	807b      	strh	r3, [r7, #2]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab8:	787b      	ldrb	r3, [r7, #1]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003abe:	887a      	ldrh	r2, [r7, #2]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ac4:	e003      	b.n	8003ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	041a      	lsls	r2, r3, #16
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	619a      	str	r2, [r3, #24]
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	887b      	ldrh	r3, [r7, #2]
 8003aec:	401a      	ands	r2, r3
 8003aee:	887b      	ldrh	r3, [r7, #2]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d104      	bne.n	8003afe <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003af4:	887b      	ldrh	r3, [r7, #2]
 8003af6:	041a      	lsls	r2, r3, #16
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003afc:	e002      	b.n	8003b04 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003afe:	887a      	ldrh	r2, [r7, #2]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	619a      	str	r2, [r3, #24]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e25b      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d075      	beq.n	8003c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b2e:	4ba3      	ldr	r3, [pc, #652]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d00c      	beq.n	8003b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b3a:	4ba0      	ldr	r3, [pc, #640]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d112      	bne.n	8003b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b46:	4b9d      	ldr	r3, [pc, #628]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b52:	d10b      	bne.n	8003b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b54:	4b99      	ldr	r3, [pc, #612]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d05b      	beq.n	8003c18 <HAL_RCC_OscConfig+0x108>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d157      	bne.n	8003c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e236      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b74:	d106      	bne.n	8003b84 <HAL_RCC_OscConfig+0x74>
 8003b76:	4b91      	ldr	r3, [pc, #580]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a90      	ldr	r2, [pc, #576]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	e01d      	b.n	8003bc0 <HAL_RCC_OscConfig+0xb0>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b8c:	d10c      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x98>
 8003b8e:	4b8b      	ldr	r3, [pc, #556]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a8a      	ldr	r2, [pc, #552]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	4b88      	ldr	r3, [pc, #544]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a87      	ldr	r2, [pc, #540]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	e00b      	b.n	8003bc0 <HAL_RCC_OscConfig+0xb0>
 8003ba8:	4b84      	ldr	r3, [pc, #528]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a83      	ldr	r2, [pc, #524]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	4b81      	ldr	r3, [pc, #516]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a80      	ldr	r2, [pc, #512]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d013      	beq.n	8003bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fe fb4e 	bl	8002268 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7fe fb4a 	bl	8002268 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1fb      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	4b76      	ldr	r3, [pc, #472]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0xc0>
 8003bee:	e014      	b.n	8003c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fe fb3a 	bl	8002268 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fe fb36 	bl	8002268 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e1e7      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c0a:	4b6c      	ldr	r3, [pc, #432]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0xe8>
 8003c16:	e000      	b.n	8003c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d063      	beq.n	8003cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c26:	4b65      	ldr	r3, [pc, #404]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f003 030c 	and.w	r3, r3, #12
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00b      	beq.n	8003c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c32:	4b62      	ldr	r3, [pc, #392]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d11c      	bne.n	8003c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3e:	4b5f      	ldr	r3, [pc, #380]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d116      	bne.n	8003c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4a:	4b5c      	ldr	r3, [pc, #368]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_RCC_OscConfig+0x152>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d001      	beq.n	8003c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e1bb      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c62:	4b56      	ldr	r3, [pc, #344]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	4952      	ldr	r1, [pc, #328]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c76:	e03a      	b.n	8003cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d020      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c80:	4b4f      	ldr	r3, [pc, #316]	; (8003dc0 <HAL_RCC_OscConfig+0x2b0>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c86:	f7fe faef 	bl	8002268 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8c:	e008      	b.n	8003ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c8e:	f7fe faeb 	bl	8002268 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d901      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e19c      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca0:	4b46      	ldr	r3, [pc, #280]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0f0      	beq.n	8003c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cac:	4b43      	ldr	r3, [pc, #268]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4940      	ldr	r1, [pc, #256]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]
 8003cc0:	e015      	b.n	8003cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cc2:	4b3f      	ldr	r3, [pc, #252]	; (8003dc0 <HAL_RCC_OscConfig+0x2b0>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fe face 	bl	8002268 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cd0:	f7fe faca 	bl	8002268 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e17b      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ce2:	4b36      	ldr	r3, [pc, #216]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d030      	beq.n	8003d5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d016      	beq.n	8003d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d02:	4b30      	ldr	r3, [pc, #192]	; (8003dc4 <HAL_RCC_OscConfig+0x2b4>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d08:	f7fe faae 	bl	8002268 <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d10:	f7fe faaa 	bl	8002268 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e15b      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d22:	4b26      	ldr	r3, [pc, #152]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d0f0      	beq.n	8003d10 <HAL_RCC_OscConfig+0x200>
 8003d2e:	e015      	b.n	8003d5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d30:	4b24      	ldr	r3, [pc, #144]	; (8003dc4 <HAL_RCC_OscConfig+0x2b4>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d36:	f7fe fa97 	bl	8002268 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3e:	f7fe fa93 	bl	8002268 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e144      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d50:	4b1a      	ldr	r3, [pc, #104]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f0      	bne.n	8003d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a0 	beq.w	8003eaa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6e:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10f      	bne.n	8003d9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a0e      	ldr	r2, [pc, #56]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8a:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d96:	2301      	movs	r3, #1
 8003d98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <HAL_RCC_OscConfig+0x2b8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d121      	bne.n	8003dea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <HAL_RCC_OscConfig+0x2b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a07      	ldr	r2, [pc, #28]	; (8003dc8 <HAL_RCC_OscConfig+0x2b8>)
 8003dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003db2:	f7fe fa59 	bl	8002268 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db8:	e011      	b.n	8003dde <HAL_RCC_OscConfig+0x2ce>
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	42470000 	.word	0x42470000
 8003dc4:	42470e80 	.word	0x42470e80
 8003dc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dcc:	f7fe fa4c 	bl	8002268 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e0fd      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dde:	4b81      	ldr	r3, [pc, #516]	; (8003fe4 <HAL_RCC_OscConfig+0x4d4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f0      	beq.n	8003dcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d106      	bne.n	8003e00 <HAL_RCC_OscConfig+0x2f0>
 8003df2:	4b7d      	ldr	r3, [pc, #500]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df6:	4a7c      	ldr	r2, [pc, #496]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003df8:	f043 0301 	orr.w	r3, r3, #1
 8003dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfe:	e01c      	b.n	8003e3a <HAL_RCC_OscConfig+0x32a>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b05      	cmp	r3, #5
 8003e06:	d10c      	bne.n	8003e22 <HAL_RCC_OscConfig+0x312>
 8003e08:	4b77      	ldr	r3, [pc, #476]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0c:	4a76      	ldr	r2, [pc, #472]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003e0e:	f043 0304 	orr.w	r3, r3, #4
 8003e12:	6713      	str	r3, [r2, #112]	; 0x70
 8003e14:	4b74      	ldr	r3, [pc, #464]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	4a73      	ldr	r2, [pc, #460]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e20:	e00b      	b.n	8003e3a <HAL_RCC_OscConfig+0x32a>
 8003e22:	4b71      	ldr	r3, [pc, #452]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e26:	4a70      	ldr	r2, [pc, #448]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003e28:	f023 0301 	bic.w	r3, r3, #1
 8003e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2e:	4b6e      	ldr	r3, [pc, #440]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	4a6d      	ldr	r2, [pc, #436]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003e34:	f023 0304 	bic.w	r3, r3, #4
 8003e38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d015      	beq.n	8003e6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e42:	f7fe fa11 	bl	8002268 <HAL_GetTick>
 8003e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e48:	e00a      	b.n	8003e60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e4a:	f7fe fa0d 	bl	8002268 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e0bc      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e60:	4b61      	ldr	r3, [pc, #388]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ee      	beq.n	8003e4a <HAL_RCC_OscConfig+0x33a>
 8003e6c:	e014      	b.n	8003e98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6e:	f7fe f9fb 	bl	8002268 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7fe f9f7 	bl	8002268 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0a6      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e8c:	4b56      	ldr	r3, [pc, #344]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1ee      	bne.n	8003e76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e98:	7dfb      	ldrb	r3, [r7, #23]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d105      	bne.n	8003eaa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9e:	4b52      	ldr	r3, [pc, #328]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	4a51      	ldr	r2, [pc, #324]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003ea4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8092 	beq.w	8003fd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eb4:	4b4c      	ldr	r3, [pc, #304]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d05c      	beq.n	8003f7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d141      	bne.n	8003f4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec8:	4b48      	ldr	r3, [pc, #288]	; (8003fec <HAL_RCC_OscConfig+0x4dc>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ece:	f7fe f9cb 	bl	8002268 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed6:	f7fe f9c7 	bl	8002268 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e078      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee8:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f0      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	69da      	ldr	r2, [r3, #28]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	019b      	lsls	r3, r3, #6
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	085b      	lsrs	r3, r3, #1
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	041b      	lsls	r3, r3, #16
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f16:	061b      	lsls	r3, r3, #24
 8003f18:	4933      	ldr	r1, [pc, #204]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f1e:	4b33      	ldr	r3, [pc, #204]	; (8003fec <HAL_RCC_OscConfig+0x4dc>)
 8003f20:	2201      	movs	r2, #1
 8003f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f24:	f7fe f9a0 	bl	8002268 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7fe f99c 	bl	8002268 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e04d      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3e:	4b2a      	ldr	r3, [pc, #168]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x41c>
 8003f4a:	e045      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4c:	4b27      	ldr	r3, [pc, #156]	; (8003fec <HAL_RCC_OscConfig+0x4dc>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f52:	f7fe f989 	bl	8002268 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fe f985 	bl	8002268 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e036      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6c:	4b1e      	ldr	r3, [pc, #120]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x44a>
 8003f78:	e02e      	b.n	8003fd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e029      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f86:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <HAL_RCC_OscConfig+0x4d8>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d11c      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d115      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fae:	4013      	ands	r3, r2
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d10d      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d106      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3718      	adds	r7, #24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	42470060 	.word	0x42470060

08003ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e0cc      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004004:	4b68      	ldr	r3, [pc, #416]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	429a      	cmp	r2, r3
 8004010:	d90c      	bls.n	800402c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004012:	4b65      	ldr	r3, [pc, #404]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800401a:	4b63      	ldr	r3, [pc, #396]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d001      	beq.n	800402c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0b8      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b00      	cmp	r3, #0
 8004036:	d020      	beq.n	800407a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004044:	4b59      	ldr	r3, [pc, #356]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	4a58      	ldr	r2, [pc, #352]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 800404a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800404e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0308 	and.w	r3, r3, #8
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800405c:	4b53      	ldr	r3, [pc, #332]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	4a52      	ldr	r2, [pc, #328]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004068:	4b50      	ldr	r3, [pc, #320]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	494d      	ldr	r1, [pc, #308]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	4313      	orrs	r3, r2
 8004078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d044      	beq.n	8004110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d107      	bne.n	800409e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d119      	bne.n	80040ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e07f      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d003      	beq.n	80040ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ae:	4b3f      	ldr	r3, [pc, #252]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e06f      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040be:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e067      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ce:	4b37      	ldr	r3, [pc, #220]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f023 0203 	bic.w	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4934      	ldr	r1, [pc, #208]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040e0:	f7fe f8c2 	bl	8002268 <HAL_GetTick>
 80040e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e8:	f7fe f8be 	bl	8002268 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e04f      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fe:	4b2b      	ldr	r3, [pc, #172]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 020c 	and.w	r2, r3, #12
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	429a      	cmp	r2, r3
 800410e:	d1eb      	bne.n	80040e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004110:	4b25      	ldr	r3, [pc, #148]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d20c      	bcs.n	8004138 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411e:	4b22      	ldr	r3, [pc, #136]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b20      	ldr	r3, [pc, #128]	; (80041a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 030f 	and.w	r3, r3, #15
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e032      	b.n	800419e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d008      	beq.n	8004156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004144:	4b19      	ldr	r3, [pc, #100]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4916      	ldr	r1, [pc, #88]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	4313      	orrs	r3, r2
 8004154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d009      	beq.n	8004176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004162:	4b12      	ldr	r3, [pc, #72]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	490e      	ldr	r1, [pc, #56]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004176:	f000 f821 	bl	80041bc <HAL_RCC_GetSysClockFreq>
 800417a:	4601      	mov	r1, r0
 800417c:	4b0b      	ldr	r3, [pc, #44]	; (80041ac <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	4a0a      	ldr	r2, [pc, #40]	; (80041b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004188:	5cd3      	ldrb	r3, [r2, r3]
 800418a:	fa21 f303 	lsr.w	r3, r1, r3
 800418e:	4a09      	ldr	r2, [pc, #36]	; (80041b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004192:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f7fe f822 	bl	80021e0 <HAL_InitTick>

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40023c00 	.word	0x40023c00
 80041ac:	40023800 	.word	0x40023800
 80041b0:	08008684 	.word	0x08008684
 80041b4:	20000004 	.word	0x20000004
 80041b8:	20000008 	.word	0x20000008

080041bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	2300      	movs	r3, #0
 80041cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041d2:	4b63      	ldr	r3, [pc, #396]	; (8004360 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 030c 	and.w	r3, r3, #12
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d007      	beq.n	80041ee <HAL_RCC_GetSysClockFreq+0x32>
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d008      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x38>
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f040 80b4 	bne.w	8004350 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e8:	4b5e      	ldr	r3, [pc, #376]	; (8004364 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041ea:	60bb      	str	r3, [r7, #8]
       break;
 80041ec:	e0b3      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ee:	4b5e      	ldr	r3, [pc, #376]	; (8004368 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80041f0:	60bb      	str	r3, [r7, #8]
      break;
 80041f2:	e0b0      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f4:	4b5a      	ldr	r3, [pc, #360]	; (8004360 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041fe:	4b58      	ldr	r3, [pc, #352]	; (8004360 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d04a      	beq.n	80042a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420a:	4b55      	ldr	r3, [pc, #340]	; (8004360 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	099b      	lsrs	r3, r3, #6
 8004210:	f04f 0400 	mov.w	r4, #0
 8004214:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	ea03 0501 	and.w	r5, r3, r1
 8004220:	ea04 0602 	and.w	r6, r4, r2
 8004224:	4629      	mov	r1, r5
 8004226:	4632      	mov	r2, r6
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	f04f 0400 	mov.w	r4, #0
 8004230:	0154      	lsls	r4, r2, #5
 8004232:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004236:	014b      	lsls	r3, r1, #5
 8004238:	4619      	mov	r1, r3
 800423a:	4622      	mov	r2, r4
 800423c:	1b49      	subs	r1, r1, r5
 800423e:	eb62 0206 	sbc.w	r2, r2, r6
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	f04f 0400 	mov.w	r4, #0
 800424a:	0194      	lsls	r4, r2, #6
 800424c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004250:	018b      	lsls	r3, r1, #6
 8004252:	1a5b      	subs	r3, r3, r1
 8004254:	eb64 0402 	sbc.w	r4, r4, r2
 8004258:	f04f 0100 	mov.w	r1, #0
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	00e2      	lsls	r2, r4, #3
 8004262:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004266:	00d9      	lsls	r1, r3, #3
 8004268:	460b      	mov	r3, r1
 800426a:	4614      	mov	r4, r2
 800426c:	195b      	adds	r3, r3, r5
 800426e:	eb44 0406 	adc.w	r4, r4, r6
 8004272:	f04f 0100 	mov.w	r1, #0
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	0262      	lsls	r2, r4, #9
 800427c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004280:	0259      	lsls	r1, r3, #9
 8004282:	460b      	mov	r3, r1
 8004284:	4614      	mov	r4, r2
 8004286:	4618      	mov	r0, r3
 8004288:	4621      	mov	r1, r4
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f04f 0400 	mov.w	r4, #0
 8004290:	461a      	mov	r2, r3
 8004292:	4623      	mov	r3, r4
 8004294:	f7fc fd42 	bl	8000d1c <__aeabi_uldivmod>
 8004298:	4603      	mov	r3, r0
 800429a:	460c      	mov	r4, r1
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e049      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a0:	4b2f      	ldr	r3, [pc, #188]	; (8004360 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	099b      	lsrs	r3, r3, #6
 80042a6:	f04f 0400 	mov.w	r4, #0
 80042aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	ea03 0501 	and.w	r5, r3, r1
 80042b6:	ea04 0602 	and.w	r6, r4, r2
 80042ba:	4629      	mov	r1, r5
 80042bc:	4632      	mov	r2, r6
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	f04f 0400 	mov.w	r4, #0
 80042c6:	0154      	lsls	r4, r2, #5
 80042c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042cc:	014b      	lsls	r3, r1, #5
 80042ce:	4619      	mov	r1, r3
 80042d0:	4622      	mov	r2, r4
 80042d2:	1b49      	subs	r1, r1, r5
 80042d4:	eb62 0206 	sbc.w	r2, r2, r6
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	f04f 0400 	mov.w	r4, #0
 80042e0:	0194      	lsls	r4, r2, #6
 80042e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042e6:	018b      	lsls	r3, r1, #6
 80042e8:	1a5b      	subs	r3, r3, r1
 80042ea:	eb64 0402 	sbc.w	r4, r4, r2
 80042ee:	f04f 0100 	mov.w	r1, #0
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	00e2      	lsls	r2, r4, #3
 80042f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042fc:	00d9      	lsls	r1, r3, #3
 80042fe:	460b      	mov	r3, r1
 8004300:	4614      	mov	r4, r2
 8004302:	195b      	adds	r3, r3, r5
 8004304:	eb44 0406 	adc.w	r4, r4, r6
 8004308:	f04f 0100 	mov.w	r1, #0
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	02a2      	lsls	r2, r4, #10
 8004312:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004316:	0299      	lsls	r1, r3, #10
 8004318:	460b      	mov	r3, r1
 800431a:	4614      	mov	r4, r2
 800431c:	4618      	mov	r0, r3
 800431e:	4621      	mov	r1, r4
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f04f 0400 	mov.w	r4, #0
 8004326:	461a      	mov	r2, r3
 8004328:	4623      	mov	r3, r4
 800432a:	f7fc fcf7 	bl	8000d1c <__aeabi_uldivmod>
 800432e:	4603      	mov	r3, r0
 8004330:	460c      	mov	r4, r1
 8004332:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004334:	4b0a      	ldr	r3, [pc, #40]	; (8004360 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0c1b      	lsrs	r3, r3, #16
 800433a:	f003 0303 	and.w	r3, r3, #3
 800433e:	3301      	adds	r3, #1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	fbb2 f3f3 	udiv	r3, r2, r3
 800434c:	60bb      	str	r3, [r7, #8]
      break;
 800434e:	e002      	b.n	8004356 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004350:	4b04      	ldr	r3, [pc, #16]	; (8004364 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004352:	60bb      	str	r3, [r7, #8]
      break;
 8004354:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004356:	68bb      	ldr	r3, [r7, #8]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004360:	40023800 	.word	0x40023800
 8004364:	00f42400 	.word	0x00f42400
 8004368:	007a1200 	.word	0x007a1200

0800436c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_RCC_GetHCLKFreq+0x14>)
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000004 	.word	0x20000004

08004384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004388:	f7ff fff0 	bl	800436c <HAL_RCC_GetHCLKFreq>
 800438c:	4601      	mov	r1, r0
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	0a9b      	lsrs	r3, r3, #10
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	4a03      	ldr	r2, [pc, #12]	; (80043a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800439a:	5cd3      	ldrb	r3, [r2, r3]
 800439c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40023800 	.word	0x40023800
 80043a8:	08008694 	.word	0x08008694

080043ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043b0:	f7ff ffdc 	bl	800436c <HAL_RCC_GetHCLKFreq>
 80043b4:	4601      	mov	r1, r0
 80043b6:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	0b5b      	lsrs	r3, r3, #13
 80043bc:	f003 0307 	and.w	r3, r3, #7
 80043c0:	4a03      	ldr	r2, [pc, #12]	; (80043d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043c2:	5cd3      	ldrb	r3, [r2, r3]
 80043c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40023800 	.word	0x40023800
 80043d0:	08008694 	.word	0x08008694

080043d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d101      	bne.n	80043e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e01d      	b.n	8004422 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d106      	bne.n	8004400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7fd fd36 	bl	8001e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3304      	adds	r3, #4
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f000 fb0c 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b085      	sub	sp, #20
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2b06      	cmp	r3, #6
 800444a:	d007      	beq.n	800445c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f042 0201 	orr.w	r2, r2, #1
 800445a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f042 0201 	orr.w	r2, r2, #1
 8004488:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b06      	cmp	r3, #6
 800449a:	d007      	beq.n	80044ac <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e01d      	b.n	8004508 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f815 	bl	8004510 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2202      	movs	r2, #2
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3304      	adds	r3, #4
 80044f6:	4619      	mov	r1, r3
 80044f8:	4610      	mov	r0, r2
 80044fa:	f000 fa99 	bl	8004a30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3708      	adds	r7, #8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2201      	movs	r2, #1
 8004534:	6839      	ldr	r1, [r7, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fd64 	bl	8005004 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a15      	ldr	r2, [pc, #84]	; (8004598 <HAL_TIM_OC_Start+0x74>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_TIM_OC_Start+0x2c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a14      	ldr	r2, [pc, #80]	; (800459c <HAL_TIM_OC_Start+0x78>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d101      	bne.n	8004554 <HAL_TIM_OC_Start+0x30>
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <HAL_TIM_OC_Start+0x32>
 8004554:	2300      	movs	r3, #0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d007      	beq.n	800456a <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004568:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b06      	cmp	r3, #6
 800457a:	d007      	beq.n	800458c <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40010000 	.word	0x40010000
 800459c:	40010400 	.word	0x40010400

080045a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d122      	bne.n	80045fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d11b      	bne.n	80045fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0202 	mvn.w	r2, #2
 80045cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f003 0303 	and.w	r3, r3, #3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fa05 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 80045e8:	e005      	b.n	80045f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f9f7 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fa08 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b04      	cmp	r3, #4
 8004608:	d122      	bne.n	8004650 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b04      	cmp	r3, #4
 8004616:	d11b      	bne.n	8004650 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f06f 0204 	mvn.w	r2, #4
 8004620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2202      	movs	r2, #2
 8004626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f9db 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 800463c:	e005      	b.n	800464a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f9cd 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 f9de 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b08      	cmp	r3, #8
 800465c:	d122      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0308 	and.w	r3, r3, #8
 8004668:	2b08      	cmp	r3, #8
 800466a:	d11b      	bne.n	80046a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0208 	mvn.w	r2, #8
 8004674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2204      	movs	r2, #4
 800467a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f003 0303 	and.w	r3, r3, #3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f9b1 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 8004690:	e005      	b.n	800469e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f9a3 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f9b4 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	2b10      	cmp	r3, #16
 80046b0:	d122      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d11b      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0210 	mvn.w	r2, #16
 80046c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2208      	movs	r2, #8
 80046ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f987 	bl	80049f2 <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f979 	bl	80049de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f98a 	bl	8004a06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	2b01      	cmp	r3, #1
 8004704:	d10e      	bne.n	8004724 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b01      	cmp	r3, #1
 8004712:	d107      	bne.n	8004724 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0201 	mvn.w	r2, #1
 800471c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fd fa54 	bl	8001bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472e:	2b80      	cmp	r3, #128	; 0x80
 8004730:	d10e      	bne.n	8004750 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800473c:	2b80      	cmp	r3, #128	; 0x80
 800473e:	d107      	bne.n	8004750 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fd58 	bl	8005200 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475a:	2b40      	cmp	r3, #64	; 0x40
 800475c:	d10e      	bne.n	800477c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b40      	cmp	r3, #64	; 0x40
 800476a:	d107      	bne.n	800477c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f94f 	bl	8004a1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b20      	cmp	r3, #32
 8004788:	d10e      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b20      	cmp	r3, #32
 8004796:	d107      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0220 	mvn.w	r2, #32
 80047a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fd22 	bl	80051ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047a8:	bf00      	nop
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_OC_ConfigChannel+0x1a>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e04e      	b.n	8004868 <HAL_TIM_OC_ConfigChannel+0xb8>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2202      	movs	r2, #2
 80047d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b0c      	cmp	r3, #12
 80047de:	d839      	bhi.n	8004854 <HAL_TIM_OC_ConfigChannel+0xa4>
 80047e0:	a201      	add	r2, pc, #4	; (adr r2, 80047e8 <HAL_TIM_OC_ConfigChannel+0x38>)
 80047e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e6:	bf00      	nop
 80047e8:	0800481d 	.word	0x0800481d
 80047ec:	08004855 	.word	0x08004855
 80047f0:	08004855 	.word	0x08004855
 80047f4:	08004855 	.word	0x08004855
 80047f8:	0800482b 	.word	0x0800482b
 80047fc:	08004855 	.word	0x08004855
 8004800:	08004855 	.word	0x08004855
 8004804:	08004855 	.word	0x08004855
 8004808:	08004839 	.word	0x08004839
 800480c:	08004855 	.word	0x08004855
 8004810:	08004855 	.word	0x08004855
 8004814:	08004855 	.word	0x08004855
 8004818:	08004847 	.word	0x08004847
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 f9a4 	bl	8004b70 <TIM_OC1_SetConfig>
      break;
 8004828:	e015      	b.n	8004856 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fa0d 	bl	8004c50 <TIM_OC2_SetConfig>
      break;
 8004836:	e00e      	b.n	8004856 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	4618      	mov	r0, r3
 8004840:	f000 fa7c 	bl	8004d3c <TIM_OC3_SetConfig>
      break;
 8004844:	e007      	b.n	8004856 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	4618      	mov	r0, r3
 800484e:	f000 fae9 	bl	8004e24 <TIM_OC4_SetConfig>
      break;
 8004852:	e000      	b.n	8004856 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8004854:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_TIM_ConfigClockSource+0x18>
 8004884:	2302      	movs	r3, #2
 8004886:	e0a6      	b.n	80049d6 <HAL_TIM_ConfigClockSource+0x166>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b40      	cmp	r3, #64	; 0x40
 80048be:	d067      	beq.n	8004990 <HAL_TIM_ConfigClockSource+0x120>
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d80b      	bhi.n	80048dc <HAL_TIM_ConfigClockSource+0x6c>
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d073      	beq.n	80049b0 <HAL_TIM_ConfigClockSource+0x140>
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d802      	bhi.n	80048d2 <HAL_TIM_ConfigClockSource+0x62>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d06f      	beq.n	80049b0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80048d0:	e078      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d06c      	beq.n	80049b0 <HAL_TIM_ConfigClockSource+0x140>
 80048d6:	2b30      	cmp	r3, #48	; 0x30
 80048d8:	d06a      	beq.n	80049b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80048da:	e073      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048dc:	2b70      	cmp	r3, #112	; 0x70
 80048de:	d00d      	beq.n	80048fc <HAL_TIM_ConfigClockSource+0x8c>
 80048e0:	2b70      	cmp	r3, #112	; 0x70
 80048e2:	d804      	bhi.n	80048ee <HAL_TIM_ConfigClockSource+0x7e>
 80048e4:	2b50      	cmp	r3, #80	; 0x50
 80048e6:	d033      	beq.n	8004950 <HAL_TIM_ConfigClockSource+0xe0>
 80048e8:	2b60      	cmp	r3, #96	; 0x60
 80048ea:	d041      	beq.n	8004970 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80048ec:	e06a      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f2:	d066      	beq.n	80049c2 <HAL_TIM_ConfigClockSource+0x152>
 80048f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f8:	d017      	beq.n	800492a <HAL_TIM_ConfigClockSource+0xba>
      break;
 80048fa:	e063      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6899      	ldr	r1, [r3, #8]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f000 fb5a 	bl	8004fc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800491e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	609a      	str	r2, [r3, #8]
      break;
 8004928:	e04c      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6818      	ldr	r0, [r3, #0]
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	6899      	ldr	r1, [r3, #8]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f000 fb43 	bl	8004fc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800494c:	609a      	str	r2, [r3, #8]
      break;
 800494e:	e039      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6859      	ldr	r1, [r3, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	461a      	mov	r2, r3
 800495e:	f000 fab7 	bl	8004ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2150      	movs	r1, #80	; 0x50
 8004968:	4618      	mov	r0, r3
 800496a:	f000 fb10 	bl	8004f8e <TIM_ITRx_SetConfig>
      break;
 800496e:	e029      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6818      	ldr	r0, [r3, #0]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	6859      	ldr	r1, [r3, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	461a      	mov	r2, r3
 800497e:	f000 fad6 	bl	8004f2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2160      	movs	r1, #96	; 0x60
 8004988:	4618      	mov	r0, r3
 800498a:	f000 fb00 	bl	8004f8e <TIM_ITRx_SetConfig>
      break;
 800498e:	e019      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6818      	ldr	r0, [r3, #0]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	6859      	ldr	r1, [r3, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	461a      	mov	r2, r3
 800499e:	f000 fa97 	bl	8004ed0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2140      	movs	r1, #64	; 0x40
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 faf0 	bl	8004f8e <TIM_ITRx_SetConfig>
      break;
 80049ae:	e009      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4619      	mov	r1, r3
 80049ba:	4610      	mov	r0, r2
 80049bc:	f000 fae7 	bl	8004f8e <TIM_ITRx_SetConfig>
      break;
 80049c0:	e000      	b.n	80049c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80049c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
	...

08004a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a40      	ldr	r2, [pc, #256]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4e:	d00f      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a3d      	ldr	r2, [pc, #244]	; (8004b48 <TIM_Base_SetConfig+0x118>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00b      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a3c      	ldr	r2, [pc, #240]	; (8004b4c <TIM_Base_SetConfig+0x11c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d007      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a3b      	ldr	r2, [pc, #236]	; (8004b50 <TIM_Base_SetConfig+0x120>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_Base_SetConfig+0x40>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a3a      	ldr	r2, [pc, #232]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d108      	bne.n	8004a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a2f      	ldr	r2, [pc, #188]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d02b      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d027      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a2c      	ldr	r2, [pc, #176]	; (8004b48 <TIM_Base_SetConfig+0x118>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d023      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a2b      	ldr	r2, [pc, #172]	; (8004b4c <TIM_Base_SetConfig+0x11c>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01f      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <TIM_Base_SetConfig+0x120>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d01b      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a29      	ldr	r2, [pc, #164]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d017      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a28      	ldr	r2, [pc, #160]	; (8004b58 <TIM_Base_SetConfig+0x128>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d013      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a27      	ldr	r2, [pc, #156]	; (8004b5c <TIM_Base_SetConfig+0x12c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d00f      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a26      	ldr	r2, [pc, #152]	; (8004b60 <TIM_Base_SetConfig+0x130>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00b      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a25      	ldr	r2, [pc, #148]	; (8004b64 <TIM_Base_SetConfig+0x134>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d007      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a24      	ldr	r2, [pc, #144]	; (8004b68 <TIM_Base_SetConfig+0x138>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d003      	beq.n	8004ae2 <TIM_Base_SetConfig+0xb2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a23      	ldr	r2, [pc, #140]	; (8004b6c <TIM_Base_SetConfig+0x13c>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d108      	bne.n	8004af4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a0a      	ldr	r2, [pc, #40]	; (8004b44 <TIM_Base_SetConfig+0x114>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d003      	beq.n	8004b28 <TIM_Base_SetConfig+0xf8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a0c      	ldr	r2, [pc, #48]	; (8004b54 <TIM_Base_SetConfig+0x124>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d103      	bne.n	8004b30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	691a      	ldr	r2, [r3, #16]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	615a      	str	r2, [r3, #20]
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40000400 	.word	0x40000400
 8004b4c:	40000800 	.word	0x40000800
 8004b50:	40000c00 	.word	0x40000c00
 8004b54:	40010400 	.word	0x40010400
 8004b58:	40014000 	.word	0x40014000
 8004b5c:	40014400 	.word	0x40014400
 8004b60:	40014800 	.word	0x40014800
 8004b64:	40001800 	.word	0x40001800
 8004b68:	40001c00 	.word	0x40001c00
 8004b6c:	40002000 	.word	0x40002000

08004b70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a1b      	ldr	r3, [r3, #32]
 8004b7e:	f023 0201 	bic.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0303 	bic.w	r3, r3, #3
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f023 0302 	bic.w	r3, r3, #2
 8004bb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a20      	ldr	r2, [pc, #128]	; (8004c48 <TIM_OC1_SetConfig+0xd8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_OC1_SetConfig+0x64>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a1f      	ldr	r2, [pc, #124]	; (8004c4c <TIM_OC1_SetConfig+0xdc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d10c      	bne.n	8004bee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	f023 0308 	bic.w	r3, r3, #8
 8004bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a15      	ldr	r2, [pc, #84]	; (8004c48 <TIM_OC1_SetConfig+0xd8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d003      	beq.n	8004bfe <TIM_OC1_SetConfig+0x8e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a14      	ldr	r2, [pc, #80]	; (8004c4c <TIM_OC1_SetConfig+0xdc>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d111      	bne.n	8004c22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685a      	ldr	r2, [r3, #4]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	621a      	str	r2, [r3, #32]
}
 8004c3c:	bf00      	nop
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	40010000 	.word	0x40010000
 8004c4c:	40010400 	.word	0x40010400

08004c50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	f023 0210 	bic.w	r2, r3, #16
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	021b      	lsls	r3, r3, #8
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f023 0320 	bic.w	r3, r3, #32
 8004c9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	011b      	lsls	r3, r3, #4
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a22      	ldr	r2, [pc, #136]	; (8004d34 <TIM_OC2_SetConfig+0xe4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_OC2_SetConfig+0x68>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a21      	ldr	r2, [pc, #132]	; (8004d38 <TIM_OC2_SetConfig+0xe8>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d10d      	bne.n	8004cd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	011b      	lsls	r3, r3, #4
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a17      	ldr	r2, [pc, #92]	; (8004d34 <TIM_OC2_SetConfig+0xe4>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_OC2_SetConfig+0x94>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a16      	ldr	r2, [pc, #88]	; (8004d38 <TIM_OC2_SetConfig+0xe8>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d113      	bne.n	8004d0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40010000 	.word	0x40010000
 8004d38:	40010400 	.word	0x40010400

08004d3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0303 	bic.w	r3, r3, #3
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a21      	ldr	r2, [pc, #132]	; (8004e1c <TIM_OC3_SetConfig+0xe0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_OC3_SetConfig+0x66>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a20      	ldr	r2, [pc, #128]	; (8004e20 <TIM_OC3_SetConfig+0xe4>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10d      	bne.n	8004dbe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004da8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <TIM_OC3_SetConfig+0xe0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_OC3_SetConfig+0x92>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a15      	ldr	r2, [pc, #84]	; (8004e20 <TIM_OC3_SetConfig+0xe4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d113      	bne.n	8004df6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ddc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	621a      	str	r2, [r3, #32]
}
 8004e10:	bf00      	nop
 8004e12:	371c      	adds	r7, #28
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40010400 	.word	0x40010400

08004e24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b087      	sub	sp, #28
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	021b      	lsls	r3, r3, #8
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	031b      	lsls	r3, r3, #12
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a12      	ldr	r2, [pc, #72]	; (8004ec8 <TIM_OC4_SetConfig+0xa4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d003      	beq.n	8004e8c <TIM_OC4_SetConfig+0x68>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a11      	ldr	r2, [pc, #68]	; (8004ecc <TIM_OC4_SetConfig+0xa8>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d109      	bne.n	8004ea0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	019b      	lsls	r3, r3, #6
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	621a      	str	r2, [r3, #32]
}
 8004eba:	bf00      	nop
 8004ebc:	371c      	adds	r7, #28
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40010400 	.word	0x40010400

08004ed0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	f023 0201 	bic.w	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004efa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	011b      	lsls	r3, r3, #4
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f023 030a 	bic.w	r3, r3, #10
 8004f0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	621a      	str	r2, [r3, #32]
}
 8004f22:	bf00      	nop
 8004f24:	371c      	adds	r7, #28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b087      	sub	sp, #28
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	60b9      	str	r1, [r7, #8]
 8004f38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0210 	bic.w	r2, r3, #16
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	031b      	lsls	r3, r3, #12
 8004f5e:	697a      	ldr	r2, [r7, #20]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b085      	sub	sp, #20
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f043 0307 	orr.w	r3, r3, #7
 8004fb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	609a      	str	r2, [r3, #8]
}
 8004fb8:	bf00      	nop
 8004fba:	3714      	adds	r7, #20
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	021a      	lsls	r2, r3, #8
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	609a      	str	r2, [r3, #8]
}
 8004ff8:	bf00      	nop
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005004:	b480      	push	{r7}
 8005006:	b087      	sub	sp, #28
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 031f 	and.w	r3, r3, #31
 8005016:	2201      	movs	r2, #1
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6a1a      	ldr	r2, [r3, #32]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	43db      	mvns	r3, r3
 8005026:	401a      	ands	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1a      	ldr	r2, [r3, #32]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 031f 	and.w	r3, r3, #31
 8005036:	6879      	ldr	r1, [r7, #4]
 8005038:	fa01 f303 	lsl.w	r3, r1, r3
 800503c:	431a      	orrs	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005064:	2302      	movs	r3, #2
 8005066:	e05a      	b.n	800511e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a21      	ldr	r2, [pc, #132]	; (800512c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d022      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b4:	d01d      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1d      	ldr	r2, [pc, #116]	; (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d018      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1b      	ldr	r2, [pc, #108]	; (8005134 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d013      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a1a      	ldr	r2, [pc, #104]	; (8005138 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00e      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a18      	ldr	r2, [pc, #96]	; (800513c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a17      	ldr	r2, [pc, #92]	; (8005140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d004      	beq.n	80050f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a15      	ldr	r2, [pc, #84]	; (8005144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10c      	bne.n	800510c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	4313      	orrs	r3, r2
 8005102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	40010000 	.word	0x40010000
 8005130:	40000400 	.word	0x40000400
 8005134:	40000800 	.word	0x40000800
 8005138:	40000c00 	.word	0x40000c00
 800513c:	40010400 	.word	0x40010400
 8005140:	40014000 	.word	0x40014000
 8005144:	40001800 	.word	0x40001800

08005148 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005160:	2302      	movs	r3, #2
 8005162:	e03d      	b.n	80051e0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e03f      	b.n	80052a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fc fe68 	bl	8001f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2224      	movs	r2, #36	; 0x24
 8005244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68da      	ldr	r2, [r3, #12]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f829 	bl	80052b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800526c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	695a      	ldr	r2, [r3, #20]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800527c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800528c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052f2:	f023 030c 	bic.w	r3, r3, #12
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6812      	ldr	r2, [r2, #0]
 80052fa:	68f9      	ldr	r1, [r7, #12]
 80052fc:	430b      	orrs	r3, r1
 80052fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531e:	f040 818b 	bne.w	8005638 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4ac1      	ldr	r2, [pc, #772]	; (800562c <UART_SetConfig+0x37c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d005      	beq.n	8005338 <UART_SetConfig+0x88>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4abf      	ldr	r2, [pc, #764]	; (8005630 <UART_SetConfig+0x380>)
 8005332:	4293      	cmp	r3, r2
 8005334:	f040 80bd 	bne.w	80054b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005338:	f7ff f838 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 800533c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	461d      	mov	r5, r3
 8005342:	f04f 0600 	mov.w	r6, #0
 8005346:	46a8      	mov	r8, r5
 8005348:	46b1      	mov	r9, r6
 800534a:	eb18 0308 	adds.w	r3, r8, r8
 800534e:	eb49 0409 	adc.w	r4, r9, r9
 8005352:	4698      	mov	r8, r3
 8005354:	46a1      	mov	r9, r4
 8005356:	eb18 0805 	adds.w	r8, r8, r5
 800535a:	eb49 0906 	adc.w	r9, r9, r6
 800535e:	f04f 0100 	mov.w	r1, #0
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800536a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800536e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005372:	4688      	mov	r8, r1
 8005374:	4691      	mov	r9, r2
 8005376:	eb18 0005 	adds.w	r0, r8, r5
 800537a:	eb49 0106 	adc.w	r1, r9, r6
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	461d      	mov	r5, r3
 8005384:	f04f 0600 	mov.w	r6, #0
 8005388:	196b      	adds	r3, r5, r5
 800538a:	eb46 0406 	adc.w	r4, r6, r6
 800538e:	461a      	mov	r2, r3
 8005390:	4623      	mov	r3, r4
 8005392:	f7fb fcc3 	bl	8000d1c <__aeabi_uldivmod>
 8005396:	4603      	mov	r3, r0
 8005398:	460c      	mov	r4, r1
 800539a:	461a      	mov	r2, r3
 800539c:	4ba5      	ldr	r3, [pc, #660]	; (8005634 <UART_SetConfig+0x384>)
 800539e:	fba3 2302 	umull	r2, r3, r3, r2
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	461d      	mov	r5, r3
 80053ac:	f04f 0600 	mov.w	r6, #0
 80053b0:	46a9      	mov	r9, r5
 80053b2:	46b2      	mov	sl, r6
 80053b4:	eb19 0309 	adds.w	r3, r9, r9
 80053b8:	eb4a 040a 	adc.w	r4, sl, sl
 80053bc:	4699      	mov	r9, r3
 80053be:	46a2      	mov	sl, r4
 80053c0:	eb19 0905 	adds.w	r9, r9, r5
 80053c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80053c8:	f04f 0100 	mov.w	r1, #0
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053dc:	4689      	mov	r9, r1
 80053de:	4692      	mov	sl, r2
 80053e0:	eb19 0005 	adds.w	r0, r9, r5
 80053e4:	eb4a 0106 	adc.w	r1, sl, r6
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	461d      	mov	r5, r3
 80053ee:	f04f 0600 	mov.w	r6, #0
 80053f2:	196b      	adds	r3, r5, r5
 80053f4:	eb46 0406 	adc.w	r4, r6, r6
 80053f8:	461a      	mov	r2, r3
 80053fa:	4623      	mov	r3, r4
 80053fc:	f7fb fc8e 	bl	8000d1c <__aeabi_uldivmod>
 8005400:	4603      	mov	r3, r0
 8005402:	460c      	mov	r4, r1
 8005404:	461a      	mov	r2, r3
 8005406:	4b8b      	ldr	r3, [pc, #556]	; (8005634 <UART_SetConfig+0x384>)
 8005408:	fba3 1302 	umull	r1, r3, r3, r2
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	2164      	movs	r1, #100	; 0x64
 8005410:	fb01 f303 	mul.w	r3, r1, r3
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	3332      	adds	r3, #50	; 0x32
 800541a:	4a86      	ldr	r2, [pc, #536]	; (8005634 <UART_SetConfig+0x384>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	005b      	lsls	r3, r3, #1
 8005424:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005428:	4498      	add	r8, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	461d      	mov	r5, r3
 800542e:	f04f 0600 	mov.w	r6, #0
 8005432:	46a9      	mov	r9, r5
 8005434:	46b2      	mov	sl, r6
 8005436:	eb19 0309 	adds.w	r3, r9, r9
 800543a:	eb4a 040a 	adc.w	r4, sl, sl
 800543e:	4699      	mov	r9, r3
 8005440:	46a2      	mov	sl, r4
 8005442:	eb19 0905 	adds.w	r9, r9, r5
 8005446:	eb4a 0a06 	adc.w	sl, sl, r6
 800544a:	f04f 0100 	mov.w	r1, #0
 800544e:	f04f 0200 	mov.w	r2, #0
 8005452:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005456:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800545a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800545e:	4689      	mov	r9, r1
 8005460:	4692      	mov	sl, r2
 8005462:	eb19 0005 	adds.w	r0, r9, r5
 8005466:	eb4a 0106 	adc.w	r1, sl, r6
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	461d      	mov	r5, r3
 8005470:	f04f 0600 	mov.w	r6, #0
 8005474:	196b      	adds	r3, r5, r5
 8005476:	eb46 0406 	adc.w	r4, r6, r6
 800547a:	461a      	mov	r2, r3
 800547c:	4623      	mov	r3, r4
 800547e:	f7fb fc4d 	bl	8000d1c <__aeabi_uldivmod>
 8005482:	4603      	mov	r3, r0
 8005484:	460c      	mov	r4, r1
 8005486:	461a      	mov	r2, r3
 8005488:	4b6a      	ldr	r3, [pc, #424]	; (8005634 <UART_SetConfig+0x384>)
 800548a:	fba3 1302 	umull	r1, r3, r3, r2
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	2164      	movs	r1, #100	; 0x64
 8005492:	fb01 f303 	mul.w	r3, r1, r3
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	3332      	adds	r3, #50	; 0x32
 800549c:	4a65      	ldr	r2, [pc, #404]	; (8005634 <UART_SetConfig+0x384>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	f003 0207 	and.w	r2, r3, #7
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4442      	add	r2, r8
 80054ae:	609a      	str	r2, [r3, #8]
 80054b0:	e26f      	b.n	8005992 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054b2:	f7fe ff67 	bl	8004384 <HAL_RCC_GetPCLK1Freq>
 80054b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	461d      	mov	r5, r3
 80054bc:	f04f 0600 	mov.w	r6, #0
 80054c0:	46a8      	mov	r8, r5
 80054c2:	46b1      	mov	r9, r6
 80054c4:	eb18 0308 	adds.w	r3, r8, r8
 80054c8:	eb49 0409 	adc.w	r4, r9, r9
 80054cc:	4698      	mov	r8, r3
 80054ce:	46a1      	mov	r9, r4
 80054d0:	eb18 0805 	adds.w	r8, r8, r5
 80054d4:	eb49 0906 	adc.w	r9, r9, r6
 80054d8:	f04f 0100 	mov.w	r1, #0
 80054dc:	f04f 0200 	mov.w	r2, #0
 80054e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054ec:	4688      	mov	r8, r1
 80054ee:	4691      	mov	r9, r2
 80054f0:	eb18 0005 	adds.w	r0, r8, r5
 80054f4:	eb49 0106 	adc.w	r1, r9, r6
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	461d      	mov	r5, r3
 80054fe:	f04f 0600 	mov.w	r6, #0
 8005502:	196b      	adds	r3, r5, r5
 8005504:	eb46 0406 	adc.w	r4, r6, r6
 8005508:	461a      	mov	r2, r3
 800550a:	4623      	mov	r3, r4
 800550c:	f7fb fc06 	bl	8000d1c <__aeabi_uldivmod>
 8005510:	4603      	mov	r3, r0
 8005512:	460c      	mov	r4, r1
 8005514:	461a      	mov	r2, r3
 8005516:	4b47      	ldr	r3, [pc, #284]	; (8005634 <UART_SetConfig+0x384>)
 8005518:	fba3 2302 	umull	r2, r3, r3, r2
 800551c:	095b      	lsrs	r3, r3, #5
 800551e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	461d      	mov	r5, r3
 8005526:	f04f 0600 	mov.w	r6, #0
 800552a:	46a9      	mov	r9, r5
 800552c:	46b2      	mov	sl, r6
 800552e:	eb19 0309 	adds.w	r3, r9, r9
 8005532:	eb4a 040a 	adc.w	r4, sl, sl
 8005536:	4699      	mov	r9, r3
 8005538:	46a2      	mov	sl, r4
 800553a:	eb19 0905 	adds.w	r9, r9, r5
 800553e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005542:	f04f 0100 	mov.w	r1, #0
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800554e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005552:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005556:	4689      	mov	r9, r1
 8005558:	4692      	mov	sl, r2
 800555a:	eb19 0005 	adds.w	r0, r9, r5
 800555e:	eb4a 0106 	adc.w	r1, sl, r6
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	461d      	mov	r5, r3
 8005568:	f04f 0600 	mov.w	r6, #0
 800556c:	196b      	adds	r3, r5, r5
 800556e:	eb46 0406 	adc.w	r4, r6, r6
 8005572:	461a      	mov	r2, r3
 8005574:	4623      	mov	r3, r4
 8005576:	f7fb fbd1 	bl	8000d1c <__aeabi_uldivmod>
 800557a:	4603      	mov	r3, r0
 800557c:	460c      	mov	r4, r1
 800557e:	461a      	mov	r2, r3
 8005580:	4b2c      	ldr	r3, [pc, #176]	; (8005634 <UART_SetConfig+0x384>)
 8005582:	fba3 1302 	umull	r1, r3, r3, r2
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	2164      	movs	r1, #100	; 0x64
 800558a:	fb01 f303 	mul.w	r3, r1, r3
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	3332      	adds	r3, #50	; 0x32
 8005594:	4a27      	ldr	r2, [pc, #156]	; (8005634 <UART_SetConfig+0x384>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	005b      	lsls	r3, r3, #1
 800559e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055a2:	4498      	add	r8, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	461d      	mov	r5, r3
 80055a8:	f04f 0600 	mov.w	r6, #0
 80055ac:	46a9      	mov	r9, r5
 80055ae:	46b2      	mov	sl, r6
 80055b0:	eb19 0309 	adds.w	r3, r9, r9
 80055b4:	eb4a 040a 	adc.w	r4, sl, sl
 80055b8:	4699      	mov	r9, r3
 80055ba:	46a2      	mov	sl, r4
 80055bc:	eb19 0905 	adds.w	r9, r9, r5
 80055c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80055c4:	f04f 0100 	mov.w	r1, #0
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055d8:	4689      	mov	r9, r1
 80055da:	4692      	mov	sl, r2
 80055dc:	eb19 0005 	adds.w	r0, r9, r5
 80055e0:	eb4a 0106 	adc.w	r1, sl, r6
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	461d      	mov	r5, r3
 80055ea:	f04f 0600 	mov.w	r6, #0
 80055ee:	196b      	adds	r3, r5, r5
 80055f0:	eb46 0406 	adc.w	r4, r6, r6
 80055f4:	461a      	mov	r2, r3
 80055f6:	4623      	mov	r3, r4
 80055f8:	f7fb fb90 	bl	8000d1c <__aeabi_uldivmod>
 80055fc:	4603      	mov	r3, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	461a      	mov	r2, r3
 8005602:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <UART_SetConfig+0x384>)
 8005604:	fba3 1302 	umull	r1, r3, r3, r2
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	2164      	movs	r1, #100	; 0x64
 800560c:	fb01 f303 	mul.w	r3, r1, r3
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	3332      	adds	r3, #50	; 0x32
 8005616:	4a07      	ldr	r2, [pc, #28]	; (8005634 <UART_SetConfig+0x384>)
 8005618:	fba2 2303 	umull	r2, r3, r2, r3
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	f003 0207 	and.w	r2, r3, #7
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4442      	add	r2, r8
 8005628:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800562a:	e1b2      	b.n	8005992 <UART_SetConfig+0x6e2>
 800562c:	40011000 	.word	0x40011000
 8005630:	40011400 	.word	0x40011400
 8005634:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4ad7      	ldr	r2, [pc, #860]	; (800599c <UART_SetConfig+0x6ec>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d005      	beq.n	800564e <UART_SetConfig+0x39e>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4ad6      	ldr	r2, [pc, #856]	; (80059a0 <UART_SetConfig+0x6f0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	f040 80d1 	bne.w	80057f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800564e:	f7fe fead 	bl	80043ac <HAL_RCC_GetPCLK2Freq>
 8005652:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	469a      	mov	sl, r3
 8005658:	f04f 0b00 	mov.w	fp, #0
 800565c:	46d0      	mov	r8, sl
 800565e:	46d9      	mov	r9, fp
 8005660:	eb18 0308 	adds.w	r3, r8, r8
 8005664:	eb49 0409 	adc.w	r4, r9, r9
 8005668:	4698      	mov	r8, r3
 800566a:	46a1      	mov	r9, r4
 800566c:	eb18 080a 	adds.w	r8, r8, sl
 8005670:	eb49 090b 	adc.w	r9, r9, fp
 8005674:	f04f 0100 	mov.w	r1, #0
 8005678:	f04f 0200 	mov.w	r2, #0
 800567c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005680:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005684:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005688:	4688      	mov	r8, r1
 800568a:	4691      	mov	r9, r2
 800568c:	eb1a 0508 	adds.w	r5, sl, r8
 8005690:	eb4b 0609 	adc.w	r6, fp, r9
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	4619      	mov	r1, r3
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	f04f 0400 	mov.w	r4, #0
 80056a6:	0094      	lsls	r4, r2, #2
 80056a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056ac:	008b      	lsls	r3, r1, #2
 80056ae:	461a      	mov	r2, r3
 80056b0:	4623      	mov	r3, r4
 80056b2:	4628      	mov	r0, r5
 80056b4:	4631      	mov	r1, r6
 80056b6:	f7fb fb31 	bl	8000d1c <__aeabi_uldivmod>
 80056ba:	4603      	mov	r3, r0
 80056bc:	460c      	mov	r4, r1
 80056be:	461a      	mov	r2, r3
 80056c0:	4bb8      	ldr	r3, [pc, #736]	; (80059a4 <UART_SetConfig+0x6f4>)
 80056c2:	fba3 2302 	umull	r2, r3, r3, r2
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	469b      	mov	fp, r3
 80056d0:	f04f 0c00 	mov.w	ip, #0
 80056d4:	46d9      	mov	r9, fp
 80056d6:	46e2      	mov	sl, ip
 80056d8:	eb19 0309 	adds.w	r3, r9, r9
 80056dc:	eb4a 040a 	adc.w	r4, sl, sl
 80056e0:	4699      	mov	r9, r3
 80056e2:	46a2      	mov	sl, r4
 80056e4:	eb19 090b 	adds.w	r9, r9, fp
 80056e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056ec:	f04f 0100 	mov.w	r1, #0
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80056fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005700:	4689      	mov	r9, r1
 8005702:	4692      	mov	sl, r2
 8005704:	eb1b 0509 	adds.w	r5, fp, r9
 8005708:	eb4c 060a 	adc.w	r6, ip, sl
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	4619      	mov	r1, r3
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	f04f 0400 	mov.w	r4, #0
 800571e:	0094      	lsls	r4, r2, #2
 8005720:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005724:	008b      	lsls	r3, r1, #2
 8005726:	461a      	mov	r2, r3
 8005728:	4623      	mov	r3, r4
 800572a:	4628      	mov	r0, r5
 800572c:	4631      	mov	r1, r6
 800572e:	f7fb faf5 	bl	8000d1c <__aeabi_uldivmod>
 8005732:	4603      	mov	r3, r0
 8005734:	460c      	mov	r4, r1
 8005736:	461a      	mov	r2, r3
 8005738:	4b9a      	ldr	r3, [pc, #616]	; (80059a4 <UART_SetConfig+0x6f4>)
 800573a:	fba3 1302 	umull	r1, r3, r3, r2
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	2164      	movs	r1, #100	; 0x64
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	3332      	adds	r3, #50	; 0x32
 800574c:	4a95      	ldr	r2, [pc, #596]	; (80059a4 <UART_SetConfig+0x6f4>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005758:	4498      	add	r8, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	469b      	mov	fp, r3
 800575e:	f04f 0c00 	mov.w	ip, #0
 8005762:	46d9      	mov	r9, fp
 8005764:	46e2      	mov	sl, ip
 8005766:	eb19 0309 	adds.w	r3, r9, r9
 800576a:	eb4a 040a 	adc.w	r4, sl, sl
 800576e:	4699      	mov	r9, r3
 8005770:	46a2      	mov	sl, r4
 8005772:	eb19 090b 	adds.w	r9, r9, fp
 8005776:	eb4a 0a0c 	adc.w	sl, sl, ip
 800577a:	f04f 0100 	mov.w	r1, #0
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005786:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800578a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800578e:	4689      	mov	r9, r1
 8005790:	4692      	mov	sl, r2
 8005792:	eb1b 0509 	adds.w	r5, fp, r9
 8005796:	eb4c 060a 	adc.w	r6, ip, sl
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4619      	mov	r1, r3
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	f04f 0400 	mov.w	r4, #0
 80057ac:	0094      	lsls	r4, r2, #2
 80057ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057b2:	008b      	lsls	r3, r1, #2
 80057b4:	461a      	mov	r2, r3
 80057b6:	4623      	mov	r3, r4
 80057b8:	4628      	mov	r0, r5
 80057ba:	4631      	mov	r1, r6
 80057bc:	f7fb faae 	bl	8000d1c <__aeabi_uldivmod>
 80057c0:	4603      	mov	r3, r0
 80057c2:	460c      	mov	r4, r1
 80057c4:	461a      	mov	r2, r3
 80057c6:	4b77      	ldr	r3, [pc, #476]	; (80059a4 <UART_SetConfig+0x6f4>)
 80057c8:	fba3 1302 	umull	r1, r3, r3, r2
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	2164      	movs	r1, #100	; 0x64
 80057d0:	fb01 f303 	mul.w	r3, r1, r3
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	3332      	adds	r3, #50	; 0x32
 80057da:	4a72      	ldr	r2, [pc, #456]	; (80059a4 <UART_SetConfig+0x6f4>)
 80057dc:	fba2 2303 	umull	r2, r3, r2, r3
 80057e0:	095b      	lsrs	r3, r3, #5
 80057e2:	f003 020f 	and.w	r2, r3, #15
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4442      	add	r2, r8
 80057ec:	609a      	str	r2, [r3, #8]
 80057ee:	e0d0      	b.n	8005992 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80057f0:	f7fe fdc8 	bl	8004384 <HAL_RCC_GetPCLK1Freq>
 80057f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	469a      	mov	sl, r3
 80057fa:	f04f 0b00 	mov.w	fp, #0
 80057fe:	46d0      	mov	r8, sl
 8005800:	46d9      	mov	r9, fp
 8005802:	eb18 0308 	adds.w	r3, r8, r8
 8005806:	eb49 0409 	adc.w	r4, r9, r9
 800580a:	4698      	mov	r8, r3
 800580c:	46a1      	mov	r9, r4
 800580e:	eb18 080a 	adds.w	r8, r8, sl
 8005812:	eb49 090b 	adc.w	r9, r9, fp
 8005816:	f04f 0100 	mov.w	r1, #0
 800581a:	f04f 0200 	mov.w	r2, #0
 800581e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005822:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005826:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800582a:	4688      	mov	r8, r1
 800582c:	4691      	mov	r9, r2
 800582e:	eb1a 0508 	adds.w	r5, sl, r8
 8005832:	eb4b 0609 	adc.w	r6, fp, r9
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	4619      	mov	r1, r3
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	f04f 0400 	mov.w	r4, #0
 8005848:	0094      	lsls	r4, r2, #2
 800584a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800584e:	008b      	lsls	r3, r1, #2
 8005850:	461a      	mov	r2, r3
 8005852:	4623      	mov	r3, r4
 8005854:	4628      	mov	r0, r5
 8005856:	4631      	mov	r1, r6
 8005858:	f7fb fa60 	bl	8000d1c <__aeabi_uldivmod>
 800585c:	4603      	mov	r3, r0
 800585e:	460c      	mov	r4, r1
 8005860:	461a      	mov	r2, r3
 8005862:	4b50      	ldr	r3, [pc, #320]	; (80059a4 <UART_SetConfig+0x6f4>)
 8005864:	fba3 2302 	umull	r2, r3, r3, r2
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	469b      	mov	fp, r3
 8005872:	f04f 0c00 	mov.w	ip, #0
 8005876:	46d9      	mov	r9, fp
 8005878:	46e2      	mov	sl, ip
 800587a:	eb19 0309 	adds.w	r3, r9, r9
 800587e:	eb4a 040a 	adc.w	r4, sl, sl
 8005882:	4699      	mov	r9, r3
 8005884:	46a2      	mov	sl, r4
 8005886:	eb19 090b 	adds.w	r9, r9, fp
 800588a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800588e:	f04f 0100 	mov.w	r1, #0
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800589a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800589e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058a2:	4689      	mov	r9, r1
 80058a4:	4692      	mov	sl, r2
 80058a6:	eb1b 0509 	adds.w	r5, fp, r9
 80058aa:	eb4c 060a 	adc.w	r6, ip, sl
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	4619      	mov	r1, r3
 80058b4:	f04f 0200 	mov.w	r2, #0
 80058b8:	f04f 0300 	mov.w	r3, #0
 80058bc:	f04f 0400 	mov.w	r4, #0
 80058c0:	0094      	lsls	r4, r2, #2
 80058c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058c6:	008b      	lsls	r3, r1, #2
 80058c8:	461a      	mov	r2, r3
 80058ca:	4623      	mov	r3, r4
 80058cc:	4628      	mov	r0, r5
 80058ce:	4631      	mov	r1, r6
 80058d0:	f7fb fa24 	bl	8000d1c <__aeabi_uldivmod>
 80058d4:	4603      	mov	r3, r0
 80058d6:	460c      	mov	r4, r1
 80058d8:	461a      	mov	r2, r3
 80058da:	4b32      	ldr	r3, [pc, #200]	; (80059a4 <UART_SetConfig+0x6f4>)
 80058dc:	fba3 1302 	umull	r1, r3, r3, r2
 80058e0:	095b      	lsrs	r3, r3, #5
 80058e2:	2164      	movs	r1, #100	; 0x64
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	3332      	adds	r3, #50	; 0x32
 80058ee:	4a2d      	ldr	r2, [pc, #180]	; (80059a4 <UART_SetConfig+0x6f4>)
 80058f0:	fba2 2303 	umull	r2, r3, r2, r3
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058fa:	4498      	add	r8, r3
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	469b      	mov	fp, r3
 8005900:	f04f 0c00 	mov.w	ip, #0
 8005904:	46d9      	mov	r9, fp
 8005906:	46e2      	mov	sl, ip
 8005908:	eb19 0309 	adds.w	r3, r9, r9
 800590c:	eb4a 040a 	adc.w	r4, sl, sl
 8005910:	4699      	mov	r9, r3
 8005912:	46a2      	mov	sl, r4
 8005914:	eb19 090b 	adds.w	r9, r9, fp
 8005918:	eb4a 0a0c 	adc.w	sl, sl, ip
 800591c:	f04f 0100 	mov.w	r1, #0
 8005920:	f04f 0200 	mov.w	r2, #0
 8005924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005928:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800592c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005930:	4689      	mov	r9, r1
 8005932:	4692      	mov	sl, r2
 8005934:	eb1b 0509 	adds.w	r5, fp, r9
 8005938:	eb4c 060a 	adc.w	r6, ip, sl
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	4619      	mov	r1, r3
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	f04f 0400 	mov.w	r4, #0
 800594e:	0094      	lsls	r4, r2, #2
 8005950:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005954:	008b      	lsls	r3, r1, #2
 8005956:	461a      	mov	r2, r3
 8005958:	4623      	mov	r3, r4
 800595a:	4628      	mov	r0, r5
 800595c:	4631      	mov	r1, r6
 800595e:	f7fb f9dd 	bl	8000d1c <__aeabi_uldivmod>
 8005962:	4603      	mov	r3, r0
 8005964:	460c      	mov	r4, r1
 8005966:	461a      	mov	r2, r3
 8005968:	4b0e      	ldr	r3, [pc, #56]	; (80059a4 <UART_SetConfig+0x6f4>)
 800596a:	fba3 1302 	umull	r1, r3, r3, r2
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	2164      	movs	r1, #100	; 0x64
 8005972:	fb01 f303 	mul.w	r3, r1, r3
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	011b      	lsls	r3, r3, #4
 800597a:	3332      	adds	r3, #50	; 0x32
 800597c:	4a09      	ldr	r2, [pc, #36]	; (80059a4 <UART_SetConfig+0x6f4>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	f003 020f 	and.w	r2, r3, #15
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4442      	add	r2, r8
 800598e:	609a      	str	r2, [r3, #8]
}
 8005990:	e7ff      	b.n	8005992 <UART_SetConfig+0x6e2>
 8005992:	bf00      	nop
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599c:	40011000 	.word	0x40011000
 80059a0:	40011400 	.word	0x40011400
 80059a4:	51eb851f 	.word	0x51eb851f

080059a8 <arm_rfft_fast_init_f32>:
 80059a8:	084b      	lsrs	r3, r1, #1
 80059aa:	2b80      	cmp	r3, #128	; 0x80
 80059ac:	b410      	push	{r4}
 80059ae:	8201      	strh	r1, [r0, #16]
 80059b0:	8003      	strh	r3, [r0, #0]
 80059b2:	d047      	beq.n	8005a44 <arm_rfft_fast_init_f32+0x9c>
 80059b4:	d917      	bls.n	80059e6 <arm_rfft_fast_init_f32+0x3e>
 80059b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ba:	d03d      	beq.n	8005a38 <arm_rfft_fast_init_f32+0x90>
 80059bc:	d929      	bls.n	8005a12 <arm_rfft_fast_init_f32+0x6a>
 80059be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c2:	d020      	beq.n	8005a06 <arm_rfft_fast_init_f32+0x5e>
 80059c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059c8:	d113      	bne.n	80059f2 <arm_rfft_fast_init_f32+0x4a>
 80059ca:	4921      	ldr	r1, [pc, #132]	; (8005a50 <arm_rfft_fast_init_f32+0xa8>)
 80059cc:	4a21      	ldr	r2, [pc, #132]	; (8005a54 <arm_rfft_fast_init_f32+0xac>)
 80059ce:	4b22      	ldr	r3, [pc, #136]	; (8005a58 <arm_rfft_fast_init_f32+0xb0>)
 80059d0:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80059d4:	8184      	strh	r4, [r0, #12]
 80059d6:	6081      	str	r1, [r0, #8]
 80059d8:	6042      	str	r2, [r0, #4]
 80059da:	6143      	str	r3, [r0, #20]
 80059dc:	2000      	movs	r0, #0
 80059de:	b240      	sxtb	r0, r0
 80059e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d01c      	beq.n	8005a24 <arm_rfft_fast_init_f32+0x7c>
 80059ea:	2b40      	cmp	r3, #64	; 0x40
 80059ec:	d006      	beq.n	80059fc <arm_rfft_fast_init_f32+0x54>
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d01d      	beq.n	8005a2e <arm_rfft_fast_init_f32+0x86>
 80059f2:	20ff      	movs	r0, #255	; 0xff
 80059f4:	b240      	sxtb	r0, r0
 80059f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	2438      	movs	r4, #56	; 0x38
 80059fe:	4917      	ldr	r1, [pc, #92]	; (8005a5c <arm_rfft_fast_init_f32+0xb4>)
 8005a00:	4a17      	ldr	r2, [pc, #92]	; (8005a60 <arm_rfft_fast_init_f32+0xb8>)
 8005a02:	4b18      	ldr	r3, [pc, #96]	; (8005a64 <arm_rfft_fast_init_f32+0xbc>)
 8005a04:	e7e6      	b.n	80059d4 <arm_rfft_fast_init_f32+0x2c>
 8005a06:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8005a0a:	4917      	ldr	r1, [pc, #92]	; (8005a68 <arm_rfft_fast_init_f32+0xc0>)
 8005a0c:	4a17      	ldr	r2, [pc, #92]	; (8005a6c <arm_rfft_fast_init_f32+0xc4>)
 8005a0e:	4b18      	ldr	r3, [pc, #96]	; (8005a70 <arm_rfft_fast_init_f32+0xc8>)
 8005a10:	e7e0      	b.n	80059d4 <arm_rfft_fast_init_f32+0x2c>
 8005a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a16:	d1ec      	bne.n	80059f2 <arm_rfft_fast_init_f32+0x4a>
 8005a18:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8005a1c:	4915      	ldr	r1, [pc, #84]	; (8005a74 <arm_rfft_fast_init_f32+0xcc>)
 8005a1e:	4a16      	ldr	r2, [pc, #88]	; (8005a78 <arm_rfft_fast_init_f32+0xd0>)
 8005a20:	4b16      	ldr	r3, [pc, #88]	; (8005a7c <arm_rfft_fast_init_f32+0xd4>)
 8005a22:	e7d7      	b.n	80059d4 <arm_rfft_fast_init_f32+0x2c>
 8005a24:	2430      	movs	r4, #48	; 0x30
 8005a26:	4916      	ldr	r1, [pc, #88]	; (8005a80 <arm_rfft_fast_init_f32+0xd8>)
 8005a28:	4a16      	ldr	r2, [pc, #88]	; (8005a84 <arm_rfft_fast_init_f32+0xdc>)
 8005a2a:	4b17      	ldr	r3, [pc, #92]	; (8005a88 <arm_rfft_fast_init_f32+0xe0>)
 8005a2c:	e7d2      	b.n	80059d4 <arm_rfft_fast_init_f32+0x2c>
 8005a2e:	2414      	movs	r4, #20
 8005a30:	4916      	ldr	r1, [pc, #88]	; (8005a8c <arm_rfft_fast_init_f32+0xe4>)
 8005a32:	4a17      	ldr	r2, [pc, #92]	; (8005a90 <arm_rfft_fast_init_f32+0xe8>)
 8005a34:	4b17      	ldr	r3, [pc, #92]	; (8005a94 <arm_rfft_fast_init_f32+0xec>)
 8005a36:	e7cd      	b.n	80059d4 <arm_rfft_fast_init_f32+0x2c>
 8005a38:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8005a3c:	4916      	ldr	r1, [pc, #88]	; (8005a98 <arm_rfft_fast_init_f32+0xf0>)
 8005a3e:	4a17      	ldr	r2, [pc, #92]	; (8005a9c <arm_rfft_fast_init_f32+0xf4>)
 8005a40:	4b17      	ldr	r3, [pc, #92]	; (8005aa0 <arm_rfft_fast_init_f32+0xf8>)
 8005a42:	e7c7      	b.n	80059d4 <arm_rfft_fast_init_f32+0x2c>
 8005a44:	24d0      	movs	r4, #208	; 0xd0
 8005a46:	4917      	ldr	r1, [pc, #92]	; (8005aa4 <arm_rfft_fast_init_f32+0xfc>)
 8005a48:	4a17      	ldr	r2, [pc, #92]	; (8005aa8 <arm_rfft_fast_init_f32+0x100>)
 8005a4a:	4b18      	ldr	r3, [pc, #96]	; (8005aac <arm_rfft_fast_init_f32+0x104>)
 8005a4c:	e7c2      	b.n	80059d4 <arm_rfft_fast_init_f32+0x2c>
 8005a4e:	bf00      	nop
 8005a50:	080174ac 	.word	0x080174ac
 8005a54:	080086a4 	.word	0x080086a4
 8005a58:	0800e814 	.word	0x0800e814
 8005a5c:	0800c7a4 	.word	0x0800c7a4
 8005a60:	0801926c 	.word	0x0801926c
 8005a64:	0801b75c 	.word	0x0801b75c
 8005a68:	08015194 	.word	0x08015194
 8005a6c:	08013094 	.word	0x08013094
 8005a70:	0800c814 	.word	0x0800c814
 8005a74:	0801b3ec 	.word	0x0801b3ec
 8005a78:	08012814 	.word	0x08012814
 8005a7c:	0801946c 	.word	0x0801946c
 8005a80:	0801604c 	.word	0x0801604c
 8005a84:	08015094 	.word	0x08015094
 8005a88:	0800c6a4 	.word	0x0800c6a4
 8005a8c:	08015fa4 	.word	0x08015fa4
 8005a90:	08013014 	.word	0x08013014
 8005a94:	08015fcc 	.word	0x08015fcc
 8005a98:	08019c6c 	.word	0x08019c6c
 8005a9c:	080164ac 	.word	0x080164ac
 8005aa0:	08019fec 	.word	0x08019fec
 8005aa4:	0801b95c 	.word	0x0801b95c
 8005aa8:	080160ac 	.word	0x080160ac
 8005aac:	0801afec 	.word	0x0801afec

08005ab0 <arm_rfft_fast_f32>:
 8005ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab4:	8a06      	ldrh	r6, [r0, #16]
 8005ab6:	0876      	lsrs	r6, r6, #1
 8005ab8:	4607      	mov	r7, r0
 8005aba:	4615      	mov	r5, r2
 8005abc:	8006      	strh	r6, [r0, #0]
 8005abe:	460c      	mov	r4, r1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d15c      	bne.n	8005b7e <arm_rfft_fast_f32+0xce>
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f000 fbe6 	bl	8006298 <arm_cfft_f32>
 8005acc:	edd4 7a00 	vldr	s15, [r4]
 8005ad0:	ed94 7a01 	vldr	s14, [r4, #4]
 8005ad4:	883e      	ldrh	r6, [r7, #0]
 8005ad6:	6978      	ldr	r0, [r7, #20]
 8005ad8:	ee37 7a07 	vadd.f32	s14, s14, s14
 8005adc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005ae0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8005ae4:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005ae8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005aec:	3e01      	subs	r6, #1
 8005aee:	ee26 7aa3 	vmul.f32	s14, s13, s7
 8005af2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005af6:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8005afa:	ed85 7a00 	vstr	s14, [r5]
 8005afe:	edc5 7a01 	vstr	s15, [r5, #4]
 8005b02:	3010      	adds	r0, #16
 8005b04:	f105 0210 	add.w	r2, r5, #16
 8005b08:	3b08      	subs	r3, #8
 8005b0a:	f104 0110 	add.w	r1, r4, #16
 8005b0e:	ed51 4a02 	vldr	s9, [r1, #-8]
 8005b12:	ed93 5a02 	vldr	s10, [r3, #8]
 8005b16:	ed11 7a01 	vldr	s14, [r1, #-4]
 8005b1a:	ed10 6a02 	vldr	s12, [r0, #-8]
 8005b1e:	edd3 5a03 	vldr	s11, [r3, #12]
 8005b22:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005b26:	ee75 7a64 	vsub.f32	s15, s10, s9
 8005b2a:	ee35 4a87 	vadd.f32	s8, s11, s14
 8005b2e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8005b32:	ee77 5a65 	vsub.f32	s11, s14, s11
 8005b36:	ee66 4a27 	vmul.f32	s9, s12, s15
 8005b3a:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8005b3e:	ee34 5a85 	vadd.f32	s10, s9, s10
 8005b42:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005b46:	ee66 6a84 	vmul.f32	s13, s13, s8
 8005b4a:	ee77 7a25 	vadd.f32	s15, s14, s11
 8005b4e:	ee76 6a85 	vadd.f32	s13, s13, s10
 8005b52:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005b56:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005b5a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005b5e:	3e01      	subs	r6, #1
 8005b60:	ed42 6a02 	vstr	s13, [r2, #-8]
 8005b64:	ed42 7a01 	vstr	s15, [r2, #-4]
 8005b68:	f1a3 0308 	sub.w	r3, r3, #8
 8005b6c:	f101 0108 	add.w	r1, r1, #8
 8005b70:	f100 0008 	add.w	r0, r0, #8
 8005b74:	f102 0208 	add.w	r2, r2, #8
 8005b78:	d1c9      	bne.n	8005b0e <arm_rfft_fast_f32+0x5e>
 8005b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b7e:	edd1 7a00 	vldr	s15, [r1]
 8005b82:	edd1 6a01 	vldr	s13, [r1, #4]
 8005b86:	6941      	ldr	r1, [r0, #20]
 8005b88:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005b8c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005b90:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8005b94:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005b98:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005b9c:	3e01      	subs	r6, #1
 8005b9e:	ed82 7a00 	vstr	s14, [r2]
 8005ba2:	edc2 7a01 	vstr	s15, [r2, #4]
 8005ba6:	00f0      	lsls	r0, r6, #3
 8005ba8:	b3ee      	cbz	r6, 8005c26 <arm_rfft_fast_f32+0x176>
 8005baa:	3808      	subs	r0, #8
 8005bac:	f101 0e10 	add.w	lr, r1, #16
 8005bb0:	4420      	add	r0, r4
 8005bb2:	f104 0110 	add.w	r1, r4, #16
 8005bb6:	f102 0c10 	add.w	ip, r2, #16
 8005bba:	ed90 7a02 	vldr	s14, [r0, #8]
 8005bbe:	ed51 6a02 	vldr	s13, [r1, #-8]
 8005bc2:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8005bc6:	ed90 4a03 	vldr	s8, [r0, #12]
 8005bca:	ed11 5a01 	vldr	s10, [r1, #-4]
 8005bce:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8005bd2:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8005bd6:	ee74 4a05 	vadd.f32	s9, s8, s10
 8005bda:	ee26 3a27 	vmul.f32	s6, s12, s15
 8005bde:	ee77 6a26 	vadd.f32	s13, s14, s13
 8005be2:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005be6:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8005bea:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005bee:	ee77 7a05 	vadd.f32	s15, s14, s10
 8005bf2:	ee26 6a24 	vmul.f32	s12, s12, s9
 8005bf6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8005bfa:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005bfe:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8005c02:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8005c06:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005c0a:	3e01      	subs	r6, #1
 8005c0c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8005c10:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8005c14:	f1a0 0008 	sub.w	r0, r0, #8
 8005c18:	f101 0108 	add.w	r1, r1, #8
 8005c1c:	f10e 0e08 	add.w	lr, lr, #8
 8005c20:	f10c 0c08 	add.w	ip, ip, #8
 8005c24:	d1c9      	bne.n	8005bba <arm_rfft_fast_f32+0x10a>
 8005c26:	4638      	mov	r0, r7
 8005c28:	4629      	mov	r1, r5
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c30:	2301      	movs	r3, #1
 8005c32:	f000 bb31 	b.w	8006298 <arm_cfft_f32>
 8005c36:	bf00      	nop

08005c38 <arm_cfft_radix8by2_f32>:
 8005c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3c:	ed2d 8b08 	vpush	{d8-d11}
 8005c40:	f8b0 e000 	ldrh.w	lr, [r0]
 8005c44:	6842      	ldr	r2, [r0, #4]
 8005c46:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8005c4a:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8005c4e:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8005c52:	4607      	mov	r7, r0
 8005c54:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8005c58:	f000 80af 	beq.w	8005dba <arm_cfft_radix8by2_f32+0x182>
 8005c5c:	3310      	adds	r3, #16
 8005c5e:	18ce      	adds	r6, r1, r3
 8005c60:	3210      	adds	r2, #16
 8005c62:	4443      	add	r3, r8
 8005c64:	f101 0510 	add.w	r5, r1, #16
 8005c68:	f108 0410 	add.w	r4, r8, #16
 8005c6c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8005c70:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005c74:	ed53 3a03 	vldr	s7, [r3, #-12]
 8005c78:	ed53 5a02 	vldr	s11, [r3, #-8]
 8005c7c:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005c80:	ed54 6a03 	vldr	s13, [r4, #-12]
 8005c84:	ed14 0a02 	vldr	s0, [r4, #-8]
 8005c88:	ed16 2a04 	vldr	s4, [r6, #-16]
 8005c8c:	ed56 2a03 	vldr	s5, [r6, #-12]
 8005c90:	ed15 6a03 	vldr	s12, [r5, #-12]
 8005c94:	ed15 7a01 	vldr	s14, [r5, #-4]
 8005c98:	ed15 3a04 	vldr	s6, [r5, #-16]
 8005c9c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8005ca0:	ed56 0a02 	vldr	s1, [r6, #-8]
 8005ca4:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005ca8:	ed55 4a02 	vldr	s9, [r5, #-8]
 8005cac:	ee73 ba21 	vadd.f32	s23, s6, s3
 8005cb0:	ee36 ba26 	vadd.f32	s22, s12, s13
 8005cb4:	ee37 aa27 	vadd.f32	s20, s14, s15
 8005cb8:	ee72 9a04 	vadd.f32	s19, s4, s8
 8005cbc:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8005cc0:	ee31 8a05 	vadd.f32	s16, s2, s10
 8005cc4:	ee74 aa80 	vadd.f32	s21, s9, s0
 8005cc8:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8005ccc:	ed45 ba04 	vstr	s23, [r5, #-16]
 8005cd0:	ed05 ba03 	vstr	s22, [r5, #-12]
 8005cd4:	ed45 aa02 	vstr	s21, [r5, #-8]
 8005cd8:	ed05 aa01 	vstr	s20, [r5, #-4]
 8005cdc:	ed06 8a01 	vstr	s16, [r6, #-4]
 8005ce0:	ed46 9a04 	vstr	s19, [r6, #-16]
 8005ce4:	ed06 9a03 	vstr	s18, [r6, #-12]
 8005ce8:	ed46 8a02 	vstr	s17, [r6, #-8]
 8005cec:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005cf0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8005cf4:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005cf8:	ed52 2a04 	vldr	s5, [r2, #-16]
 8005cfc:	ee33 3a61 	vsub.f32	s6, s6, s3
 8005d00:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005d04:	ee26 8a86 	vmul.f32	s16, s13, s12
 8005d08:	ee24 2a06 	vmul.f32	s4, s8, s12
 8005d0c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8005d10:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005d14:	ee23 3a06 	vmul.f32	s6, s6, s12
 8005d18:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8005d1c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8005d20:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8005d24:	ee36 6a04 	vadd.f32	s12, s12, s8
 8005d28:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8005d2c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8005d30:	ee71 2a88 	vadd.f32	s5, s3, s16
 8005d34:	ed44 6a03 	vstr	s13, [r4, #-12]
 8005d38:	ed44 2a04 	vstr	s5, [r4, #-16]
 8005d3c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8005d40:	ed03 6a03 	vstr	s12, [r3, #-12]
 8005d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d48:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8005d4c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005d50:	ed52 5a02 	vldr	s11, [r2, #-8]
 8005d54:	ee35 6a41 	vsub.f32	s12, s10, s2
 8005d58:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8005d5c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8005d60:	ee26 5a87 	vmul.f32	s10, s13, s14
 8005d64:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8005d68:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005d6c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8005d70:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005d74:	ee26 7a07 	vmul.f32	s14, s12, s14
 8005d78:	ee26 6a25 	vmul.f32	s12, s12, s11
 8005d7c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8005d80:	ee74 5a23 	vadd.f32	s11, s8, s7
 8005d84:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005d88:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005d8c:	f1be 0e01 	subs.w	lr, lr, #1
 8005d90:	ed44 5a02 	vstr	s11, [r4, #-8]
 8005d94:	f105 0510 	add.w	r5, r5, #16
 8005d98:	ed44 7a01 	vstr	s15, [r4, #-4]
 8005d9c:	f106 0610 	add.w	r6, r6, #16
 8005da0:	ed03 6a02 	vstr	s12, [r3, #-8]
 8005da4:	ed03 7a01 	vstr	s14, [r3, #-4]
 8005da8:	f102 0210 	add.w	r2, r2, #16
 8005dac:	f104 0410 	add.w	r4, r4, #16
 8005db0:	f103 0310 	add.w	r3, r3, #16
 8005db4:	f47f af5a 	bne.w	8005c6c <arm_cfft_radix8by2_f32+0x34>
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	fa1f f48c 	uxth.w	r4, ip
 8005dbe:	4608      	mov	r0, r1
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	f000 fae2 	bl	800638c <arm_radix8_butterfly_f32>
 8005dc8:	ecbd 8b08 	vpop	{d8-d11}
 8005dcc:	4640      	mov	r0, r8
 8005dce:	4621      	mov	r1, r4
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd8:	f000 bad8 	b.w	800638c <arm_radix8_butterfly_f32>

08005ddc <arm_cfft_radix8by4_f32>:
 8005ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de0:	ed2d 8b0a 	vpush	{d8-d12}
 8005de4:	8802      	ldrh	r2, [r0, #0]
 8005de6:	ed91 6a00 	vldr	s12, [r1]
 8005dea:	b08f      	sub	sp, #60	; 0x3c
 8005dec:	460f      	mov	r7, r1
 8005dee:	0852      	lsrs	r2, r2, #1
 8005df0:	0093      	lsls	r3, r2, #2
 8005df2:	900c      	str	r0, [sp, #48]	; 0x30
 8005df4:	9103      	str	r1, [sp, #12]
 8005df6:	6841      	ldr	r1, [r0, #4]
 8005df8:	ed97 7a01 	vldr	s14, [r7, #4]
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	4418      	add	r0, r3
 8005e00:	4606      	mov	r6, r0
 8005e02:	9009      	str	r0, [sp, #36]	; 0x24
 8005e04:	4418      	add	r0, r3
 8005e06:	edd0 6a00 	vldr	s13, [r0]
 8005e0a:	edd6 3a00 	vldr	s7, [r6]
 8005e0e:	edd6 2a01 	vldr	s5, [r6, #4]
 8005e12:	edd0 7a01 	vldr	s15, [r0, #4]
 8005e16:	900a      	str	r0, [sp, #40]	; 0x28
 8005e18:	ee76 5a26 	vadd.f32	s11, s12, s13
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	4625      	mov	r5, r4
 8005e20:	441c      	add	r4, r3
 8005e22:	ed94 4a00 	vldr	s8, [r4]
 8005e26:	ed94 5a01 	vldr	s10, [r4, #4]
 8005e2a:	9401      	str	r4, [sp, #4]
 8005e2c:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8005e30:	4630      	mov	r0, r6
 8005e32:	ee74 4a24 	vadd.f32	s9, s8, s9
 8005e36:	463e      	mov	r6, r7
 8005e38:	ee14 ea90 	vmov	lr, s9
 8005e3c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8005e40:	f846 eb08 	str.w	lr, [r6], #8
 8005e44:	ee37 6a27 	vadd.f32	s12, s14, s15
 8005e48:	edd0 4a01 	vldr	s9, [r0, #4]
 8005e4c:	9604      	str	r6, [sp, #16]
 8005e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e52:	9e01      	ldr	r6, [sp, #4]
 8005e54:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8005e58:	ed96 2a01 	vldr	s4, [r6, #4]
 8005e5c:	ee36 7a24 	vadd.f32	s14, s12, s9
 8005e60:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8005e64:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8005e68:	ee36 6a62 	vsub.f32	s12, s12, s5
 8005e6c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8005e70:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8005e74:	ee73 3a45 	vsub.f32	s7, s6, s10
 8005e78:	4604      	mov	r4, r0
 8005e7a:	ee36 6a45 	vsub.f32	s12, s12, s10
 8005e7e:	ee75 6a26 	vadd.f32	s13, s10, s13
 8005e82:	46a3      	mov	fp, r4
 8005e84:	ee37 7a02 	vadd.f32	s14, s14, s4
 8005e88:	ee34 5a84 	vadd.f32	s10, s9, s8
 8005e8c:	ee13 8a90 	vmov	r8, s7
 8005e90:	46a4      	mov	ip, r4
 8005e92:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8005e96:	ed87 7a01 	vstr	s14, [r7, #4]
 8005e9a:	f84b 8b08 	str.w	r8, [fp], #8
 8005e9e:	f1ac 0704 	sub.w	r7, ip, #4
 8005ea2:	ed8c 5a01 	vstr	s10, [ip, #4]
 8005ea6:	f101 0c08 	add.w	ip, r1, #8
 8005eaa:	462c      	mov	r4, r5
 8005eac:	f8cd c014 	str.w	ip, [sp, #20]
 8005eb0:	ee15 ca90 	vmov	ip, s11
 8005eb4:	f844 cb08 	str.w	ip, [r4], #8
 8005eb8:	9407      	str	r4, [sp, #28]
 8005eba:	f101 0410 	add.w	r4, r1, #16
 8005ebe:	ed85 6a01 	vstr	s12, [r5, #4]
 8005ec2:	0852      	lsrs	r2, r2, #1
 8005ec4:	9402      	str	r4, [sp, #8]
 8005ec6:	462c      	mov	r4, r5
 8005ec8:	f101 0518 	add.w	r5, r1, #24
 8005ecc:	920b      	str	r2, [sp, #44]	; 0x2c
 8005ece:	46b2      	mov	sl, r6
 8005ed0:	9506      	str	r5, [sp, #24]
 8005ed2:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8005ed6:	3a02      	subs	r2, #2
 8005ed8:	ee16 5a90 	vmov	r5, s13
 8005edc:	46b6      	mov	lr, r6
 8005ede:	4630      	mov	r0, r6
 8005ee0:	0852      	lsrs	r2, r2, #1
 8005ee2:	f84a 5b08 	str.w	r5, [sl], #8
 8005ee6:	f1a0 0604 	sub.w	r6, r0, #4
 8005eea:	edce 7a01 	vstr	s15, [lr, #4]
 8005eee:	9208      	str	r2, [sp, #32]
 8005ef0:	f000 8130 	beq.w	8006154 <arm_cfft_radix8by4_f32+0x378>
 8005ef4:	4691      	mov	r9, r2
 8005ef6:	9a03      	ldr	r2, [sp, #12]
 8005ef8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005efc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005f00:	3b08      	subs	r3, #8
 8005f02:	f102 0510 	add.w	r5, r2, #16
 8005f06:	f101 0c20 	add.w	ip, r1, #32
 8005f0a:	f1a4 020c 	sub.w	r2, r4, #12
 8005f0e:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8005f12:	4433      	add	r3, r6
 8005f14:	3410      	adds	r4, #16
 8005f16:	4650      	mov	r0, sl
 8005f18:	4659      	mov	r1, fp
 8005f1a:	ed55 3a02 	vldr	s7, [r5, #-8]
 8005f1e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8005f22:	ed91 7a00 	vldr	s14, [r1]
 8005f26:	edd0 7a00 	vldr	s15, [r0]
 8005f2a:	ed15 4a01 	vldr	s8, [r5, #-4]
 8005f2e:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005f32:	edd0 6a01 	vldr	s13, [r0, #4]
 8005f36:	ed91 6a01 	vldr	s12, [r1, #4]
 8005f3a:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005f3e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8005f42:	ee78 4a07 	vadd.f32	s9, s16, s14
 8005f46:	ee74 5a65 	vsub.f32	s11, s8, s11
 8005f4a:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8005f4e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8005f52:	ed45 4a02 	vstr	s9, [r5, #-8]
 8005f56:	edd1 4a01 	vldr	s9, [r1, #4]
 8005f5a:	ed90 4a01 	vldr	s8, [r0, #4]
 8005f5e:	ee70 4a24 	vadd.f32	s9, s0, s9
 8005f62:	ee76 aa05 	vadd.f32	s21, s12, s10
 8005f66:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005f6a:	ee35 aac7 	vsub.f32	s20, s11, s14
 8005f6e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8005f72:	edd6 1a00 	vldr	s3, [r6]
 8005f76:	edd7 0a00 	vldr	s1, [r7]
 8005f7a:	ed92 4a02 	vldr	s8, [r2, #8]
 8005f7e:	edd3 3a02 	vldr	s7, [r3, #8]
 8005f82:	ed93 2a01 	vldr	s4, [r3, #4]
 8005f86:	ed16 1a01 	vldr	s2, [r6, #-4]
 8005f8a:	edd2 2a01 	vldr	s5, [r2, #4]
 8005f8e:	ed57 9a01 	vldr	s19, [r7, #-4]
 8005f92:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8005f96:	ee39 3a81 	vadd.f32	s6, s19, s2
 8005f9a:	ee74 8a84 	vadd.f32	s17, s9, s8
 8005f9e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8005fa2:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8005fa6:	ee7a aae6 	vsub.f32	s21, s21, s13
 8005faa:	ee18 aa90 	vmov	sl, s17
 8005fae:	f847 a908 	str.w	sl, [r7], #-8
 8005fb2:	edd2 8a01 	vldr	s17, [r2, #4]
 8005fb6:	ed93 9a01 	vldr	s18, [r3, #4]
 8005fba:	ee73 8a28 	vadd.f32	s17, s6, s17
 8005fbe:	ee3a aa27 	vadd.f32	s20, s20, s15
 8005fc2:	ee78 8a89 	vadd.f32	s17, s17, s18
 8005fc6:	ee74 0a63 	vsub.f32	s1, s8, s7
 8005fca:	edc7 8a01 	vstr	s17, [r7, #4]
 8005fce:	ed18 ba02 	vldr	s22, [r8, #-8]
 8005fd2:	ed58 8a01 	vldr	s17, [r8, #-4]
 8005fd6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8005fda:	ee6a ba28 	vmul.f32	s23, s20, s17
 8005fde:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8005fe2:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8005fe6:	ee30 9a81 	vadd.f32	s18, s1, s2
 8005fea:	ee79 9a82 	vadd.f32	s19, s19, s4
 8005fee:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8005ff2:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005ff6:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005ffa:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8005ffe:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8006002:	ee69 8a28 	vmul.f32	s17, s18, s17
 8006006:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800600a:	ee1c aa10 	vmov	sl, s24
 800600e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8006012:	f841 ab08 	str.w	sl, [r1], #8
 8006016:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800601a:	ee3b bacb 	vsub.f32	s22, s23, s22
 800601e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8006022:	ee33 3a62 	vsub.f32	s6, s6, s5
 8006026:	ed01 aa01 	vstr	s20, [r1, #-4]
 800602a:	edc2 8a01 	vstr	s17, [r2, #4]
 800602e:	ed82 ba02 	vstr	s22, [r2, #8]
 8006032:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8006036:	ee74 3a63 	vsub.f32	s7, s8, s7
 800603a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800603e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8006042:	ee30 0a46 	vsub.f32	s0, s0, s12
 8006046:	ee33 3a42 	vsub.f32	s6, s6, s4
 800604a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800604e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006052:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8006056:	ee63 8a04 	vmul.f32	s17, s6, s8
 800605a:	ee28 aa24 	vmul.f32	s20, s16, s9
 800605e:	ee60 9a04 	vmul.f32	s19, s0, s8
 8006062:	ee28 8a04 	vmul.f32	s16, s16, s8
 8006066:	ee20 0a24 	vmul.f32	s0, s0, s9
 800606a:	ee63 3a84 	vmul.f32	s7, s7, s8
 800606e:	ee39 4a68 	vsub.f32	s8, s18, s17
 8006072:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8006076:	ee14 aa10 	vmov	sl, s8
 800607a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800607e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8006082:	ed44 9a02 	vstr	s19, [r4, #-8]
 8006086:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800608a:	ed04 0a01 	vstr	s0, [r4, #-4]
 800608e:	f846 a908 	str.w	sl, [r6], #-8
 8006092:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006096:	ee35 7a87 	vadd.f32	s14, s11, s14
 800609a:	edc6 3a01 	vstr	s7, [r6, #4]
 800609e:	ee76 6a86 	vadd.f32	s13, s13, s12
 80060a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060a6:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80060aa:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80060ae:	ee67 5a86 	vmul.f32	s11, s15, s12
 80060b2:	ee26 5a87 	vmul.f32	s10, s13, s14
 80060b6:	ee72 2a62 	vsub.f32	s5, s4, s5
 80060ba:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80060be:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80060c2:	ee75 5a25 	vadd.f32	s11, s10, s11
 80060c6:	ee62 0a86 	vmul.f32	s1, s5, s12
 80060ca:	ee66 6a86 	vmul.f32	s13, s13, s12
 80060ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060d2:	ee21 6a06 	vmul.f32	s12, s2, s12
 80060d6:	ee62 2a87 	vmul.f32	s5, s5, s14
 80060da:	ee21 1a07 	vmul.f32	s2, s2, s14
 80060de:	ee15 aa90 	vmov	sl, s11
 80060e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80060e6:	f840 ab08 	str.w	sl, [r0], #8
 80060ea:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80060ee:	ee76 2a22 	vadd.f32	s5, s12, s5
 80060f2:	f1b9 0901 	subs.w	r9, r9, #1
 80060f6:	ed40 7a01 	vstr	s15, [r0, #-4]
 80060fa:	f105 0508 	add.w	r5, r5, #8
 80060fe:	ed83 1a02 	vstr	s2, [r3, #8]
 8006102:	edc3 2a01 	vstr	s5, [r3, #4]
 8006106:	f108 0808 	add.w	r8, r8, #8
 800610a:	f1a2 0208 	sub.w	r2, r2, #8
 800610e:	f10c 0c10 	add.w	ip, ip, #16
 8006112:	f104 0408 	add.w	r4, r4, #8
 8006116:	f10e 0e18 	add.w	lr, lr, #24
 800611a:	f1a3 0308 	sub.w	r3, r3, #8
 800611e:	f47f aefc 	bne.w	8005f1a <arm_cfft_radix8by4_f32+0x13e>
 8006122:	9908      	ldr	r1, [sp, #32]
 8006124:	9802      	ldr	r0, [sp, #8]
 8006126:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800612a:	00cb      	lsls	r3, r1, #3
 800612c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006130:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006134:	9102      	str	r1, [sp, #8]
 8006136:	9904      	ldr	r1, [sp, #16]
 8006138:	4419      	add	r1, r3
 800613a:	9104      	str	r1, [sp, #16]
 800613c:	9905      	ldr	r1, [sp, #20]
 800613e:	4419      	add	r1, r3
 8006140:	9105      	str	r1, [sp, #20]
 8006142:	9907      	ldr	r1, [sp, #28]
 8006144:	449b      	add	fp, r3
 8006146:	4419      	add	r1, r3
 8006148:	449a      	add	sl, r3
 800614a:	9b06      	ldr	r3, [sp, #24]
 800614c:	9107      	str	r1, [sp, #28]
 800614e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006152:	9306      	str	r3, [sp, #24]
 8006154:	9a04      	ldr	r2, [sp, #16]
 8006156:	9807      	ldr	r0, [sp, #28]
 8006158:	edd2 3a00 	vldr	s7, [r2]
 800615c:	ed90 4a00 	vldr	s8, [r0]
 8006160:	eddb 7a00 	vldr	s15, [fp]
 8006164:	ed9a 3a00 	vldr	s6, [sl]
 8006168:	edd2 4a01 	vldr	s9, [r2, #4]
 800616c:	ed90 7a01 	vldr	s14, [r0, #4]
 8006170:	ed9b 2a01 	vldr	s4, [fp, #4]
 8006174:	edda 5a01 	vldr	s11, [sl, #4]
 8006178:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800617c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800617e:	ee73 6a84 	vadd.f32	s13, s7, s8
 8006182:	ee34 6a87 	vadd.f32	s12, s9, s14
 8006186:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800618a:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800618e:	ee33 5a05 	vadd.f32	s10, s6, s10
 8006192:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8006196:	ed82 5a00 	vstr	s10, [r2]
 800619a:	ed9b 5a01 	vldr	s10, [fp, #4]
 800619e:	edda 4a01 	vldr	s9, [sl, #4]
 80061a2:	ee36 5a05 	vadd.f32	s10, s12, s10
 80061a6:	ee72 3a04 	vadd.f32	s7, s4, s8
 80061aa:	ee35 5a24 	vadd.f32	s10, s10, s9
 80061ae:	ee77 4a67 	vsub.f32	s9, s14, s15
 80061b2:	ed82 5a01 	vstr	s10, [r2, #4]
 80061b6:	9a05      	ldr	r2, [sp, #20]
 80061b8:	ee34 5a83 	vadd.f32	s10, s9, s6
 80061bc:	edd2 1a00 	vldr	s3, [r2]
 80061c0:	edd2 2a01 	vldr	s5, [r2, #4]
 80061c4:	9a02      	ldr	r2, [sp, #8]
 80061c6:	ee73 3ae5 	vsub.f32	s7, s7, s11
 80061ca:	ee36 6a42 	vsub.f32	s12, s12, s4
 80061ce:	ee63 4aa1 	vmul.f32	s9, s7, s3
 80061d2:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80061d6:	ee65 2a22 	vmul.f32	s5, s10, s5
 80061da:	ee25 5a21 	vmul.f32	s10, s10, s3
 80061de:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80061e2:	ee35 5a63 	vsub.f32	s10, s10, s7
 80061e6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80061ea:	edcb 2a00 	vstr	s5, [fp]
 80061ee:	ed8b 5a01 	vstr	s10, [fp, #4]
 80061f2:	edd2 3a01 	vldr	s7, [r2, #4]
 80061f6:	ed92 5a00 	vldr	s10, [r2]
 80061fa:	9a06      	ldr	r2, [sp, #24]
 80061fc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8006200:	ee36 6a65 	vsub.f32	s12, s12, s11
 8006204:	ee66 4a85 	vmul.f32	s9, s13, s10
 8006208:	ee26 5a05 	vmul.f32	s10, s12, s10
 800620c:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8006210:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006214:	ee75 6a66 	vsub.f32	s13, s10, s13
 8006218:	ee34 6a86 	vadd.f32	s12, s9, s12
 800621c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006220:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006224:	edc0 6a01 	vstr	s13, [r0, #4]
 8006228:	ed80 6a00 	vstr	s12, [r0]
 800622c:	ed92 6a01 	vldr	s12, [r2, #4]
 8006230:	9803      	ldr	r0, [sp, #12]
 8006232:	ee77 7a43 	vsub.f32	s15, s14, s6
 8006236:	ee75 5a84 	vadd.f32	s11, s11, s8
 800623a:	ed92 7a00 	vldr	s14, [r2]
 800623e:	ee65 6a87 	vmul.f32	s13, s11, s14
 8006242:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006246:	ee65 5a86 	vmul.f32	s11, s11, s12
 800624a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800624e:	ee77 5a65 	vsub.f32	s11, s14, s11
 8006252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006256:	edca 5a01 	vstr	s11, [sl, #4]
 800625a:	edca 7a00 	vstr	s15, [sl]
 800625e:	6872      	ldr	r2, [r6, #4]
 8006260:	4621      	mov	r1, r4
 8006262:	2304      	movs	r3, #4
 8006264:	f000 f892 	bl	800638c <arm_radix8_butterfly_f32>
 8006268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800626a:	6872      	ldr	r2, [r6, #4]
 800626c:	4621      	mov	r1, r4
 800626e:	2304      	movs	r3, #4
 8006270:	f000 f88c 	bl	800638c <arm_radix8_butterfly_f32>
 8006274:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006276:	6872      	ldr	r2, [r6, #4]
 8006278:	4621      	mov	r1, r4
 800627a:	2304      	movs	r3, #4
 800627c:	f000 f886 	bl	800638c <arm_radix8_butterfly_f32>
 8006280:	9801      	ldr	r0, [sp, #4]
 8006282:	6872      	ldr	r2, [r6, #4]
 8006284:	4621      	mov	r1, r4
 8006286:	2304      	movs	r3, #4
 8006288:	b00f      	add	sp, #60	; 0x3c
 800628a:	ecbd 8b0a 	vpop	{d8-d12}
 800628e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006292:	f000 b87b 	b.w	800638c <arm_radix8_butterfly_f32>
 8006296:	bf00      	nop

08006298 <arm_cfft_f32>:
 8006298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800629c:	2a01      	cmp	r2, #1
 800629e:	4606      	mov	r6, r0
 80062a0:	4617      	mov	r7, r2
 80062a2:	460c      	mov	r4, r1
 80062a4:	4698      	mov	r8, r3
 80062a6:	8805      	ldrh	r5, [r0, #0]
 80062a8:	d054      	beq.n	8006354 <arm_cfft_f32+0xbc>
 80062aa:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80062ae:	d04c      	beq.n	800634a <arm_cfft_f32+0xb2>
 80062b0:	d916      	bls.n	80062e0 <arm_cfft_f32+0x48>
 80062b2:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80062b6:	d01a      	beq.n	80062ee <arm_cfft_f32+0x56>
 80062b8:	d95c      	bls.n	8006374 <arm_cfft_f32+0xdc>
 80062ba:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80062be:	d044      	beq.n	800634a <arm_cfft_f32+0xb2>
 80062c0:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80062c4:	d105      	bne.n	80062d2 <arm_cfft_f32+0x3a>
 80062c6:	4620      	mov	r0, r4
 80062c8:	4629      	mov	r1, r5
 80062ca:	6872      	ldr	r2, [r6, #4]
 80062cc:	2301      	movs	r3, #1
 80062ce:	f000 f85d 	bl	800638c <arm_radix8_butterfly_f32>
 80062d2:	f1b8 0f00 	cmp.w	r8, #0
 80062d6:	d111      	bne.n	80062fc <arm_cfft_f32+0x64>
 80062d8:	2f01      	cmp	r7, #1
 80062da:	d016      	beq.n	800630a <arm_cfft_f32+0x72>
 80062dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e0:	2d20      	cmp	r5, #32
 80062e2:	d032      	beq.n	800634a <arm_cfft_f32+0xb2>
 80062e4:	d94a      	bls.n	800637c <arm_cfft_f32+0xe4>
 80062e6:	2d40      	cmp	r5, #64	; 0x40
 80062e8:	d0ed      	beq.n	80062c6 <arm_cfft_f32+0x2e>
 80062ea:	2d80      	cmp	r5, #128	; 0x80
 80062ec:	d1f1      	bne.n	80062d2 <arm_cfft_f32+0x3a>
 80062ee:	4630      	mov	r0, r6
 80062f0:	4621      	mov	r1, r4
 80062f2:	f7ff fca1 	bl	8005c38 <arm_cfft_radix8by2_f32>
 80062f6:	f1b8 0f00 	cmp.w	r8, #0
 80062fa:	d0ed      	beq.n	80062d8 <arm_cfft_f32+0x40>
 80062fc:	4620      	mov	r0, r4
 80062fe:	89b1      	ldrh	r1, [r6, #12]
 8006300:	68b2      	ldr	r2, [r6, #8]
 8006302:	f7f9 ff65 	bl	80001d0 <arm_bitreversal_32>
 8006306:	2f01      	cmp	r7, #1
 8006308:	d1e8      	bne.n	80062dc <arm_cfft_f32+0x44>
 800630a:	ee07 5a90 	vmov	s15, r5
 800630e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006312:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006316:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800631a:	2d00      	cmp	r5, #0
 800631c:	d0de      	beq.n	80062dc <arm_cfft_f32+0x44>
 800631e:	f104 0108 	add.w	r1, r4, #8
 8006322:	2300      	movs	r3, #0
 8006324:	3301      	adds	r3, #1
 8006326:	429d      	cmp	r5, r3
 8006328:	f101 0108 	add.w	r1, r1, #8
 800632c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006330:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006334:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006338:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800633c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006340:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006344:	d1ee      	bne.n	8006324 <arm_cfft_f32+0x8c>
 8006346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800634a:	4630      	mov	r0, r6
 800634c:	4621      	mov	r1, r4
 800634e:	f7ff fd45 	bl	8005ddc <arm_cfft_radix8by4_f32>
 8006352:	e7be      	b.n	80062d2 <arm_cfft_f32+0x3a>
 8006354:	b1ad      	cbz	r5, 8006382 <arm_cfft_f32+0xea>
 8006356:	f101 030c 	add.w	r3, r1, #12
 800635a:	2200      	movs	r2, #0
 800635c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006360:	3201      	adds	r2, #1
 8006362:	eef1 7a67 	vneg.f32	s15, s15
 8006366:	4295      	cmp	r5, r2
 8006368:	ed43 7a02 	vstr	s15, [r3, #-8]
 800636c:	f103 0308 	add.w	r3, r3, #8
 8006370:	d1f4      	bne.n	800635c <arm_cfft_f32+0xc4>
 8006372:	e79a      	b.n	80062aa <arm_cfft_f32+0x12>
 8006374:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006378:	d0a5      	beq.n	80062c6 <arm_cfft_f32+0x2e>
 800637a:	e7aa      	b.n	80062d2 <arm_cfft_f32+0x3a>
 800637c:	2d10      	cmp	r5, #16
 800637e:	d0b6      	beq.n	80062ee <arm_cfft_f32+0x56>
 8006380:	e7a7      	b.n	80062d2 <arm_cfft_f32+0x3a>
 8006382:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006386:	d894      	bhi.n	80062b2 <arm_cfft_f32+0x1a>
 8006388:	e7aa      	b.n	80062e0 <arm_cfft_f32+0x48>
 800638a:	bf00      	nop

0800638c <arm_radix8_butterfly_f32>:
 800638c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006390:	ed2d 8b10 	vpush	{d8-d15}
 8006394:	b09d      	sub	sp, #116	; 0x74
 8006396:	461c      	mov	r4, r3
 8006398:	ed9f bac8 	vldr	s22, [pc, #800]	; 80066bc <arm_radix8_butterfly_f32+0x330>
 800639c:	921a      	str	r2, [sp, #104]	; 0x68
 800639e:	1d03      	adds	r3, r0, #4
 80063a0:	4682      	mov	sl, r0
 80063a2:	4689      	mov	r9, r1
 80063a4:	468b      	mov	fp, r1
 80063a6:	931b      	str	r3, [sp, #108]	; 0x6c
 80063a8:	9400      	str	r4, [sp, #0]
 80063aa:	469e      	mov	lr, r3
 80063ac:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80063b0:	005a      	lsls	r2, r3, #1
 80063b2:	18d6      	adds	r6, r2, r3
 80063b4:	18f5      	adds	r5, r6, r3
 80063b6:	9203      	str	r2, [sp, #12]
 80063b8:	195a      	adds	r2, r3, r5
 80063ba:	18d0      	adds	r0, r2, r3
 80063bc:	00df      	lsls	r7, r3, #3
 80063be:	1819      	adds	r1, r3, r0
 80063c0:	463c      	mov	r4, r7
 80063c2:	9701      	str	r7, [sp, #4]
 80063c4:	4457      	add	r7, sl
 80063c6:	930c      	str	r3, [sp, #48]	; 0x30
 80063c8:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 80063cc:	011b      	lsls	r3, r3, #4
 80063ce:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 80063d2:	eb07 0c04 	add.w	ip, r7, r4
 80063d6:	9c00      	ldr	r4, [sp, #0]
 80063d8:	9302      	str	r3, [sp, #8]
 80063da:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 80063de:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 80063e2:	3204      	adds	r2, #4
 80063e4:	3104      	adds	r1, #4
 80063e6:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 80063ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063ee:	f04f 0800 	mov.w	r8, #0
 80063f2:	eddc 7a00 	vldr	s15, [ip]
 80063f6:	edd7 6a00 	vldr	s13, [r7]
 80063fa:	edd6 3a00 	vldr	s7, [r6]
 80063fe:	ed5e aa01 	vldr	s21, [lr, #-4]
 8006402:	edd5 4a00 	vldr	s9, [r5]
 8006406:	ed90 2a00 	vldr	s4, [r0]
 800640a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800640e:	ed51 0a01 	vldr	s1, [r1, #-4]
 8006412:	ee77 8a82 	vadd.f32	s17, s15, s4
 8006416:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800641a:	ee76 1a87 	vadd.f32	s3, s13, s14
 800641e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8006422:	ee31 6a84 	vadd.f32	s12, s3, s8
 8006426:	ee33 5a28 	vadd.f32	s10, s6, s17
 800642a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800642e:	ee75 6a06 	vadd.f32	s13, s10, s12
 8006432:	ee35 5a46 	vsub.f32	s10, s10, s12
 8006436:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800643a:	ed85 5a00 	vstr	s10, [r5]
 800643e:	ed96 1a01 	vldr	s2, [r6, #4]
 8006442:	edd7 5a01 	vldr	s11, [r7, #4]
 8006446:	ed92 aa00 	vldr	s20, [r2]
 800644a:	ed91 6a00 	vldr	s12, [r1]
 800644e:	ed9e 9a00 	vldr	s18, [lr]
 8006452:	ed95 5a01 	vldr	s10, [r5, #4]
 8006456:	eddc 6a01 	vldr	s13, [ip, #4]
 800645a:	edd0 9a01 	vldr	s19, [r0, #4]
 800645e:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8006462:	ee71 2a46 	vsub.f32	s5, s2, s12
 8006466:	ee75 3aca 	vsub.f32	s7, s11, s20
 800646a:	ee37 0a60 	vsub.f32	s0, s14, s1
 800646e:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8006472:	ee37 7a20 	vadd.f32	s14, s14, s1
 8006476:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800647a:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800647e:	ee79 3a05 	vadd.f32	s7, s18, s10
 8006482:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8006486:	ee39 5a45 	vsub.f32	s10, s18, s10
 800648a:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800648e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8006492:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8006496:	ee31 6a06 	vadd.f32	s12, s2, s12
 800649a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800649e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80064a2:	ee62 2a8b 	vmul.f32	s5, s5, s22
 80064a6:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80064aa:	ee33 3a68 	vsub.f32	s6, s6, s17
 80064ae:	ee36 0a88 	vadd.f32	s0, s13, s16
 80064b2:	ee75 8a86 	vadd.f32	s17, s11, s12
 80064b6:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80064ba:	ee71 1ac4 	vsub.f32	s3, s3, s8
 80064be:	ee75 6a62 	vsub.f32	s13, s10, s5
 80064c2:	ee33 4ac9 	vsub.f32	s8, s7, s18
 80064c6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80064ca:	ee33 1a89 	vadd.f32	s2, s7, s18
 80064ce:	ee74 5ae0 	vsub.f32	s11, s9, s1
 80064d2:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80064d6:	ee75 4a22 	vadd.f32	s9, s10, s5
 80064da:	ee32 5a27 	vadd.f32	s10, s4, s15
 80064de:	ee72 7a67 	vsub.f32	s15, s4, s15
 80064e2:	ee33 8a06 	vadd.f32	s16, s6, s12
 80064e6:	ee75 2a87 	vadd.f32	s5, s11, s14
 80064ea:	ee31 9a28 	vadd.f32	s18, s2, s17
 80064ee:	ee33 6a46 	vsub.f32	s12, s6, s12
 80064f2:	ee74 0a61 	vsub.f32	s1, s8, s3
 80064f6:	ee33 2a80 	vadd.f32	s4, s7, s0
 80064fa:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80064fe:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8006502:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006506:	ee31 1a68 	vsub.f32	s2, s2, s17
 800650a:	ee34 4a21 	vadd.f32	s8, s8, s3
 800650e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8006512:	ee74 4a85 	vadd.f32	s9, s9, s10
 8006516:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800651a:	44d8      	add	r8, fp
 800651c:	45c1      	cmp	r9, r8
 800651e:	ed8e 9a00 	vstr	s18, [lr]
 8006522:	ed85 1a01 	vstr	s2, [r5, #4]
 8006526:	449e      	add	lr, r3
 8006528:	ed8c 8a00 	vstr	s16, [ip]
 800652c:	441d      	add	r5, r3
 800652e:	ed80 6a00 	vstr	s12, [r0]
 8006532:	edcc 0a01 	vstr	s1, [ip, #4]
 8006536:	ed80 4a01 	vstr	s8, [r0, #4]
 800653a:	449c      	add	ip, r3
 800653c:	ed87 2a00 	vstr	s4, [r7]
 8006540:	4418      	add	r0, r3
 8006542:	ed41 3a01 	vstr	s7, [r1, #-4]
 8006546:	ed42 2a01 	vstr	s5, [r2, #-4]
 800654a:	ed86 7a00 	vstr	s14, [r6]
 800654e:	ed87 3a01 	vstr	s6, [r7, #4]
 8006552:	edc1 4a00 	vstr	s9, [r1]
 8006556:	441f      	add	r7, r3
 8006558:	edc2 5a00 	vstr	s11, [r2]
 800655c:	4419      	add	r1, r3
 800655e:	edc6 6a01 	vstr	s13, [r6, #4]
 8006562:	441a      	add	r2, r3
 8006564:	441e      	add	r6, r3
 8006566:	f63f af44 	bhi.w	80063f2 <arm_radix8_butterfly_f32+0x66>
 800656a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800656c:	2907      	cmp	r1, #7
 800656e:	4620      	mov	r0, r4
 8006570:	f240 81e9 	bls.w	8006946 <arm_radix8_butterfly_f32+0x5ba>
 8006574:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8006578:	193e      	adds	r6, r7, r4
 800657a:	1935      	adds	r5, r6, r4
 800657c:	9c03      	ldr	r4, [sp, #12]
 800657e:	9000      	str	r0, [sp, #0]
 8006580:	4622      	mov	r2, r4
 8006582:	3201      	adds	r2, #1
 8006584:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8006588:	9900      	ldr	r1, [sp, #0]
 800658a:	1828      	adds	r0, r5, r0
 800658c:	eb00 0e01 	add.w	lr, r0, r1
 8006590:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006592:	440a      	add	r2, r1
 8006594:	eb04 0c01 	add.w	ip, r4, r1
 8006598:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800659c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 80065a0:	9a00      	ldr	r2, [sp, #0]
 80065a2:	940f      	str	r4, [sp, #60]	; 0x3c
 80065a4:	00ed      	lsls	r5, r5, #3
 80065a6:	9511      	str	r5, [sp, #68]	; 0x44
 80065a8:	00d5      	lsls	r5, r2, #3
 80065aa:	950d      	str	r5, [sp, #52]	; 0x34
 80065ac:	9d01      	ldr	r5, [sp, #4]
 80065ae:	3508      	adds	r5, #8
 80065b0:	9516      	str	r5, [sp, #88]	; 0x58
 80065b2:	9d02      	ldr	r5, [sp, #8]
 80065b4:	3508      	adds	r5, #8
 80065b6:	0114      	lsls	r4, r2, #4
 80065b8:	9517      	str	r5, [sp, #92]	; 0x5c
 80065ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065bc:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80065be:	940e      	str	r4, [sp, #56]	; 0x38
 80065c0:	00c0      	lsls	r0, r0, #3
 80065c2:	9010      	str	r0, [sp, #64]	; 0x40
 80065c4:	18aa      	adds	r2, r5, r2
 80065c6:	9207      	str	r2, [sp, #28]
 80065c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065ca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80065cc:	18aa      	adds	r2, r5, r2
 80065ce:	9208      	str	r2, [sp, #32]
 80065d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80065d2:	18aa      	adds	r2, r5, r2
 80065d4:	9209      	str	r2, [sp, #36]	; 0x24
 80065d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80065da:	f10e 0204 	add.w	r2, lr, #4
 80065de:	920a      	str	r2, [sp, #40]	; 0x28
 80065e0:	00c9      	lsls	r1, r1, #3
 80065e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80065e4:	310c      	adds	r1, #12
 80065e6:	00f6      	lsls	r6, r6, #3
 80065e8:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 80065ec:	9114      	str	r1, [sp, #80]	; 0x50
 80065ee:	18a9      	adds	r1, r5, r2
 80065f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065f2:	9612      	str	r6, [sp, #72]	; 0x48
 80065f4:	00ff      	lsls	r7, r7, #3
 80065f6:	19ae      	adds	r6, r5, r6
 80065f8:	3008      	adds	r0, #8
 80065fa:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80065fe:	9606      	str	r6, [sp, #24]
 8006600:	9019      	str	r0, [sp, #100]	; 0x64
 8006602:	18aa      	adds	r2, r5, r2
 8006604:	0164      	lsls	r4, r4, #5
 8006606:	19ee      	adds	r6, r5, r7
 8006608:	f10c 000c 	add.w	r0, ip, #12
 800660c:	9713      	str	r7, [sp, #76]	; 0x4c
 800660e:	9604      	str	r6, [sp, #16]
 8006610:	9015      	str	r0, [sp, #84]	; 0x54
 8006612:	9103      	str	r1, [sp, #12]
 8006614:	9205      	str	r2, [sp, #20]
 8006616:	f104 0208 	add.w	r2, r4, #8
 800661a:	9218      	str	r2, [sp, #96]	; 0x60
 800661c:	f04f 0801 	mov.w	r8, #1
 8006620:	2200      	movs	r2, #0
 8006622:	f102 0108 	add.w	r1, r2, #8
 8006626:	460f      	mov	r7, r1
 8006628:	910b      	str	r1, [sp, #44]	; 0x2c
 800662a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800662c:	188e      	adds	r6, r1, r2
 800662e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006630:	188d      	adds	r5, r1, r2
 8006632:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006634:	188c      	adds	r4, r1, r2
 8006636:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006638:	1888      	adds	r0, r1, r2
 800663a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800663c:	eb01 0c02 	add.w	ip, r1, r2
 8006640:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006642:	440a      	add	r2, r1
 8006644:	9903      	ldr	r1, [sp, #12]
 8006646:	edd1 fa00 	vldr	s31, [r1]
 800664a:	9905      	ldr	r1, [sp, #20]
 800664c:	ed91 fa00 	vldr	s30, [r1]
 8006650:	9904      	ldr	r1, [sp, #16]
 8006652:	edd1 ea00 	vldr	s29, [r1]
 8006656:	9906      	ldr	r1, [sp, #24]
 8006658:	ed91 ea00 	vldr	s28, [r1]
 800665c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800665e:	edd1 da00 	vldr	s27, [r1]
 8006662:	9908      	ldr	r1, [sp, #32]
 8006664:	ed91 da00 	vldr	s26, [r1]
 8006668:	9907      	ldr	r1, [sp, #28]
 800666a:	edd1 ca00 	vldr	s25, [r1]
 800666e:	9903      	ldr	r1, [sp, #12]
 8006670:	ed91 ca01 	vldr	s24, [r1, #4]
 8006674:	9905      	ldr	r1, [sp, #20]
 8006676:	edd1 ba01 	vldr	s23, [r1, #4]
 800667a:	9904      	ldr	r1, [sp, #16]
 800667c:	edd1 aa01 	vldr	s21, [r1, #4]
 8006680:	9906      	ldr	r1, [sp, #24]
 8006682:	ed91 aa01 	vldr	s20, [r1, #4]
 8006686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006688:	edd1 7a01 	vldr	s15, [r1, #4]
 800668c:	9908      	ldr	r1, [sp, #32]
 800668e:	edcd 7a00 	vstr	s15, [sp]
 8006692:	edd1 7a01 	vldr	s15, [r1, #4]
 8006696:	9907      	ldr	r1, [sp, #28]
 8006698:	edcd 7a01 	vstr	s15, [sp, #4]
 800669c:	edd1 7a01 	vldr	s15, [r1, #4]
 80066a0:	eb0a 0e07 	add.w	lr, sl, r7
 80066a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80066a6:	edcd 7a02 	vstr	s15, [sp, #8]
 80066aa:	eb0c 010a 	add.w	r1, ip, sl
 80066ae:	4456      	add	r6, sl
 80066b0:	4455      	add	r5, sl
 80066b2:	4454      	add	r4, sl
 80066b4:	4450      	add	r0, sl
 80066b6:	4452      	add	r2, sl
 80066b8:	46c4      	mov	ip, r8
 80066ba:	e001      	b.n	80066c0 <arm_radix8_butterfly_f32+0x334>
 80066bc:	3f3504f3 	.word	0x3f3504f3
 80066c0:	ed96 5a00 	vldr	s10, [r6]
 80066c4:	ed52 9a01 	vldr	s19, [r2, #-4]
 80066c8:	ed11 6a01 	vldr	s12, [r1, #-4]
 80066cc:	edd0 7a00 	vldr	s15, [r0]
 80066d0:	ed17 7a01 	vldr	s14, [r7, #-4]
 80066d4:	edde 3a00 	vldr	s7, [lr]
 80066d8:	ed94 3a00 	vldr	s6, [r4]
 80066dc:	ed95 2a00 	vldr	s4, [r5]
 80066e0:	ed9e 0a01 	vldr	s0, [lr, #4]
 80066e4:	ee33 8a85 	vadd.f32	s16, s7, s10
 80066e8:	ee32 1a06 	vadd.f32	s2, s4, s12
 80066ec:	ee33 4a29 	vadd.f32	s8, s6, s19
 80066f0:	ee77 4a87 	vadd.f32	s9, s15, s14
 80066f4:	ee78 1a04 	vadd.f32	s3, s16, s8
 80066f8:	ee71 6a24 	vadd.f32	s13, s2, s9
 80066fc:	ee32 2a46 	vsub.f32	s4, s4, s12
 8006700:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8006704:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006708:	ed8e 6a00 	vstr	s12, [lr]
 800670c:	edd0 8a01 	vldr	s17, [r0, #4]
 8006710:	ed95 9a01 	vldr	s18, [r5, #4]
 8006714:	edd1 2a00 	vldr	s5, [r1]
 8006718:	ed97 7a00 	vldr	s14, [r7]
 800671c:	edd4 0a01 	vldr	s1, [r4, #4]
 8006720:	ed96 6a01 	vldr	s12, [r6, #4]
 8006724:	edd2 5a00 	vldr	s11, [r2]
 8006728:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800672c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006730:	ee39 5a62 	vsub.f32	s10, s18, s5
 8006734:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8006738:	ee38 4a44 	vsub.f32	s8, s16, s8
 800673c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8006740:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8006744:	ee79 2a22 	vadd.f32	s5, s18, s5
 8006748:	ee75 8a69 	vsub.f32	s17, s10, s19
 800674c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8006750:	ee35 5a29 	vadd.f32	s10, s10, s19
 8006754:	ee72 7a67 	vsub.f32	s15, s4, s15
 8006758:	ee30 2a06 	vadd.f32	s4, s0, s12
 800675c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8006760:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8006764:	ee32 9a08 	vadd.f32	s18, s4, s16
 8006768:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800676c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8006770:	ee71 4a64 	vsub.f32	s9, s2, s9
 8006774:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8006778:	ee32 1a87 	vadd.f32	s2, s5, s14
 800677c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8006780:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8006784:	ee30 6a46 	vsub.f32	s12, s0, s12
 8006788:	ee73 0a29 	vadd.f32	s1, s6, s19
 800678c:	ee36 0a28 	vadd.f32	s0, s12, s17
 8006790:	ee33 3a69 	vsub.f32	s6, s6, s19
 8006794:	ee32 7a64 	vsub.f32	s14, s4, s9
 8006798:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800679c:	ee36 6a68 	vsub.f32	s12, s12, s17
 80067a0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80067a4:	ee75 8a85 	vadd.f32	s17, s11, s10
 80067a8:	ee74 3a22 	vadd.f32	s7, s8, s5
 80067ac:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80067b0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80067b4:	ee79 1a41 	vsub.f32	s3, s18, s2
 80067b8:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80067bc:	ee76 5a43 	vsub.f32	s11, s12, s6
 80067c0:	ee74 2a62 	vsub.f32	s5, s8, s5
 80067c4:	ee72 4a24 	vadd.f32	s9, s4, s9
 80067c8:	ee30 4a60 	vsub.f32	s8, s0, s1
 80067cc:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80067d0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80067d4:	ee77 9a85 	vadd.f32	s19, s15, s10
 80067d8:	ee36 6a03 	vadd.f32	s12, s12, s6
 80067dc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80067e0:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80067e4:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80067e8:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80067ec:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80067f0:	ee39 1a01 	vadd.f32	s2, s18, s2
 80067f4:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80067f8:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80067fc:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8006800:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8006804:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8006808:	ee35 3a03 	vadd.f32	s6, s10, s6
 800680c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8006810:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8006814:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8006818:	ed9d 4a02 	vldr	s8, [sp, #8]
 800681c:	ed8e 1a01 	vstr	s2, [lr, #4]
 8006820:	ee77 3a63 	vsub.f32	s7, s14, s7
 8006824:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8006828:	ed9d 7a01 	vldr	s14, [sp, #4]
 800682c:	ed86 3a00 	vstr	s6, [r6]
 8006830:	ee30 9a89 	vadd.f32	s18, s1, s18
 8006834:	ee32 2a05 	vadd.f32	s4, s4, s10
 8006838:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800683c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8006840:	ee67 2a22 	vmul.f32	s5, s14, s5
 8006844:	ee64 1a00 	vmul.f32	s3, s8, s0
 8006848:	ee27 7a24 	vmul.f32	s14, s14, s9
 800684c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8006850:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8006854:	ee64 8a28 	vmul.f32	s17, s8, s17
 8006858:	ed9d 4a00 	vldr	s8, [sp]
 800685c:	edc6 6a01 	vstr	s13, [r6, #4]
 8006860:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8006864:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8006868:	ee64 9a29 	vmul.f32	s19, s8, s19
 800686c:	ee24 4a25 	vmul.f32	s8, s8, s11
 8006870:	ee30 7a87 	vadd.f32	s14, s1, s14
 8006874:	ee74 4a84 	vadd.f32	s9, s9, s8
 8006878:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800687c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8006880:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8006884:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8006888:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800688c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8006890:	ee75 1a21 	vadd.f32	s3, s10, s3
 8006894:	ee30 0a68 	vsub.f32	s0, s0, s17
 8006898:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800689c:	ee70 0a84 	vadd.f32	s1, s1, s8
 80068a0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80068a4:	44dc      	add	ip, fp
 80068a6:	45e1      	cmp	r9, ip
 80068a8:	ed84 9a00 	vstr	s18, [r4]
 80068ac:	edc4 3a01 	vstr	s7, [r4, #4]
 80068b0:	449e      	add	lr, r3
 80068b2:	ed02 7a01 	vstr	s14, [r2, #-4]
 80068b6:	edc2 2a00 	vstr	s5, [r2]
 80068ba:	441e      	add	r6, r3
 80068bc:	ed85 2a00 	vstr	s4, [r5]
 80068c0:	ed85 8a01 	vstr	s16, [r5, #4]
 80068c4:	441c      	add	r4, r3
 80068c6:	ed47 1a01 	vstr	s3, [r7, #-4]
 80068ca:	ed87 0a00 	vstr	s0, [r7]
 80068ce:	441a      	add	r2, r3
 80068d0:	ed41 4a01 	vstr	s9, [r1, #-4]
 80068d4:	edc1 9a00 	vstr	s19, [r1]
 80068d8:	441d      	add	r5, r3
 80068da:	edc0 0a00 	vstr	s1, [r0]
 80068de:	441f      	add	r7, r3
 80068e0:	ed80 6a01 	vstr	s12, [r0, #4]
 80068e4:	4419      	add	r1, r3
 80068e6:	4418      	add	r0, r3
 80068e8:	f63f aeea 	bhi.w	80066c0 <arm_radix8_butterfly_f32+0x334>
 80068ec:	9a03      	ldr	r2, [sp, #12]
 80068ee:	990d      	ldr	r1, [sp, #52]	; 0x34
 80068f0:	440a      	add	r2, r1
 80068f2:	9203      	str	r2, [sp, #12]
 80068f4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80068f6:	9a05      	ldr	r2, [sp, #20]
 80068f8:	440a      	add	r2, r1
 80068fa:	9205      	str	r2, [sp, #20]
 80068fc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80068fe:	9a04      	ldr	r2, [sp, #16]
 8006900:	440a      	add	r2, r1
 8006902:	9204      	str	r2, [sp, #16]
 8006904:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006906:	9a06      	ldr	r2, [sp, #24]
 8006908:	440a      	add	r2, r1
 800690a:	9206      	str	r2, [sp, #24]
 800690c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800690e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006910:	440a      	add	r2, r1
 8006912:	9209      	str	r2, [sp, #36]	; 0x24
 8006914:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006916:	9a08      	ldr	r2, [sp, #32]
 8006918:	440a      	add	r2, r1
 800691a:	9208      	str	r2, [sp, #32]
 800691c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800691e:	9a07      	ldr	r2, [sp, #28]
 8006920:	440a      	add	r2, r1
 8006922:	9207      	str	r2, [sp, #28]
 8006924:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006928:	f108 0801 	add.w	r8, r8, #1
 800692c:	3208      	adds	r2, #8
 800692e:	4588      	cmp	r8, r1
 8006930:	920a      	str	r2, [sp, #40]	; 0x28
 8006932:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006934:	f47f ae75 	bne.w	8006622 <arm_radix8_butterfly_f32+0x296>
 8006938:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800693c:	9300      	str	r3, [sp, #0]
 800693e:	46c3      	mov	fp, r8
 8006940:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 8006944:	e532      	b.n	80063ac <arm_radix8_butterfly_f32+0x20>
 8006946:	b01d      	add	sp, #116	; 0x74
 8006948:	ecbd 8b10 	vpop	{d8-d15}
 800694c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006950 <__errno>:
 8006950:	4b01      	ldr	r3, [pc, #4]	; (8006958 <__errno+0x8>)
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	20000010 	.word	0x20000010

0800695c <__libc_init_array>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	4e0d      	ldr	r6, [pc, #52]	; (8006994 <__libc_init_array+0x38>)
 8006960:	4c0d      	ldr	r4, [pc, #52]	; (8006998 <__libc_init_array+0x3c>)
 8006962:	1ba4      	subs	r4, r4, r6
 8006964:	10a4      	asrs	r4, r4, #2
 8006966:	2500      	movs	r5, #0
 8006968:	42a5      	cmp	r5, r4
 800696a:	d109      	bne.n	8006980 <__libc_init_array+0x24>
 800696c:	4e0b      	ldr	r6, [pc, #44]	; (800699c <__libc_init_array+0x40>)
 800696e:	4c0c      	ldr	r4, [pc, #48]	; (80069a0 <__libc_init_array+0x44>)
 8006970:	f001 fe76 	bl	8008660 <_init>
 8006974:	1ba4      	subs	r4, r4, r6
 8006976:	10a4      	asrs	r4, r4, #2
 8006978:	2500      	movs	r5, #0
 800697a:	42a5      	cmp	r5, r4
 800697c:	d105      	bne.n	800698a <__libc_init_array+0x2e>
 800697e:	bd70      	pop	{r4, r5, r6, pc}
 8006980:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006984:	4798      	blx	r3
 8006986:	3501      	adds	r5, #1
 8006988:	e7ee      	b.n	8006968 <__libc_init_array+0xc>
 800698a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800698e:	4798      	blx	r3
 8006990:	3501      	adds	r5, #1
 8006992:	e7f2      	b.n	800697a <__libc_init_array+0x1e>
 8006994:	0801bd20 	.word	0x0801bd20
 8006998:	0801bd20 	.word	0x0801bd20
 800699c:	0801bd20 	.word	0x0801bd20
 80069a0:	0801bd24 	.word	0x0801bd24

080069a4 <memset>:
 80069a4:	4402      	add	r2, r0
 80069a6:	4603      	mov	r3, r0
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d100      	bne.n	80069ae <memset+0xa>
 80069ac:	4770      	bx	lr
 80069ae:	f803 1b01 	strb.w	r1, [r3], #1
 80069b2:	e7f9      	b.n	80069a8 <memset+0x4>

080069b4 <sniprintf>:
 80069b4:	b40c      	push	{r2, r3}
 80069b6:	b530      	push	{r4, r5, lr}
 80069b8:	4b17      	ldr	r3, [pc, #92]	; (8006a18 <sniprintf+0x64>)
 80069ba:	1e0c      	subs	r4, r1, #0
 80069bc:	b09d      	sub	sp, #116	; 0x74
 80069be:	681d      	ldr	r5, [r3, #0]
 80069c0:	da08      	bge.n	80069d4 <sniprintf+0x20>
 80069c2:	238b      	movs	r3, #139	; 0x8b
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069ca:	b01d      	add	sp, #116	; 0x74
 80069cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069d0:	b002      	add	sp, #8
 80069d2:	4770      	bx	lr
 80069d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80069d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80069dc:	bf14      	ite	ne
 80069de:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80069e2:	4623      	moveq	r3, r4
 80069e4:	9304      	str	r3, [sp, #16]
 80069e6:	9307      	str	r3, [sp, #28]
 80069e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069ec:	9002      	str	r0, [sp, #8]
 80069ee:	9006      	str	r0, [sp, #24]
 80069f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80069f6:	ab21      	add	r3, sp, #132	; 0x84
 80069f8:	a902      	add	r1, sp, #8
 80069fa:	4628      	mov	r0, r5
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	f000 f877 	bl	8006af0 <_svfiprintf_r>
 8006a02:	1c43      	adds	r3, r0, #1
 8006a04:	bfbc      	itt	lt
 8006a06:	238b      	movlt	r3, #139	; 0x8b
 8006a08:	602b      	strlt	r3, [r5, #0]
 8006a0a:	2c00      	cmp	r4, #0
 8006a0c:	d0dd      	beq.n	80069ca <sniprintf+0x16>
 8006a0e:	9b02      	ldr	r3, [sp, #8]
 8006a10:	2200      	movs	r2, #0
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	e7d9      	b.n	80069ca <sniprintf+0x16>
 8006a16:	bf00      	nop
 8006a18:	20000010 	.word	0x20000010

08006a1c <strcat>:
 8006a1c:	b510      	push	{r4, lr}
 8006a1e:	4603      	mov	r3, r0
 8006a20:	781a      	ldrb	r2, [r3, #0]
 8006a22:	1c5c      	adds	r4, r3, #1
 8006a24:	b93a      	cbnz	r2, 8006a36 <strcat+0x1a>
 8006a26:	3b01      	subs	r3, #1
 8006a28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	d1f9      	bne.n	8006a28 <strcat+0xc>
 8006a34:	bd10      	pop	{r4, pc}
 8006a36:	4623      	mov	r3, r4
 8006a38:	e7f2      	b.n	8006a20 <strcat+0x4>

08006a3a <__ssputs_r>:
 8006a3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a3e:	688e      	ldr	r6, [r1, #8]
 8006a40:	429e      	cmp	r6, r3
 8006a42:	4682      	mov	sl, r0
 8006a44:	460c      	mov	r4, r1
 8006a46:	4690      	mov	r8, r2
 8006a48:	4699      	mov	r9, r3
 8006a4a:	d837      	bhi.n	8006abc <__ssputs_r+0x82>
 8006a4c:	898a      	ldrh	r2, [r1, #12]
 8006a4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a52:	d031      	beq.n	8006ab8 <__ssputs_r+0x7e>
 8006a54:	6825      	ldr	r5, [r4, #0]
 8006a56:	6909      	ldr	r1, [r1, #16]
 8006a58:	1a6f      	subs	r7, r5, r1
 8006a5a:	6965      	ldr	r5, [r4, #20]
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a62:	fb95 f5f3 	sdiv	r5, r5, r3
 8006a66:	f109 0301 	add.w	r3, r9, #1
 8006a6a:	443b      	add	r3, r7
 8006a6c:	429d      	cmp	r5, r3
 8006a6e:	bf38      	it	cc
 8006a70:	461d      	movcc	r5, r3
 8006a72:	0553      	lsls	r3, r2, #21
 8006a74:	d530      	bpl.n	8006ad8 <__ssputs_r+0x9e>
 8006a76:	4629      	mov	r1, r5
 8006a78:	f000 fb2c 	bl	80070d4 <_malloc_r>
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	b950      	cbnz	r0, 8006a96 <__ssputs_r+0x5c>
 8006a80:	230c      	movs	r3, #12
 8006a82:	f8ca 3000 	str.w	r3, [sl]
 8006a86:	89a3      	ldrh	r3, [r4, #12]
 8006a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a8c:	81a3      	strh	r3, [r4, #12]
 8006a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a96:	463a      	mov	r2, r7
 8006a98:	6921      	ldr	r1, [r4, #16]
 8006a9a:	f000 faa9 	bl	8006ff0 <memcpy>
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa8:	81a3      	strh	r3, [r4, #12]
 8006aaa:	6126      	str	r6, [r4, #16]
 8006aac:	6165      	str	r5, [r4, #20]
 8006aae:	443e      	add	r6, r7
 8006ab0:	1bed      	subs	r5, r5, r7
 8006ab2:	6026      	str	r6, [r4, #0]
 8006ab4:	60a5      	str	r5, [r4, #8]
 8006ab6:	464e      	mov	r6, r9
 8006ab8:	454e      	cmp	r6, r9
 8006aba:	d900      	bls.n	8006abe <__ssputs_r+0x84>
 8006abc:	464e      	mov	r6, r9
 8006abe:	4632      	mov	r2, r6
 8006ac0:	4641      	mov	r1, r8
 8006ac2:	6820      	ldr	r0, [r4, #0]
 8006ac4:	f000 fa9f 	bl	8007006 <memmove>
 8006ac8:	68a3      	ldr	r3, [r4, #8]
 8006aca:	1b9b      	subs	r3, r3, r6
 8006acc:	60a3      	str	r3, [r4, #8]
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	441e      	add	r6, r3
 8006ad2:	6026      	str	r6, [r4, #0]
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	e7dc      	b.n	8006a92 <__ssputs_r+0x58>
 8006ad8:	462a      	mov	r2, r5
 8006ada:	f000 fb55 	bl	8007188 <_realloc_r>
 8006ade:	4606      	mov	r6, r0
 8006ae0:	2800      	cmp	r0, #0
 8006ae2:	d1e2      	bne.n	8006aaa <__ssputs_r+0x70>
 8006ae4:	6921      	ldr	r1, [r4, #16]
 8006ae6:	4650      	mov	r0, sl
 8006ae8:	f000 faa6 	bl	8007038 <_free_r>
 8006aec:	e7c8      	b.n	8006a80 <__ssputs_r+0x46>
	...

08006af0 <_svfiprintf_r>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	461d      	mov	r5, r3
 8006af6:	898b      	ldrh	r3, [r1, #12]
 8006af8:	061f      	lsls	r7, r3, #24
 8006afa:	b09d      	sub	sp, #116	; 0x74
 8006afc:	4680      	mov	r8, r0
 8006afe:	460c      	mov	r4, r1
 8006b00:	4616      	mov	r6, r2
 8006b02:	d50f      	bpl.n	8006b24 <_svfiprintf_r+0x34>
 8006b04:	690b      	ldr	r3, [r1, #16]
 8006b06:	b96b      	cbnz	r3, 8006b24 <_svfiprintf_r+0x34>
 8006b08:	2140      	movs	r1, #64	; 0x40
 8006b0a:	f000 fae3 	bl	80070d4 <_malloc_r>
 8006b0e:	6020      	str	r0, [r4, #0]
 8006b10:	6120      	str	r0, [r4, #16]
 8006b12:	b928      	cbnz	r0, 8006b20 <_svfiprintf_r+0x30>
 8006b14:	230c      	movs	r3, #12
 8006b16:	f8c8 3000 	str.w	r3, [r8]
 8006b1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b1e:	e0c8      	b.n	8006cb2 <_svfiprintf_r+0x1c2>
 8006b20:	2340      	movs	r3, #64	; 0x40
 8006b22:	6163      	str	r3, [r4, #20]
 8006b24:	2300      	movs	r3, #0
 8006b26:	9309      	str	r3, [sp, #36]	; 0x24
 8006b28:	2320      	movs	r3, #32
 8006b2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b2e:	2330      	movs	r3, #48	; 0x30
 8006b30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b34:	9503      	str	r5, [sp, #12]
 8006b36:	f04f 0b01 	mov.w	fp, #1
 8006b3a:	4637      	mov	r7, r6
 8006b3c:	463d      	mov	r5, r7
 8006b3e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b42:	b10b      	cbz	r3, 8006b48 <_svfiprintf_r+0x58>
 8006b44:	2b25      	cmp	r3, #37	; 0x25
 8006b46:	d13e      	bne.n	8006bc6 <_svfiprintf_r+0xd6>
 8006b48:	ebb7 0a06 	subs.w	sl, r7, r6
 8006b4c:	d00b      	beq.n	8006b66 <_svfiprintf_r+0x76>
 8006b4e:	4653      	mov	r3, sl
 8006b50:	4632      	mov	r2, r6
 8006b52:	4621      	mov	r1, r4
 8006b54:	4640      	mov	r0, r8
 8006b56:	f7ff ff70 	bl	8006a3a <__ssputs_r>
 8006b5a:	3001      	adds	r0, #1
 8006b5c:	f000 80a4 	beq.w	8006ca8 <_svfiprintf_r+0x1b8>
 8006b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b62:	4453      	add	r3, sl
 8006b64:	9309      	str	r3, [sp, #36]	; 0x24
 8006b66:	783b      	ldrb	r3, [r7, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 809d 	beq.w	8006ca8 <_svfiprintf_r+0x1b8>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b78:	9304      	str	r3, [sp, #16]
 8006b7a:	9307      	str	r3, [sp, #28]
 8006b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b80:	931a      	str	r3, [sp, #104]	; 0x68
 8006b82:	462f      	mov	r7, r5
 8006b84:	2205      	movs	r2, #5
 8006b86:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006b8a:	4850      	ldr	r0, [pc, #320]	; (8006ccc <_svfiprintf_r+0x1dc>)
 8006b8c:	f7f9 fb88 	bl	80002a0 <memchr>
 8006b90:	9b04      	ldr	r3, [sp, #16]
 8006b92:	b9d0      	cbnz	r0, 8006bca <_svfiprintf_r+0xda>
 8006b94:	06d9      	lsls	r1, r3, #27
 8006b96:	bf44      	itt	mi
 8006b98:	2220      	movmi	r2, #32
 8006b9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006b9e:	071a      	lsls	r2, r3, #28
 8006ba0:	bf44      	itt	mi
 8006ba2:	222b      	movmi	r2, #43	; 0x2b
 8006ba4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ba8:	782a      	ldrb	r2, [r5, #0]
 8006baa:	2a2a      	cmp	r2, #42	; 0x2a
 8006bac:	d015      	beq.n	8006bda <_svfiprintf_r+0xea>
 8006bae:	9a07      	ldr	r2, [sp, #28]
 8006bb0:	462f      	mov	r7, r5
 8006bb2:	2000      	movs	r0, #0
 8006bb4:	250a      	movs	r5, #10
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bbc:	3b30      	subs	r3, #48	; 0x30
 8006bbe:	2b09      	cmp	r3, #9
 8006bc0:	d94d      	bls.n	8006c5e <_svfiprintf_r+0x16e>
 8006bc2:	b1b8      	cbz	r0, 8006bf4 <_svfiprintf_r+0x104>
 8006bc4:	e00f      	b.n	8006be6 <_svfiprintf_r+0xf6>
 8006bc6:	462f      	mov	r7, r5
 8006bc8:	e7b8      	b.n	8006b3c <_svfiprintf_r+0x4c>
 8006bca:	4a40      	ldr	r2, [pc, #256]	; (8006ccc <_svfiprintf_r+0x1dc>)
 8006bcc:	1a80      	subs	r0, r0, r2
 8006bce:	fa0b f000 	lsl.w	r0, fp, r0
 8006bd2:	4318      	orrs	r0, r3
 8006bd4:	9004      	str	r0, [sp, #16]
 8006bd6:	463d      	mov	r5, r7
 8006bd8:	e7d3      	b.n	8006b82 <_svfiprintf_r+0x92>
 8006bda:	9a03      	ldr	r2, [sp, #12]
 8006bdc:	1d11      	adds	r1, r2, #4
 8006bde:	6812      	ldr	r2, [r2, #0]
 8006be0:	9103      	str	r1, [sp, #12]
 8006be2:	2a00      	cmp	r2, #0
 8006be4:	db01      	blt.n	8006bea <_svfiprintf_r+0xfa>
 8006be6:	9207      	str	r2, [sp, #28]
 8006be8:	e004      	b.n	8006bf4 <_svfiprintf_r+0x104>
 8006bea:	4252      	negs	r2, r2
 8006bec:	f043 0302 	orr.w	r3, r3, #2
 8006bf0:	9207      	str	r2, [sp, #28]
 8006bf2:	9304      	str	r3, [sp, #16]
 8006bf4:	783b      	ldrb	r3, [r7, #0]
 8006bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bf8:	d10c      	bne.n	8006c14 <_svfiprintf_r+0x124>
 8006bfa:	787b      	ldrb	r3, [r7, #1]
 8006bfc:	2b2a      	cmp	r3, #42	; 0x2a
 8006bfe:	d133      	bne.n	8006c68 <_svfiprintf_r+0x178>
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	1d1a      	adds	r2, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	9203      	str	r2, [sp, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bfb8      	it	lt
 8006c0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c10:	3702      	adds	r7, #2
 8006c12:	9305      	str	r3, [sp, #20]
 8006c14:	4d2e      	ldr	r5, [pc, #184]	; (8006cd0 <_svfiprintf_r+0x1e0>)
 8006c16:	7839      	ldrb	r1, [r7, #0]
 8006c18:	2203      	movs	r2, #3
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f7f9 fb40 	bl	80002a0 <memchr>
 8006c20:	b138      	cbz	r0, 8006c32 <_svfiprintf_r+0x142>
 8006c22:	2340      	movs	r3, #64	; 0x40
 8006c24:	1b40      	subs	r0, r0, r5
 8006c26:	fa03 f000 	lsl.w	r0, r3, r0
 8006c2a:	9b04      	ldr	r3, [sp, #16]
 8006c2c:	4303      	orrs	r3, r0
 8006c2e:	3701      	adds	r7, #1
 8006c30:	9304      	str	r3, [sp, #16]
 8006c32:	7839      	ldrb	r1, [r7, #0]
 8006c34:	4827      	ldr	r0, [pc, #156]	; (8006cd4 <_svfiprintf_r+0x1e4>)
 8006c36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c3a:	2206      	movs	r2, #6
 8006c3c:	1c7e      	adds	r6, r7, #1
 8006c3e:	f7f9 fb2f 	bl	80002a0 <memchr>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	d038      	beq.n	8006cb8 <_svfiprintf_r+0x1c8>
 8006c46:	4b24      	ldr	r3, [pc, #144]	; (8006cd8 <_svfiprintf_r+0x1e8>)
 8006c48:	bb13      	cbnz	r3, 8006c90 <_svfiprintf_r+0x1a0>
 8006c4a:	9b03      	ldr	r3, [sp, #12]
 8006c4c:	3307      	adds	r3, #7
 8006c4e:	f023 0307 	bic.w	r3, r3, #7
 8006c52:	3308      	adds	r3, #8
 8006c54:	9303      	str	r3, [sp, #12]
 8006c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c58:	444b      	add	r3, r9
 8006c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c5c:	e76d      	b.n	8006b3a <_svfiprintf_r+0x4a>
 8006c5e:	fb05 3202 	mla	r2, r5, r2, r3
 8006c62:	2001      	movs	r0, #1
 8006c64:	460f      	mov	r7, r1
 8006c66:	e7a6      	b.n	8006bb6 <_svfiprintf_r+0xc6>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	3701      	adds	r7, #1
 8006c6c:	9305      	str	r3, [sp, #20]
 8006c6e:	4619      	mov	r1, r3
 8006c70:	250a      	movs	r5, #10
 8006c72:	4638      	mov	r0, r7
 8006c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c78:	3a30      	subs	r2, #48	; 0x30
 8006c7a:	2a09      	cmp	r2, #9
 8006c7c:	d903      	bls.n	8006c86 <_svfiprintf_r+0x196>
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d0c8      	beq.n	8006c14 <_svfiprintf_r+0x124>
 8006c82:	9105      	str	r1, [sp, #20]
 8006c84:	e7c6      	b.n	8006c14 <_svfiprintf_r+0x124>
 8006c86:	fb05 2101 	mla	r1, r5, r1, r2
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	e7f0      	b.n	8006c72 <_svfiprintf_r+0x182>
 8006c90:	ab03      	add	r3, sp, #12
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	4622      	mov	r2, r4
 8006c96:	4b11      	ldr	r3, [pc, #68]	; (8006cdc <_svfiprintf_r+0x1ec>)
 8006c98:	a904      	add	r1, sp, #16
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	f3af 8000 	nop.w
 8006ca0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006ca4:	4681      	mov	r9, r0
 8006ca6:	d1d6      	bne.n	8006c56 <_svfiprintf_r+0x166>
 8006ca8:	89a3      	ldrh	r3, [r4, #12]
 8006caa:	065b      	lsls	r3, r3, #25
 8006cac:	f53f af35 	bmi.w	8006b1a <_svfiprintf_r+0x2a>
 8006cb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cb2:	b01d      	add	sp, #116	; 0x74
 8006cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb8:	ab03      	add	r3, sp, #12
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	4b07      	ldr	r3, [pc, #28]	; (8006cdc <_svfiprintf_r+0x1ec>)
 8006cc0:	a904      	add	r1, sp, #16
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	f000 f882 	bl	8006dcc <_printf_i>
 8006cc8:	e7ea      	b.n	8006ca0 <_svfiprintf_r+0x1b0>
 8006cca:	bf00      	nop
 8006ccc:	0801bafc 	.word	0x0801bafc
 8006cd0:	0801bb02 	.word	0x0801bb02
 8006cd4:	0801bb06 	.word	0x0801bb06
 8006cd8:	00000000 	.word	0x00000000
 8006cdc:	08006a3b 	.word	0x08006a3b

08006ce0 <_printf_common>:
 8006ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce4:	4691      	mov	r9, r2
 8006ce6:	461f      	mov	r7, r3
 8006ce8:	688a      	ldr	r2, [r1, #8]
 8006cea:	690b      	ldr	r3, [r1, #16]
 8006cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	bfb8      	it	lt
 8006cf4:	4613      	movlt	r3, r2
 8006cf6:	f8c9 3000 	str.w	r3, [r9]
 8006cfa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460c      	mov	r4, r1
 8006d02:	b112      	cbz	r2, 8006d0a <_printf_common+0x2a>
 8006d04:	3301      	adds	r3, #1
 8006d06:	f8c9 3000 	str.w	r3, [r9]
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	0699      	lsls	r1, r3, #26
 8006d0e:	bf42      	ittt	mi
 8006d10:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006d14:	3302      	addmi	r3, #2
 8006d16:	f8c9 3000 	strmi.w	r3, [r9]
 8006d1a:	6825      	ldr	r5, [r4, #0]
 8006d1c:	f015 0506 	ands.w	r5, r5, #6
 8006d20:	d107      	bne.n	8006d32 <_printf_common+0x52>
 8006d22:	f104 0a19 	add.w	sl, r4, #25
 8006d26:	68e3      	ldr	r3, [r4, #12]
 8006d28:	f8d9 2000 	ldr.w	r2, [r9]
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	42ab      	cmp	r3, r5
 8006d30:	dc28      	bgt.n	8006d84 <_printf_common+0xa4>
 8006d32:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006d36:	6822      	ldr	r2, [r4, #0]
 8006d38:	3300      	adds	r3, #0
 8006d3a:	bf18      	it	ne
 8006d3c:	2301      	movne	r3, #1
 8006d3e:	0692      	lsls	r2, r2, #26
 8006d40:	d42d      	bmi.n	8006d9e <_printf_common+0xbe>
 8006d42:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d46:	4639      	mov	r1, r7
 8006d48:	4630      	mov	r0, r6
 8006d4a:	47c0      	blx	r8
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d020      	beq.n	8006d92 <_printf_common+0xb2>
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	68e5      	ldr	r5, [r4, #12]
 8006d54:	f8d9 2000 	ldr.w	r2, [r9]
 8006d58:	f003 0306 	and.w	r3, r3, #6
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	bf08      	it	eq
 8006d60:	1aad      	subeq	r5, r5, r2
 8006d62:	68a3      	ldr	r3, [r4, #8]
 8006d64:	6922      	ldr	r2, [r4, #16]
 8006d66:	bf0c      	ite	eq
 8006d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d6c:	2500      	movne	r5, #0
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	bfc4      	itt	gt
 8006d72:	1a9b      	subgt	r3, r3, r2
 8006d74:	18ed      	addgt	r5, r5, r3
 8006d76:	f04f 0900 	mov.w	r9, #0
 8006d7a:	341a      	adds	r4, #26
 8006d7c:	454d      	cmp	r5, r9
 8006d7e:	d11a      	bne.n	8006db6 <_printf_common+0xd6>
 8006d80:	2000      	movs	r0, #0
 8006d82:	e008      	b.n	8006d96 <_printf_common+0xb6>
 8006d84:	2301      	movs	r3, #1
 8006d86:	4652      	mov	r2, sl
 8006d88:	4639      	mov	r1, r7
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	47c0      	blx	r8
 8006d8e:	3001      	adds	r0, #1
 8006d90:	d103      	bne.n	8006d9a <_printf_common+0xba>
 8006d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d9a:	3501      	adds	r5, #1
 8006d9c:	e7c3      	b.n	8006d26 <_printf_common+0x46>
 8006d9e:	18e1      	adds	r1, r4, r3
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	2030      	movs	r0, #48	; 0x30
 8006da4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006da8:	4422      	add	r2, r4
 8006daa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006dae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006db2:	3302      	adds	r3, #2
 8006db4:	e7c5      	b.n	8006d42 <_printf_common+0x62>
 8006db6:	2301      	movs	r3, #1
 8006db8:	4622      	mov	r2, r4
 8006dba:	4639      	mov	r1, r7
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	47c0      	blx	r8
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d0e6      	beq.n	8006d92 <_printf_common+0xb2>
 8006dc4:	f109 0901 	add.w	r9, r9, #1
 8006dc8:	e7d8      	b.n	8006d7c <_printf_common+0x9c>
	...

08006dcc <_printf_i>:
 8006dcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006dd0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006dd4:	460c      	mov	r4, r1
 8006dd6:	7e09      	ldrb	r1, [r1, #24]
 8006dd8:	b085      	sub	sp, #20
 8006dda:	296e      	cmp	r1, #110	; 0x6e
 8006ddc:	4617      	mov	r7, r2
 8006dde:	4606      	mov	r6, r0
 8006de0:	4698      	mov	r8, r3
 8006de2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006de4:	f000 80b3 	beq.w	8006f4e <_printf_i+0x182>
 8006de8:	d822      	bhi.n	8006e30 <_printf_i+0x64>
 8006dea:	2963      	cmp	r1, #99	; 0x63
 8006dec:	d036      	beq.n	8006e5c <_printf_i+0x90>
 8006dee:	d80a      	bhi.n	8006e06 <_printf_i+0x3a>
 8006df0:	2900      	cmp	r1, #0
 8006df2:	f000 80b9 	beq.w	8006f68 <_printf_i+0x19c>
 8006df6:	2958      	cmp	r1, #88	; 0x58
 8006df8:	f000 8083 	beq.w	8006f02 <_printf_i+0x136>
 8006dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e00:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006e04:	e032      	b.n	8006e6c <_printf_i+0xa0>
 8006e06:	2964      	cmp	r1, #100	; 0x64
 8006e08:	d001      	beq.n	8006e0e <_printf_i+0x42>
 8006e0a:	2969      	cmp	r1, #105	; 0x69
 8006e0c:	d1f6      	bne.n	8006dfc <_printf_i+0x30>
 8006e0e:	6820      	ldr	r0, [r4, #0]
 8006e10:	6813      	ldr	r3, [r2, #0]
 8006e12:	0605      	lsls	r5, r0, #24
 8006e14:	f103 0104 	add.w	r1, r3, #4
 8006e18:	d52a      	bpl.n	8006e70 <_printf_i+0xa4>
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6011      	str	r1, [r2, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	da03      	bge.n	8006e2a <_printf_i+0x5e>
 8006e22:	222d      	movs	r2, #45	; 0x2d
 8006e24:	425b      	negs	r3, r3
 8006e26:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006e2a:	486f      	ldr	r0, [pc, #444]	; (8006fe8 <_printf_i+0x21c>)
 8006e2c:	220a      	movs	r2, #10
 8006e2e:	e039      	b.n	8006ea4 <_printf_i+0xd8>
 8006e30:	2973      	cmp	r1, #115	; 0x73
 8006e32:	f000 809d 	beq.w	8006f70 <_printf_i+0x1a4>
 8006e36:	d808      	bhi.n	8006e4a <_printf_i+0x7e>
 8006e38:	296f      	cmp	r1, #111	; 0x6f
 8006e3a:	d020      	beq.n	8006e7e <_printf_i+0xb2>
 8006e3c:	2970      	cmp	r1, #112	; 0x70
 8006e3e:	d1dd      	bne.n	8006dfc <_printf_i+0x30>
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	f043 0320 	orr.w	r3, r3, #32
 8006e46:	6023      	str	r3, [r4, #0]
 8006e48:	e003      	b.n	8006e52 <_printf_i+0x86>
 8006e4a:	2975      	cmp	r1, #117	; 0x75
 8006e4c:	d017      	beq.n	8006e7e <_printf_i+0xb2>
 8006e4e:	2978      	cmp	r1, #120	; 0x78
 8006e50:	d1d4      	bne.n	8006dfc <_printf_i+0x30>
 8006e52:	2378      	movs	r3, #120	; 0x78
 8006e54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e58:	4864      	ldr	r0, [pc, #400]	; (8006fec <_printf_i+0x220>)
 8006e5a:	e055      	b.n	8006f08 <_printf_i+0x13c>
 8006e5c:	6813      	ldr	r3, [r2, #0]
 8006e5e:	1d19      	adds	r1, r3, #4
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	6011      	str	r1, [r2, #0]
 8006e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e08c      	b.n	8006f8a <_printf_i+0x1be>
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6011      	str	r1, [r2, #0]
 8006e74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e78:	bf18      	it	ne
 8006e7a:	b21b      	sxthne	r3, r3
 8006e7c:	e7cf      	b.n	8006e1e <_printf_i+0x52>
 8006e7e:	6813      	ldr	r3, [r2, #0]
 8006e80:	6825      	ldr	r5, [r4, #0]
 8006e82:	1d18      	adds	r0, r3, #4
 8006e84:	6010      	str	r0, [r2, #0]
 8006e86:	0628      	lsls	r0, r5, #24
 8006e88:	d501      	bpl.n	8006e8e <_printf_i+0xc2>
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	e002      	b.n	8006e94 <_printf_i+0xc8>
 8006e8e:	0668      	lsls	r0, r5, #25
 8006e90:	d5fb      	bpl.n	8006e8a <_printf_i+0xbe>
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	4854      	ldr	r0, [pc, #336]	; (8006fe8 <_printf_i+0x21c>)
 8006e96:	296f      	cmp	r1, #111	; 0x6f
 8006e98:	bf14      	ite	ne
 8006e9a:	220a      	movne	r2, #10
 8006e9c:	2208      	moveq	r2, #8
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ea4:	6865      	ldr	r5, [r4, #4]
 8006ea6:	60a5      	str	r5, [r4, #8]
 8006ea8:	2d00      	cmp	r5, #0
 8006eaa:	f2c0 8095 	blt.w	8006fd8 <_printf_i+0x20c>
 8006eae:	6821      	ldr	r1, [r4, #0]
 8006eb0:	f021 0104 	bic.w	r1, r1, #4
 8006eb4:	6021      	str	r1, [r4, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d13d      	bne.n	8006f36 <_printf_i+0x16a>
 8006eba:	2d00      	cmp	r5, #0
 8006ebc:	f040 808e 	bne.w	8006fdc <_printf_i+0x210>
 8006ec0:	4665      	mov	r5, ip
 8006ec2:	2a08      	cmp	r2, #8
 8006ec4:	d10b      	bne.n	8006ede <_printf_i+0x112>
 8006ec6:	6823      	ldr	r3, [r4, #0]
 8006ec8:	07db      	lsls	r3, r3, #31
 8006eca:	d508      	bpl.n	8006ede <_printf_i+0x112>
 8006ecc:	6923      	ldr	r3, [r4, #16]
 8006ece:	6862      	ldr	r2, [r4, #4]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	bfde      	ittt	le
 8006ed4:	2330      	movle	r3, #48	; 0x30
 8006ed6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006eda:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006ede:	ebac 0305 	sub.w	r3, ip, r5
 8006ee2:	6123      	str	r3, [r4, #16]
 8006ee4:	f8cd 8000 	str.w	r8, [sp]
 8006ee8:	463b      	mov	r3, r7
 8006eea:	aa03      	add	r2, sp, #12
 8006eec:	4621      	mov	r1, r4
 8006eee:	4630      	mov	r0, r6
 8006ef0:	f7ff fef6 	bl	8006ce0 <_printf_common>
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d14d      	bne.n	8006f94 <_printf_i+0x1c8>
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006efc:	b005      	add	sp, #20
 8006efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f02:	4839      	ldr	r0, [pc, #228]	; (8006fe8 <_printf_i+0x21c>)
 8006f04:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006f08:	6813      	ldr	r3, [r2, #0]
 8006f0a:	6821      	ldr	r1, [r4, #0]
 8006f0c:	1d1d      	adds	r5, r3, #4
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6015      	str	r5, [r2, #0]
 8006f12:	060a      	lsls	r2, r1, #24
 8006f14:	d50b      	bpl.n	8006f2e <_printf_i+0x162>
 8006f16:	07ca      	lsls	r2, r1, #31
 8006f18:	bf44      	itt	mi
 8006f1a:	f041 0120 	orrmi.w	r1, r1, #32
 8006f1e:	6021      	strmi	r1, [r4, #0]
 8006f20:	b91b      	cbnz	r3, 8006f2a <_printf_i+0x15e>
 8006f22:	6822      	ldr	r2, [r4, #0]
 8006f24:	f022 0220 	bic.w	r2, r2, #32
 8006f28:	6022      	str	r2, [r4, #0]
 8006f2a:	2210      	movs	r2, #16
 8006f2c:	e7b7      	b.n	8006e9e <_printf_i+0xd2>
 8006f2e:	064d      	lsls	r5, r1, #25
 8006f30:	bf48      	it	mi
 8006f32:	b29b      	uxthmi	r3, r3
 8006f34:	e7ef      	b.n	8006f16 <_printf_i+0x14a>
 8006f36:	4665      	mov	r5, ip
 8006f38:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f3c:	fb02 3311 	mls	r3, r2, r1, r3
 8006f40:	5cc3      	ldrb	r3, [r0, r3]
 8006f42:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006f46:	460b      	mov	r3, r1
 8006f48:	2900      	cmp	r1, #0
 8006f4a:	d1f5      	bne.n	8006f38 <_printf_i+0x16c>
 8006f4c:	e7b9      	b.n	8006ec2 <_printf_i+0xf6>
 8006f4e:	6813      	ldr	r3, [r2, #0]
 8006f50:	6825      	ldr	r5, [r4, #0]
 8006f52:	6961      	ldr	r1, [r4, #20]
 8006f54:	1d18      	adds	r0, r3, #4
 8006f56:	6010      	str	r0, [r2, #0]
 8006f58:	0628      	lsls	r0, r5, #24
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	d501      	bpl.n	8006f62 <_printf_i+0x196>
 8006f5e:	6019      	str	r1, [r3, #0]
 8006f60:	e002      	b.n	8006f68 <_printf_i+0x19c>
 8006f62:	066a      	lsls	r2, r5, #25
 8006f64:	d5fb      	bpl.n	8006f5e <_printf_i+0x192>
 8006f66:	8019      	strh	r1, [r3, #0]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	6123      	str	r3, [r4, #16]
 8006f6c:	4665      	mov	r5, ip
 8006f6e:	e7b9      	b.n	8006ee4 <_printf_i+0x118>
 8006f70:	6813      	ldr	r3, [r2, #0]
 8006f72:	1d19      	adds	r1, r3, #4
 8006f74:	6011      	str	r1, [r2, #0]
 8006f76:	681d      	ldr	r5, [r3, #0]
 8006f78:	6862      	ldr	r2, [r4, #4]
 8006f7a:	2100      	movs	r1, #0
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	f7f9 f98f 	bl	80002a0 <memchr>
 8006f82:	b108      	cbz	r0, 8006f88 <_printf_i+0x1bc>
 8006f84:	1b40      	subs	r0, r0, r5
 8006f86:	6060      	str	r0, [r4, #4]
 8006f88:	6863      	ldr	r3, [r4, #4]
 8006f8a:	6123      	str	r3, [r4, #16]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f92:	e7a7      	b.n	8006ee4 <_printf_i+0x118>
 8006f94:	6923      	ldr	r3, [r4, #16]
 8006f96:	462a      	mov	r2, r5
 8006f98:	4639      	mov	r1, r7
 8006f9a:	4630      	mov	r0, r6
 8006f9c:	47c0      	blx	r8
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d0aa      	beq.n	8006ef8 <_printf_i+0x12c>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	079b      	lsls	r3, r3, #30
 8006fa6:	d413      	bmi.n	8006fd0 <_printf_i+0x204>
 8006fa8:	68e0      	ldr	r0, [r4, #12]
 8006faa:	9b03      	ldr	r3, [sp, #12]
 8006fac:	4298      	cmp	r0, r3
 8006fae:	bfb8      	it	lt
 8006fb0:	4618      	movlt	r0, r3
 8006fb2:	e7a3      	b.n	8006efc <_printf_i+0x130>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	464a      	mov	r2, r9
 8006fb8:	4639      	mov	r1, r7
 8006fba:	4630      	mov	r0, r6
 8006fbc:	47c0      	blx	r8
 8006fbe:	3001      	adds	r0, #1
 8006fc0:	d09a      	beq.n	8006ef8 <_printf_i+0x12c>
 8006fc2:	3501      	adds	r5, #1
 8006fc4:	68e3      	ldr	r3, [r4, #12]
 8006fc6:	9a03      	ldr	r2, [sp, #12]
 8006fc8:	1a9b      	subs	r3, r3, r2
 8006fca:	42ab      	cmp	r3, r5
 8006fcc:	dcf2      	bgt.n	8006fb4 <_printf_i+0x1e8>
 8006fce:	e7eb      	b.n	8006fa8 <_printf_i+0x1dc>
 8006fd0:	2500      	movs	r5, #0
 8006fd2:	f104 0919 	add.w	r9, r4, #25
 8006fd6:	e7f5      	b.n	8006fc4 <_printf_i+0x1f8>
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1ac      	bne.n	8006f36 <_printf_i+0x16a>
 8006fdc:	7803      	ldrb	r3, [r0, #0]
 8006fde:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fe2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fe6:	e76c      	b.n	8006ec2 <_printf_i+0xf6>
 8006fe8:	0801bb0d 	.word	0x0801bb0d
 8006fec:	0801bb1e 	.word	0x0801bb1e

08006ff0 <memcpy>:
 8006ff0:	b510      	push	{r4, lr}
 8006ff2:	1e43      	subs	r3, r0, #1
 8006ff4:	440a      	add	r2, r1
 8006ff6:	4291      	cmp	r1, r2
 8006ff8:	d100      	bne.n	8006ffc <memcpy+0xc>
 8006ffa:	bd10      	pop	{r4, pc}
 8006ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007000:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007004:	e7f7      	b.n	8006ff6 <memcpy+0x6>

08007006 <memmove>:
 8007006:	4288      	cmp	r0, r1
 8007008:	b510      	push	{r4, lr}
 800700a:	eb01 0302 	add.w	r3, r1, r2
 800700e:	d807      	bhi.n	8007020 <memmove+0x1a>
 8007010:	1e42      	subs	r2, r0, #1
 8007012:	4299      	cmp	r1, r3
 8007014:	d00a      	beq.n	800702c <memmove+0x26>
 8007016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800701a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800701e:	e7f8      	b.n	8007012 <memmove+0xc>
 8007020:	4283      	cmp	r3, r0
 8007022:	d9f5      	bls.n	8007010 <memmove+0xa>
 8007024:	1881      	adds	r1, r0, r2
 8007026:	1ad2      	subs	r2, r2, r3
 8007028:	42d3      	cmn	r3, r2
 800702a:	d100      	bne.n	800702e <memmove+0x28>
 800702c:	bd10      	pop	{r4, pc}
 800702e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007032:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007036:	e7f7      	b.n	8007028 <memmove+0x22>

08007038 <_free_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4605      	mov	r5, r0
 800703c:	2900      	cmp	r1, #0
 800703e:	d045      	beq.n	80070cc <_free_r+0x94>
 8007040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007044:	1f0c      	subs	r4, r1, #4
 8007046:	2b00      	cmp	r3, #0
 8007048:	bfb8      	it	lt
 800704a:	18e4      	addlt	r4, r4, r3
 800704c:	f000 f8d2 	bl	80071f4 <__malloc_lock>
 8007050:	4a1f      	ldr	r2, [pc, #124]	; (80070d0 <_free_r+0x98>)
 8007052:	6813      	ldr	r3, [r2, #0]
 8007054:	4610      	mov	r0, r2
 8007056:	b933      	cbnz	r3, 8007066 <_free_r+0x2e>
 8007058:	6063      	str	r3, [r4, #4]
 800705a:	6014      	str	r4, [r2, #0]
 800705c:	4628      	mov	r0, r5
 800705e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007062:	f000 b8c8 	b.w	80071f6 <__malloc_unlock>
 8007066:	42a3      	cmp	r3, r4
 8007068:	d90c      	bls.n	8007084 <_free_r+0x4c>
 800706a:	6821      	ldr	r1, [r4, #0]
 800706c:	1862      	adds	r2, r4, r1
 800706e:	4293      	cmp	r3, r2
 8007070:	bf04      	itt	eq
 8007072:	681a      	ldreq	r2, [r3, #0]
 8007074:	685b      	ldreq	r3, [r3, #4]
 8007076:	6063      	str	r3, [r4, #4]
 8007078:	bf04      	itt	eq
 800707a:	1852      	addeq	r2, r2, r1
 800707c:	6022      	streq	r2, [r4, #0]
 800707e:	6004      	str	r4, [r0, #0]
 8007080:	e7ec      	b.n	800705c <_free_r+0x24>
 8007082:	4613      	mov	r3, r2
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	b10a      	cbz	r2, 800708c <_free_r+0x54>
 8007088:	42a2      	cmp	r2, r4
 800708a:	d9fa      	bls.n	8007082 <_free_r+0x4a>
 800708c:	6819      	ldr	r1, [r3, #0]
 800708e:	1858      	adds	r0, r3, r1
 8007090:	42a0      	cmp	r0, r4
 8007092:	d10b      	bne.n	80070ac <_free_r+0x74>
 8007094:	6820      	ldr	r0, [r4, #0]
 8007096:	4401      	add	r1, r0
 8007098:	1858      	adds	r0, r3, r1
 800709a:	4282      	cmp	r2, r0
 800709c:	6019      	str	r1, [r3, #0]
 800709e:	d1dd      	bne.n	800705c <_free_r+0x24>
 80070a0:	6810      	ldr	r0, [r2, #0]
 80070a2:	6852      	ldr	r2, [r2, #4]
 80070a4:	605a      	str	r2, [r3, #4]
 80070a6:	4401      	add	r1, r0
 80070a8:	6019      	str	r1, [r3, #0]
 80070aa:	e7d7      	b.n	800705c <_free_r+0x24>
 80070ac:	d902      	bls.n	80070b4 <_free_r+0x7c>
 80070ae:	230c      	movs	r3, #12
 80070b0:	602b      	str	r3, [r5, #0]
 80070b2:	e7d3      	b.n	800705c <_free_r+0x24>
 80070b4:	6820      	ldr	r0, [r4, #0]
 80070b6:	1821      	adds	r1, r4, r0
 80070b8:	428a      	cmp	r2, r1
 80070ba:	bf04      	itt	eq
 80070bc:	6811      	ldreq	r1, [r2, #0]
 80070be:	6852      	ldreq	r2, [r2, #4]
 80070c0:	6062      	str	r2, [r4, #4]
 80070c2:	bf04      	itt	eq
 80070c4:	1809      	addeq	r1, r1, r0
 80070c6:	6021      	streq	r1, [r4, #0]
 80070c8:	605c      	str	r4, [r3, #4]
 80070ca:	e7c7      	b.n	800705c <_free_r+0x24>
 80070cc:	bd38      	pop	{r3, r4, r5, pc}
 80070ce:	bf00      	nop
 80070d0:	2000009c 	.word	0x2000009c

080070d4 <_malloc_r>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	1ccd      	adds	r5, r1, #3
 80070d8:	f025 0503 	bic.w	r5, r5, #3
 80070dc:	3508      	adds	r5, #8
 80070de:	2d0c      	cmp	r5, #12
 80070e0:	bf38      	it	cc
 80070e2:	250c      	movcc	r5, #12
 80070e4:	2d00      	cmp	r5, #0
 80070e6:	4606      	mov	r6, r0
 80070e8:	db01      	blt.n	80070ee <_malloc_r+0x1a>
 80070ea:	42a9      	cmp	r1, r5
 80070ec:	d903      	bls.n	80070f6 <_malloc_r+0x22>
 80070ee:	230c      	movs	r3, #12
 80070f0:	6033      	str	r3, [r6, #0]
 80070f2:	2000      	movs	r0, #0
 80070f4:	bd70      	pop	{r4, r5, r6, pc}
 80070f6:	f000 f87d 	bl	80071f4 <__malloc_lock>
 80070fa:	4a21      	ldr	r2, [pc, #132]	; (8007180 <_malloc_r+0xac>)
 80070fc:	6814      	ldr	r4, [r2, #0]
 80070fe:	4621      	mov	r1, r4
 8007100:	b991      	cbnz	r1, 8007128 <_malloc_r+0x54>
 8007102:	4c20      	ldr	r4, [pc, #128]	; (8007184 <_malloc_r+0xb0>)
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	b91b      	cbnz	r3, 8007110 <_malloc_r+0x3c>
 8007108:	4630      	mov	r0, r6
 800710a:	f000 f863 	bl	80071d4 <_sbrk_r>
 800710e:	6020      	str	r0, [r4, #0]
 8007110:	4629      	mov	r1, r5
 8007112:	4630      	mov	r0, r6
 8007114:	f000 f85e 	bl	80071d4 <_sbrk_r>
 8007118:	1c43      	adds	r3, r0, #1
 800711a:	d124      	bne.n	8007166 <_malloc_r+0x92>
 800711c:	230c      	movs	r3, #12
 800711e:	6033      	str	r3, [r6, #0]
 8007120:	4630      	mov	r0, r6
 8007122:	f000 f868 	bl	80071f6 <__malloc_unlock>
 8007126:	e7e4      	b.n	80070f2 <_malloc_r+0x1e>
 8007128:	680b      	ldr	r3, [r1, #0]
 800712a:	1b5b      	subs	r3, r3, r5
 800712c:	d418      	bmi.n	8007160 <_malloc_r+0x8c>
 800712e:	2b0b      	cmp	r3, #11
 8007130:	d90f      	bls.n	8007152 <_malloc_r+0x7e>
 8007132:	600b      	str	r3, [r1, #0]
 8007134:	50cd      	str	r5, [r1, r3]
 8007136:	18cc      	adds	r4, r1, r3
 8007138:	4630      	mov	r0, r6
 800713a:	f000 f85c 	bl	80071f6 <__malloc_unlock>
 800713e:	f104 000b 	add.w	r0, r4, #11
 8007142:	1d23      	adds	r3, r4, #4
 8007144:	f020 0007 	bic.w	r0, r0, #7
 8007148:	1ac3      	subs	r3, r0, r3
 800714a:	d0d3      	beq.n	80070f4 <_malloc_r+0x20>
 800714c:	425a      	negs	r2, r3
 800714e:	50e2      	str	r2, [r4, r3]
 8007150:	e7d0      	b.n	80070f4 <_malloc_r+0x20>
 8007152:	428c      	cmp	r4, r1
 8007154:	684b      	ldr	r3, [r1, #4]
 8007156:	bf16      	itet	ne
 8007158:	6063      	strne	r3, [r4, #4]
 800715a:	6013      	streq	r3, [r2, #0]
 800715c:	460c      	movne	r4, r1
 800715e:	e7eb      	b.n	8007138 <_malloc_r+0x64>
 8007160:	460c      	mov	r4, r1
 8007162:	6849      	ldr	r1, [r1, #4]
 8007164:	e7cc      	b.n	8007100 <_malloc_r+0x2c>
 8007166:	1cc4      	adds	r4, r0, #3
 8007168:	f024 0403 	bic.w	r4, r4, #3
 800716c:	42a0      	cmp	r0, r4
 800716e:	d005      	beq.n	800717c <_malloc_r+0xa8>
 8007170:	1a21      	subs	r1, r4, r0
 8007172:	4630      	mov	r0, r6
 8007174:	f000 f82e 	bl	80071d4 <_sbrk_r>
 8007178:	3001      	adds	r0, #1
 800717a:	d0cf      	beq.n	800711c <_malloc_r+0x48>
 800717c:	6025      	str	r5, [r4, #0]
 800717e:	e7db      	b.n	8007138 <_malloc_r+0x64>
 8007180:	2000009c 	.word	0x2000009c
 8007184:	200000a0 	.word	0x200000a0

08007188 <_realloc_r>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	4607      	mov	r7, r0
 800718c:	4614      	mov	r4, r2
 800718e:	460e      	mov	r6, r1
 8007190:	b921      	cbnz	r1, 800719c <_realloc_r+0x14>
 8007192:	4611      	mov	r1, r2
 8007194:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007198:	f7ff bf9c 	b.w	80070d4 <_malloc_r>
 800719c:	b922      	cbnz	r2, 80071a8 <_realloc_r+0x20>
 800719e:	f7ff ff4b 	bl	8007038 <_free_r>
 80071a2:	4625      	mov	r5, r4
 80071a4:	4628      	mov	r0, r5
 80071a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071a8:	f000 f826 	bl	80071f8 <_malloc_usable_size_r>
 80071ac:	42a0      	cmp	r0, r4
 80071ae:	d20f      	bcs.n	80071d0 <_realloc_r+0x48>
 80071b0:	4621      	mov	r1, r4
 80071b2:	4638      	mov	r0, r7
 80071b4:	f7ff ff8e 	bl	80070d4 <_malloc_r>
 80071b8:	4605      	mov	r5, r0
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d0f2      	beq.n	80071a4 <_realloc_r+0x1c>
 80071be:	4631      	mov	r1, r6
 80071c0:	4622      	mov	r2, r4
 80071c2:	f7ff ff15 	bl	8006ff0 <memcpy>
 80071c6:	4631      	mov	r1, r6
 80071c8:	4638      	mov	r0, r7
 80071ca:	f7ff ff35 	bl	8007038 <_free_r>
 80071ce:	e7e9      	b.n	80071a4 <_realloc_r+0x1c>
 80071d0:	4635      	mov	r5, r6
 80071d2:	e7e7      	b.n	80071a4 <_realloc_r+0x1c>

080071d4 <_sbrk_r>:
 80071d4:	b538      	push	{r3, r4, r5, lr}
 80071d6:	4c06      	ldr	r4, [pc, #24]	; (80071f0 <_sbrk_r+0x1c>)
 80071d8:	2300      	movs	r3, #0
 80071da:	4605      	mov	r5, r0
 80071dc:	4608      	mov	r0, r1
 80071de:	6023      	str	r3, [r4, #0]
 80071e0:	f7fa ff66 	bl	80020b0 <_sbrk>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d102      	bne.n	80071ee <_sbrk_r+0x1a>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	b103      	cbz	r3, 80071ee <_sbrk_r+0x1a>
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	2000751c 	.word	0x2000751c

080071f4 <__malloc_lock>:
 80071f4:	4770      	bx	lr

080071f6 <__malloc_unlock>:
 80071f6:	4770      	bx	lr

080071f8 <_malloc_usable_size_r>:
 80071f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071fc:	1f18      	subs	r0, r3, #4
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bfbc      	itt	lt
 8007202:	580b      	ldrlt	r3, [r1, r0]
 8007204:	18c0      	addlt	r0, r0, r3
 8007206:	4770      	bx	lr

08007208 <sin>:
 8007208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800720a:	ec51 0b10 	vmov	r0, r1, d0
 800720e:	4a20      	ldr	r2, [pc, #128]	; (8007290 <sin+0x88>)
 8007210:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007214:	4293      	cmp	r3, r2
 8007216:	dc07      	bgt.n	8007228 <sin+0x20>
 8007218:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8007288 <sin+0x80>
 800721c:	2000      	movs	r0, #0
 800721e:	f000 ff57 	bl	80080d0 <__kernel_sin>
 8007222:	ec51 0b10 	vmov	r0, r1, d0
 8007226:	e007      	b.n	8007238 <sin+0x30>
 8007228:	4a1a      	ldr	r2, [pc, #104]	; (8007294 <sin+0x8c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	dd09      	ble.n	8007242 <sin+0x3a>
 800722e:	ee10 2a10 	vmov	r2, s0
 8007232:	460b      	mov	r3, r1
 8007234:	f7f9 f888 	bl	8000348 <__aeabi_dsub>
 8007238:	ec41 0b10 	vmov	d0, r0, r1
 800723c:	b005      	add	sp, #20
 800723e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007242:	4668      	mov	r0, sp
 8007244:	f000 f8f0 	bl	8007428 <__ieee754_rem_pio2>
 8007248:	f000 0003 	and.w	r0, r0, #3
 800724c:	2801      	cmp	r0, #1
 800724e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007252:	ed9d 0b00 	vldr	d0, [sp]
 8007256:	d004      	beq.n	8007262 <sin+0x5a>
 8007258:	2802      	cmp	r0, #2
 800725a:	d005      	beq.n	8007268 <sin+0x60>
 800725c:	b970      	cbnz	r0, 800727c <sin+0x74>
 800725e:	2001      	movs	r0, #1
 8007260:	e7dd      	b.n	800721e <sin+0x16>
 8007262:	f000 fb2d 	bl	80078c0 <__kernel_cos>
 8007266:	e7dc      	b.n	8007222 <sin+0x1a>
 8007268:	2001      	movs	r0, #1
 800726a:	f000 ff31 	bl	80080d0 <__kernel_sin>
 800726e:	ec53 2b10 	vmov	r2, r3, d0
 8007272:	ee10 0a10 	vmov	r0, s0
 8007276:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800727a:	e7dd      	b.n	8007238 <sin+0x30>
 800727c:	f000 fb20 	bl	80078c0 <__kernel_cos>
 8007280:	e7f5      	b.n	800726e <sin+0x66>
 8007282:	bf00      	nop
 8007284:	f3af 8000 	nop.w
	...
 8007290:	3fe921fb 	.word	0x3fe921fb
 8007294:	7fefffff 	.word	0x7fefffff

08007298 <log10f>:
 8007298:	b510      	push	{r4, lr}
 800729a:	ed2d 8b02 	vpush	{d8}
 800729e:	b08a      	sub	sp, #40	; 0x28
 80072a0:	eeb0 8a40 	vmov.f32	s16, s0
 80072a4:	f000 fab2 	bl	800780c <__ieee754_log10f>
 80072a8:	4b31      	ldr	r3, [pc, #196]	; (8007370 <log10f+0xd8>)
 80072aa:	f993 4000 	ldrsb.w	r4, [r3]
 80072ae:	1c63      	adds	r3, r4, #1
 80072b0:	d059      	beq.n	8007366 <log10f+0xce>
 80072b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80072b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ba:	d654      	bvs.n	8007366 <log10f+0xce>
 80072bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80072c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072c4:	d84f      	bhi.n	8007366 <log10f+0xce>
 80072c6:	4b2b      	ldr	r3, [pc, #172]	; (8007374 <log10f+0xdc>)
 80072c8:	9301      	str	r3, [sp, #4]
 80072ca:	ee18 0a10 	vmov	r0, s16
 80072ce:	2300      	movs	r3, #0
 80072d0:	9308      	str	r3, [sp, #32]
 80072d2:	f7f9 f999 	bl	8000608 <__aeabi_f2d>
 80072d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072de:	b994      	cbnz	r4, 8007306 <log10f+0x6e>
 80072e0:	4b25      	ldr	r3, [pc, #148]	; (8007378 <log10f+0xe0>)
 80072e2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80072e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80072ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072f2:	d025      	beq.n	8007340 <log10f+0xa8>
 80072f4:	2301      	movs	r3, #1
 80072f6:	2c02      	cmp	r4, #2
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	d116      	bne.n	800732a <log10f+0x92>
 80072fc:	f7ff fb28 	bl	8006950 <__errno>
 8007300:	2321      	movs	r3, #33	; 0x21
 8007302:	6003      	str	r3, [r0, #0]
 8007304:	e016      	b.n	8007334 <log10f+0x9c>
 8007306:	4b1d      	ldr	r3, [pc, #116]	; (800737c <log10f+0xe4>)
 8007308:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800730c:	2200      	movs	r2, #0
 800730e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007312:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007316:	d1ed      	bne.n	80072f4 <log10f+0x5c>
 8007318:	2302      	movs	r3, #2
 800731a:	429c      	cmp	r4, r3
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	d111      	bne.n	8007344 <log10f+0xac>
 8007320:	f7ff fb16 	bl	8006950 <__errno>
 8007324:	2322      	movs	r3, #34	; 0x22
 8007326:	6003      	str	r3, [r0, #0]
 8007328:	e011      	b.n	800734e <log10f+0xb6>
 800732a:	4668      	mov	r0, sp
 800732c:	f001 f818 	bl	8008360 <matherr>
 8007330:	2800      	cmp	r0, #0
 8007332:	d0e3      	beq.n	80072fc <log10f+0x64>
 8007334:	4812      	ldr	r0, [pc, #72]	; (8007380 <log10f+0xe8>)
 8007336:	f001 f817 	bl	8008368 <nan>
 800733a:	ed8d 0b06 	vstr	d0, [sp, #24]
 800733e:	e006      	b.n	800734e <log10f+0xb6>
 8007340:	2302      	movs	r3, #2
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	4668      	mov	r0, sp
 8007346:	f001 f80b 	bl	8008360 <matherr>
 800734a:	2800      	cmp	r0, #0
 800734c:	d0e8      	beq.n	8007320 <log10f+0x88>
 800734e:	9b08      	ldr	r3, [sp, #32]
 8007350:	b11b      	cbz	r3, 800735a <log10f+0xc2>
 8007352:	f7ff fafd 	bl	8006950 <__errno>
 8007356:	9b08      	ldr	r3, [sp, #32]
 8007358:	6003      	str	r3, [r0, #0]
 800735a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800735e:	f7f9 fc8d 	bl	8000c7c <__aeabi_d2f>
 8007362:	ee00 0a10 	vmov	s0, r0
 8007366:	b00a      	add	sp, #40	; 0x28
 8007368:	ecbd 8b02 	vpop	{d8}
 800736c:	bd10      	pop	{r4, pc}
 800736e:	bf00      	nop
 8007370:	20000074 	.word	0x20000074
 8007374:	0801bb2f 	.word	0x0801bb2f
 8007378:	c7efffff 	.word	0xc7efffff
 800737c:	fff00000 	.word	0xfff00000
 8007380:	0801bb01 	.word	0x0801bb01

08007384 <sqrtf>:
 8007384:	b510      	push	{r4, lr}
 8007386:	ed2d 8b02 	vpush	{d8}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	eeb0 8a40 	vmov.f32	s16, s0
 8007390:	f000 fa92 	bl	80078b8 <__ieee754_sqrtf>
 8007394:	4b21      	ldr	r3, [pc, #132]	; (800741c <sqrtf+0x98>)
 8007396:	f993 4000 	ldrsb.w	r4, [r3]
 800739a:	1c63      	adds	r3, r4, #1
 800739c:	d02c      	beq.n	80073f8 <sqrtf+0x74>
 800739e:	eeb4 8a48 	vcmp.f32	s16, s16
 80073a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a6:	d627      	bvs.n	80073f8 <sqrtf+0x74>
 80073a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80073ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b0:	d522      	bpl.n	80073f8 <sqrtf+0x74>
 80073b2:	2301      	movs	r3, #1
 80073b4:	9300      	str	r3, [sp, #0]
 80073b6:	4b1a      	ldr	r3, [pc, #104]	; (8007420 <sqrtf+0x9c>)
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	ee18 0a10 	vmov	r0, s16
 80073be:	2300      	movs	r3, #0
 80073c0:	9308      	str	r3, [sp, #32]
 80073c2:	f7f9 f921 	bl	8000608 <__aeabi_f2d>
 80073c6:	2200      	movs	r2, #0
 80073c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d0:	2300      	movs	r3, #0
 80073d2:	b9ac      	cbnz	r4, 8007400 <sqrtf+0x7c>
 80073d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80073d8:	4668      	mov	r0, sp
 80073da:	f000 ffc1 	bl	8008360 <matherr>
 80073de:	b1b8      	cbz	r0, 8007410 <sqrtf+0x8c>
 80073e0:	9b08      	ldr	r3, [sp, #32]
 80073e2:	b11b      	cbz	r3, 80073ec <sqrtf+0x68>
 80073e4:	f7ff fab4 	bl	8006950 <__errno>
 80073e8:	9b08      	ldr	r3, [sp, #32]
 80073ea:	6003      	str	r3, [r0, #0]
 80073ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073f0:	f7f9 fc44 	bl	8000c7c <__aeabi_d2f>
 80073f4:	ee00 0a10 	vmov	s0, r0
 80073f8:	b00a      	add	sp, #40	; 0x28
 80073fa:	ecbd 8b02 	vpop	{d8}
 80073fe:	bd10      	pop	{r4, pc}
 8007400:	4610      	mov	r0, r2
 8007402:	4619      	mov	r1, r3
 8007404:	f7f9 fa82 	bl	800090c <__aeabi_ddiv>
 8007408:	2c02      	cmp	r4, #2
 800740a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800740e:	d1e3      	bne.n	80073d8 <sqrtf+0x54>
 8007410:	f7ff fa9e 	bl	8006950 <__errno>
 8007414:	2321      	movs	r3, #33	; 0x21
 8007416:	6003      	str	r3, [r0, #0]
 8007418:	e7e2      	b.n	80073e0 <sqrtf+0x5c>
 800741a:	bf00      	nop
 800741c:	20000074 	.word	0x20000074
 8007420:	0801bb36 	.word	0x0801bb36
 8007424:	00000000 	.word	0x00000000

08007428 <__ieee754_rem_pio2>:
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	ec57 6b10 	vmov	r6, r7, d0
 8007430:	4bc3      	ldr	r3, [pc, #780]	; (8007740 <__ieee754_rem_pio2+0x318>)
 8007432:	b08d      	sub	sp, #52	; 0x34
 8007434:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007438:	4598      	cmp	r8, r3
 800743a:	4604      	mov	r4, r0
 800743c:	9704      	str	r7, [sp, #16]
 800743e:	dc07      	bgt.n	8007450 <__ieee754_rem_pio2+0x28>
 8007440:	2200      	movs	r2, #0
 8007442:	2300      	movs	r3, #0
 8007444:	ed84 0b00 	vstr	d0, [r4]
 8007448:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800744c:	2500      	movs	r5, #0
 800744e:	e027      	b.n	80074a0 <__ieee754_rem_pio2+0x78>
 8007450:	4bbc      	ldr	r3, [pc, #752]	; (8007744 <__ieee754_rem_pio2+0x31c>)
 8007452:	4598      	cmp	r8, r3
 8007454:	dc75      	bgt.n	8007542 <__ieee754_rem_pio2+0x11a>
 8007456:	9b04      	ldr	r3, [sp, #16]
 8007458:	4dbb      	ldr	r5, [pc, #748]	; (8007748 <__ieee754_rem_pio2+0x320>)
 800745a:	2b00      	cmp	r3, #0
 800745c:	ee10 0a10 	vmov	r0, s0
 8007460:	a3a9      	add	r3, pc, #676	; (adr r3, 8007708 <__ieee754_rem_pio2+0x2e0>)
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	4639      	mov	r1, r7
 8007468:	dd36      	ble.n	80074d8 <__ieee754_rem_pio2+0xb0>
 800746a:	f7f8 ff6d 	bl	8000348 <__aeabi_dsub>
 800746e:	45a8      	cmp	r8, r5
 8007470:	4606      	mov	r6, r0
 8007472:	460f      	mov	r7, r1
 8007474:	d018      	beq.n	80074a8 <__ieee754_rem_pio2+0x80>
 8007476:	a3a6      	add	r3, pc, #664	; (adr r3, 8007710 <__ieee754_rem_pio2+0x2e8>)
 8007478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747c:	f7f8 ff64 	bl	8000348 <__aeabi_dsub>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	e9c4 2300 	strd	r2, r3, [r4]
 8007488:	4630      	mov	r0, r6
 800748a:	4639      	mov	r1, r7
 800748c:	f7f8 ff5c 	bl	8000348 <__aeabi_dsub>
 8007490:	a39f      	add	r3, pc, #636	; (adr r3, 8007710 <__ieee754_rem_pio2+0x2e8>)
 8007492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007496:	f7f8 ff57 	bl	8000348 <__aeabi_dsub>
 800749a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800749e:	2501      	movs	r5, #1
 80074a0:	4628      	mov	r0, r5
 80074a2:	b00d      	add	sp, #52	; 0x34
 80074a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a8:	a39b      	add	r3, pc, #620	; (adr r3, 8007718 <__ieee754_rem_pio2+0x2f0>)
 80074aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ae:	f7f8 ff4b 	bl	8000348 <__aeabi_dsub>
 80074b2:	a39b      	add	r3, pc, #620	; (adr r3, 8007720 <__ieee754_rem_pio2+0x2f8>)
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	4606      	mov	r6, r0
 80074ba:	460f      	mov	r7, r1
 80074bc:	f7f8 ff44 	bl	8000348 <__aeabi_dsub>
 80074c0:	4602      	mov	r2, r0
 80074c2:	460b      	mov	r3, r1
 80074c4:	e9c4 2300 	strd	r2, r3, [r4]
 80074c8:	4630      	mov	r0, r6
 80074ca:	4639      	mov	r1, r7
 80074cc:	f7f8 ff3c 	bl	8000348 <__aeabi_dsub>
 80074d0:	a393      	add	r3, pc, #588	; (adr r3, 8007720 <__ieee754_rem_pio2+0x2f8>)
 80074d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d6:	e7de      	b.n	8007496 <__ieee754_rem_pio2+0x6e>
 80074d8:	f7f8 ff38 	bl	800034c <__adddf3>
 80074dc:	45a8      	cmp	r8, r5
 80074de:	4606      	mov	r6, r0
 80074e0:	460f      	mov	r7, r1
 80074e2:	d016      	beq.n	8007512 <__ieee754_rem_pio2+0xea>
 80074e4:	a38a      	add	r3, pc, #552	; (adr r3, 8007710 <__ieee754_rem_pio2+0x2e8>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f7f8 ff2f 	bl	800034c <__adddf3>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	e9c4 2300 	strd	r2, r3, [r4]
 80074f6:	4630      	mov	r0, r6
 80074f8:	4639      	mov	r1, r7
 80074fa:	f7f8 ff25 	bl	8000348 <__aeabi_dsub>
 80074fe:	a384      	add	r3, pc, #528	; (adr r3, 8007710 <__ieee754_rem_pio2+0x2e8>)
 8007500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007504:	f7f8 ff22 	bl	800034c <__adddf3>
 8007508:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800750c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007510:	e7c6      	b.n	80074a0 <__ieee754_rem_pio2+0x78>
 8007512:	a381      	add	r3, pc, #516	; (adr r3, 8007718 <__ieee754_rem_pio2+0x2f0>)
 8007514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007518:	f7f8 ff18 	bl	800034c <__adddf3>
 800751c:	a380      	add	r3, pc, #512	; (adr r3, 8007720 <__ieee754_rem_pio2+0x2f8>)
 800751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007522:	4606      	mov	r6, r0
 8007524:	460f      	mov	r7, r1
 8007526:	f7f8 ff11 	bl	800034c <__adddf3>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	e9c4 2300 	strd	r2, r3, [r4]
 8007532:	4630      	mov	r0, r6
 8007534:	4639      	mov	r1, r7
 8007536:	f7f8 ff07 	bl	8000348 <__aeabi_dsub>
 800753a:	a379      	add	r3, pc, #484	; (adr r3, 8007720 <__ieee754_rem_pio2+0x2f8>)
 800753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007540:	e7e0      	b.n	8007504 <__ieee754_rem_pio2+0xdc>
 8007542:	4b82      	ldr	r3, [pc, #520]	; (800774c <__ieee754_rem_pio2+0x324>)
 8007544:	4598      	cmp	r8, r3
 8007546:	f300 80d0 	bgt.w	80076ea <__ieee754_rem_pio2+0x2c2>
 800754a:	f000 fe7b 	bl	8008244 <fabs>
 800754e:	ec57 6b10 	vmov	r6, r7, d0
 8007552:	ee10 0a10 	vmov	r0, s0
 8007556:	a374      	add	r3, pc, #464	; (adr r3, 8007728 <__ieee754_rem_pio2+0x300>)
 8007558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755c:	4639      	mov	r1, r7
 800755e:	f7f9 f8ab 	bl	80006b8 <__aeabi_dmul>
 8007562:	2200      	movs	r2, #0
 8007564:	4b7a      	ldr	r3, [pc, #488]	; (8007750 <__ieee754_rem_pio2+0x328>)
 8007566:	f7f8 fef1 	bl	800034c <__adddf3>
 800756a:	f7f9 fb3f 	bl	8000bec <__aeabi_d2iz>
 800756e:	4605      	mov	r5, r0
 8007570:	f7f9 f838 	bl	80005e4 <__aeabi_i2d>
 8007574:	a364      	add	r3, pc, #400	; (adr r3, 8007708 <__ieee754_rem_pio2+0x2e0>)
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800757e:	f7f9 f89b 	bl	80006b8 <__aeabi_dmul>
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	4630      	mov	r0, r6
 8007588:	4639      	mov	r1, r7
 800758a:	f7f8 fedd 	bl	8000348 <__aeabi_dsub>
 800758e:	a360      	add	r3, pc, #384	; (adr r3, 8007710 <__ieee754_rem_pio2+0x2e8>)
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	4682      	mov	sl, r0
 8007596:	468b      	mov	fp, r1
 8007598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800759c:	f7f9 f88c 	bl	80006b8 <__aeabi_dmul>
 80075a0:	2d1f      	cmp	r5, #31
 80075a2:	4606      	mov	r6, r0
 80075a4:	460f      	mov	r7, r1
 80075a6:	dc0c      	bgt.n	80075c2 <__ieee754_rem_pio2+0x19a>
 80075a8:	1e6a      	subs	r2, r5, #1
 80075aa:	4b6a      	ldr	r3, [pc, #424]	; (8007754 <__ieee754_rem_pio2+0x32c>)
 80075ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b0:	4543      	cmp	r3, r8
 80075b2:	d006      	beq.n	80075c2 <__ieee754_rem_pio2+0x19a>
 80075b4:	4632      	mov	r2, r6
 80075b6:	463b      	mov	r3, r7
 80075b8:	4650      	mov	r0, sl
 80075ba:	4659      	mov	r1, fp
 80075bc:	f7f8 fec4 	bl	8000348 <__aeabi_dsub>
 80075c0:	e00e      	b.n	80075e0 <__ieee754_rem_pio2+0x1b8>
 80075c2:	4632      	mov	r2, r6
 80075c4:	463b      	mov	r3, r7
 80075c6:	4650      	mov	r0, sl
 80075c8:	4659      	mov	r1, fp
 80075ca:	f7f8 febd 	bl	8000348 <__aeabi_dsub>
 80075ce:	ea4f 5328 	mov.w	r3, r8, asr #20
 80075d2:	9305      	str	r3, [sp, #20]
 80075d4:	9a05      	ldr	r2, [sp, #20]
 80075d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80075da:	1ad3      	subs	r3, r2, r3
 80075dc:	2b10      	cmp	r3, #16
 80075de:	dc02      	bgt.n	80075e6 <__ieee754_rem_pio2+0x1be>
 80075e0:	e9c4 0100 	strd	r0, r1, [r4]
 80075e4:	e039      	b.n	800765a <__ieee754_rem_pio2+0x232>
 80075e6:	a34c      	add	r3, pc, #304	; (adr r3, 8007718 <__ieee754_rem_pio2+0x2f0>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075f0:	f7f9 f862 	bl	80006b8 <__aeabi_dmul>
 80075f4:	4606      	mov	r6, r0
 80075f6:	460f      	mov	r7, r1
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4650      	mov	r0, sl
 80075fe:	4659      	mov	r1, fp
 8007600:	f7f8 fea2 	bl	8000348 <__aeabi_dsub>
 8007604:	4602      	mov	r2, r0
 8007606:	460b      	mov	r3, r1
 8007608:	4680      	mov	r8, r0
 800760a:	4689      	mov	r9, r1
 800760c:	4650      	mov	r0, sl
 800760e:	4659      	mov	r1, fp
 8007610:	f7f8 fe9a 	bl	8000348 <__aeabi_dsub>
 8007614:	4632      	mov	r2, r6
 8007616:	463b      	mov	r3, r7
 8007618:	f7f8 fe96 	bl	8000348 <__aeabi_dsub>
 800761c:	a340      	add	r3, pc, #256	; (adr r3, 8007720 <__ieee754_rem_pio2+0x2f8>)
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	4606      	mov	r6, r0
 8007624:	460f      	mov	r7, r1
 8007626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800762a:	f7f9 f845 	bl	80006b8 <__aeabi_dmul>
 800762e:	4632      	mov	r2, r6
 8007630:	463b      	mov	r3, r7
 8007632:	f7f8 fe89 	bl	8000348 <__aeabi_dsub>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4606      	mov	r6, r0
 800763c:	460f      	mov	r7, r1
 800763e:	4640      	mov	r0, r8
 8007640:	4649      	mov	r1, r9
 8007642:	f7f8 fe81 	bl	8000348 <__aeabi_dsub>
 8007646:	9a05      	ldr	r2, [sp, #20]
 8007648:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b31      	cmp	r3, #49	; 0x31
 8007650:	dc20      	bgt.n	8007694 <__ieee754_rem_pio2+0x26c>
 8007652:	e9c4 0100 	strd	r0, r1, [r4]
 8007656:	46c2      	mov	sl, r8
 8007658:	46cb      	mov	fp, r9
 800765a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800765e:	4650      	mov	r0, sl
 8007660:	4642      	mov	r2, r8
 8007662:	464b      	mov	r3, r9
 8007664:	4659      	mov	r1, fp
 8007666:	f7f8 fe6f 	bl	8000348 <__aeabi_dsub>
 800766a:	463b      	mov	r3, r7
 800766c:	4632      	mov	r2, r6
 800766e:	f7f8 fe6b 	bl	8000348 <__aeabi_dsub>
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	2b00      	cmp	r3, #0
 8007676:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800767a:	f6bf af11 	bge.w	80074a0 <__ieee754_rem_pio2+0x78>
 800767e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007682:	6063      	str	r3, [r4, #4]
 8007684:	f8c4 8000 	str.w	r8, [r4]
 8007688:	60a0      	str	r0, [r4, #8]
 800768a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800768e:	60e3      	str	r3, [r4, #12]
 8007690:	426d      	negs	r5, r5
 8007692:	e705      	b.n	80074a0 <__ieee754_rem_pio2+0x78>
 8007694:	a326      	add	r3, pc, #152	; (adr r3, 8007730 <__ieee754_rem_pio2+0x308>)
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800769e:	f7f9 f80b 	bl	80006b8 <__aeabi_dmul>
 80076a2:	4606      	mov	r6, r0
 80076a4:	460f      	mov	r7, r1
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4640      	mov	r0, r8
 80076ac:	4649      	mov	r1, r9
 80076ae:	f7f8 fe4b 	bl	8000348 <__aeabi_dsub>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4682      	mov	sl, r0
 80076b8:	468b      	mov	fp, r1
 80076ba:	4640      	mov	r0, r8
 80076bc:	4649      	mov	r1, r9
 80076be:	f7f8 fe43 	bl	8000348 <__aeabi_dsub>
 80076c2:	4632      	mov	r2, r6
 80076c4:	463b      	mov	r3, r7
 80076c6:	f7f8 fe3f 	bl	8000348 <__aeabi_dsub>
 80076ca:	a31b      	add	r3, pc, #108	; (adr r3, 8007738 <__ieee754_rem_pio2+0x310>)
 80076cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d0:	4606      	mov	r6, r0
 80076d2:	460f      	mov	r7, r1
 80076d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076d8:	f7f8 ffee 	bl	80006b8 <__aeabi_dmul>
 80076dc:	4632      	mov	r2, r6
 80076de:	463b      	mov	r3, r7
 80076e0:	f7f8 fe32 	bl	8000348 <__aeabi_dsub>
 80076e4:	4606      	mov	r6, r0
 80076e6:	460f      	mov	r7, r1
 80076e8:	e764      	b.n	80075b4 <__ieee754_rem_pio2+0x18c>
 80076ea:	4b1b      	ldr	r3, [pc, #108]	; (8007758 <__ieee754_rem_pio2+0x330>)
 80076ec:	4598      	cmp	r8, r3
 80076ee:	dd35      	ble.n	800775c <__ieee754_rem_pio2+0x334>
 80076f0:	ee10 2a10 	vmov	r2, s0
 80076f4:	463b      	mov	r3, r7
 80076f6:	4630      	mov	r0, r6
 80076f8:	4639      	mov	r1, r7
 80076fa:	f7f8 fe25 	bl	8000348 <__aeabi_dsub>
 80076fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007702:	e9c4 0100 	strd	r0, r1, [r4]
 8007706:	e6a1      	b.n	800744c <__ieee754_rem_pio2+0x24>
 8007708:	54400000 	.word	0x54400000
 800770c:	3ff921fb 	.word	0x3ff921fb
 8007710:	1a626331 	.word	0x1a626331
 8007714:	3dd0b461 	.word	0x3dd0b461
 8007718:	1a600000 	.word	0x1a600000
 800771c:	3dd0b461 	.word	0x3dd0b461
 8007720:	2e037073 	.word	0x2e037073
 8007724:	3ba3198a 	.word	0x3ba3198a
 8007728:	6dc9c883 	.word	0x6dc9c883
 800772c:	3fe45f30 	.word	0x3fe45f30
 8007730:	2e000000 	.word	0x2e000000
 8007734:	3ba3198a 	.word	0x3ba3198a
 8007738:	252049c1 	.word	0x252049c1
 800773c:	397b839a 	.word	0x397b839a
 8007740:	3fe921fb 	.word	0x3fe921fb
 8007744:	4002d97b 	.word	0x4002d97b
 8007748:	3ff921fb 	.word	0x3ff921fb
 800774c:	413921fb 	.word	0x413921fb
 8007750:	3fe00000 	.word	0x3fe00000
 8007754:	0801bb3c 	.word	0x0801bb3c
 8007758:	7fefffff 	.word	0x7fefffff
 800775c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007760:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8007764:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007768:	4630      	mov	r0, r6
 800776a:	460f      	mov	r7, r1
 800776c:	f7f9 fa3e 	bl	8000bec <__aeabi_d2iz>
 8007770:	f7f8 ff38 	bl	80005e4 <__aeabi_i2d>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4630      	mov	r0, r6
 800777a:	4639      	mov	r1, r7
 800777c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007780:	f7f8 fde2 	bl	8000348 <__aeabi_dsub>
 8007784:	2200      	movs	r2, #0
 8007786:	4b1f      	ldr	r3, [pc, #124]	; (8007804 <__ieee754_rem_pio2+0x3dc>)
 8007788:	f7f8 ff96 	bl	80006b8 <__aeabi_dmul>
 800778c:	460f      	mov	r7, r1
 800778e:	4606      	mov	r6, r0
 8007790:	f7f9 fa2c 	bl	8000bec <__aeabi_d2iz>
 8007794:	f7f8 ff26 	bl	80005e4 <__aeabi_i2d>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4630      	mov	r0, r6
 800779e:	4639      	mov	r1, r7
 80077a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80077a4:	f7f8 fdd0 	bl	8000348 <__aeabi_dsub>
 80077a8:	2200      	movs	r2, #0
 80077aa:	4b16      	ldr	r3, [pc, #88]	; (8007804 <__ieee754_rem_pio2+0x3dc>)
 80077ac:	f7f8 ff84 	bl	80006b8 <__aeabi_dmul>
 80077b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80077b4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80077b8:	f04f 0803 	mov.w	r8, #3
 80077bc:	2600      	movs	r6, #0
 80077be:	2700      	movs	r7, #0
 80077c0:	4632      	mov	r2, r6
 80077c2:	463b      	mov	r3, r7
 80077c4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80077c8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80077cc:	f7f9 f9dc 	bl	8000b88 <__aeabi_dcmpeq>
 80077d0:	b9b0      	cbnz	r0, 8007800 <__ieee754_rem_pio2+0x3d8>
 80077d2:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <__ieee754_rem_pio2+0x3e0>)
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	2302      	movs	r3, #2
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	462a      	mov	r2, r5
 80077dc:	4643      	mov	r3, r8
 80077de:	4621      	mov	r1, r4
 80077e0:	a806      	add	r0, sp, #24
 80077e2:	f000 f935 	bl	8007a50 <__kernel_rem_pio2>
 80077e6:	9b04      	ldr	r3, [sp, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	4605      	mov	r5, r0
 80077ec:	f6bf ae58 	bge.w	80074a0 <__ieee754_rem_pio2+0x78>
 80077f0:	6863      	ldr	r3, [r4, #4]
 80077f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80077f6:	6063      	str	r3, [r4, #4]
 80077f8:	68e3      	ldr	r3, [r4, #12]
 80077fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80077fe:	e746      	b.n	800768e <__ieee754_rem_pio2+0x266>
 8007800:	46d0      	mov	r8, sl
 8007802:	e7dd      	b.n	80077c0 <__ieee754_rem_pio2+0x398>
 8007804:	41700000 	.word	0x41700000
 8007808:	0801bbbc 	.word	0x0801bbbc

0800780c <__ieee754_log10f>:
 800780c:	b508      	push	{r3, lr}
 800780e:	ee10 2a10 	vmov	r2, s0
 8007812:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8007816:	ed2d 8b02 	vpush	{d8}
 800781a:	d108      	bne.n	800782e <__ieee754_log10f+0x22>
 800781c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80078a0 <__ieee754_log10f+0x94>
 8007820:	eddf 7a20 	vldr	s15, [pc, #128]	; 80078a4 <__ieee754_log10f+0x98>
 8007824:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8007828:	ecbd 8b02 	vpop	{d8}
 800782c:	bd08      	pop	{r3, pc}
 800782e:	2a00      	cmp	r2, #0
 8007830:	da02      	bge.n	8007838 <__ieee754_log10f+0x2c>
 8007832:	ee30 7a40 	vsub.f32	s14, s0, s0
 8007836:	e7f3      	b.n	8007820 <__ieee754_log10f+0x14>
 8007838:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800783c:	db02      	blt.n	8007844 <__ieee754_log10f+0x38>
 800783e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007842:	e7f1      	b.n	8007828 <__ieee754_log10f+0x1c>
 8007844:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8007848:	bfbf      	itttt	lt
 800784a:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 80078a8 <__ieee754_log10f+0x9c>
 800784e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007852:	f06f 0118 	mvnlt.w	r1, #24
 8007856:	ee17 2a90 	vmovlt	r2, s15
 800785a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800785e:	bfa8      	it	ge
 8007860:	2100      	movge	r1, #0
 8007862:	3b7f      	subs	r3, #127	; 0x7f
 8007864:	440b      	add	r3, r1
 8007866:	0fd9      	lsrs	r1, r3, #31
 8007868:	440b      	add	r3, r1
 800786a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800786e:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 800787a:	ee00 3a10 	vmov	s0, r3
 800787e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8007882:	f000 fdef 	bl	8008464 <__ieee754_logf>
 8007886:	eddf 7a09 	vldr	s15, [pc, #36]	; 80078ac <__ieee754_log10f+0xa0>
 800788a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800788e:	eddf 7a08 	vldr	s15, [pc, #32]	; 80078b0 <__ieee754_log10f+0xa4>
 8007892:	eea8 0a27 	vfma.f32	s0, s16, s15
 8007896:	eddf 7a07 	vldr	s15, [pc, #28]	; 80078b4 <__ieee754_log10f+0xa8>
 800789a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800789e:	e7c3      	b.n	8007828 <__ieee754_log10f+0x1c>
 80078a0:	cc000000 	.word	0xcc000000
 80078a4:	00000000 	.word	0x00000000
 80078a8:	4c000000 	.word	0x4c000000
 80078ac:	3ede5bd9 	.word	0x3ede5bd9
 80078b0:	355427db 	.word	0x355427db
 80078b4:	3e9a2080 	.word	0x3e9a2080

080078b8 <__ieee754_sqrtf>:
 80078b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80078bc:	4770      	bx	lr
	...

080078c0 <__kernel_cos>:
 80078c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	ec59 8b10 	vmov	r8, r9, d0
 80078c8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80078cc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80078d0:	ed2d 8b02 	vpush	{d8}
 80078d4:	eeb0 8a41 	vmov.f32	s16, s2
 80078d8:	eef0 8a61 	vmov.f32	s17, s3
 80078dc:	da07      	bge.n	80078ee <__kernel_cos+0x2e>
 80078de:	ee10 0a10 	vmov	r0, s0
 80078e2:	4649      	mov	r1, r9
 80078e4:	f7f9 f982 	bl	8000bec <__aeabi_d2iz>
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f000 8089 	beq.w	8007a00 <__kernel_cos+0x140>
 80078ee:	4642      	mov	r2, r8
 80078f0:	464b      	mov	r3, r9
 80078f2:	4640      	mov	r0, r8
 80078f4:	4649      	mov	r1, r9
 80078f6:	f7f8 fedf 	bl	80006b8 <__aeabi_dmul>
 80078fa:	2200      	movs	r2, #0
 80078fc:	4b4e      	ldr	r3, [pc, #312]	; (8007a38 <__kernel_cos+0x178>)
 80078fe:	4604      	mov	r4, r0
 8007900:	460d      	mov	r5, r1
 8007902:	f7f8 fed9 	bl	80006b8 <__aeabi_dmul>
 8007906:	a340      	add	r3, pc, #256	; (adr r3, 8007a08 <__kernel_cos+0x148>)
 8007908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790c:	4682      	mov	sl, r0
 800790e:	468b      	mov	fp, r1
 8007910:	4620      	mov	r0, r4
 8007912:	4629      	mov	r1, r5
 8007914:	f7f8 fed0 	bl	80006b8 <__aeabi_dmul>
 8007918:	a33d      	add	r3, pc, #244	; (adr r3, 8007a10 <__kernel_cos+0x150>)
 800791a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791e:	f7f8 fd15 	bl	800034c <__adddf3>
 8007922:	4622      	mov	r2, r4
 8007924:	462b      	mov	r3, r5
 8007926:	f7f8 fec7 	bl	80006b8 <__aeabi_dmul>
 800792a:	a33b      	add	r3, pc, #236	; (adr r3, 8007a18 <__kernel_cos+0x158>)
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	f7f8 fd0a 	bl	8000348 <__aeabi_dsub>
 8007934:	4622      	mov	r2, r4
 8007936:	462b      	mov	r3, r5
 8007938:	f7f8 febe 	bl	80006b8 <__aeabi_dmul>
 800793c:	a338      	add	r3, pc, #224	; (adr r3, 8007a20 <__kernel_cos+0x160>)
 800793e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007942:	f7f8 fd03 	bl	800034c <__adddf3>
 8007946:	4622      	mov	r2, r4
 8007948:	462b      	mov	r3, r5
 800794a:	f7f8 feb5 	bl	80006b8 <__aeabi_dmul>
 800794e:	a336      	add	r3, pc, #216	; (adr r3, 8007a28 <__kernel_cos+0x168>)
 8007950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007954:	f7f8 fcf8 	bl	8000348 <__aeabi_dsub>
 8007958:	4622      	mov	r2, r4
 800795a:	462b      	mov	r3, r5
 800795c:	f7f8 feac 	bl	80006b8 <__aeabi_dmul>
 8007960:	a333      	add	r3, pc, #204	; (adr r3, 8007a30 <__kernel_cos+0x170>)
 8007962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007966:	f7f8 fcf1 	bl	800034c <__adddf3>
 800796a:	4622      	mov	r2, r4
 800796c:	462b      	mov	r3, r5
 800796e:	f7f8 fea3 	bl	80006b8 <__aeabi_dmul>
 8007972:	4622      	mov	r2, r4
 8007974:	462b      	mov	r3, r5
 8007976:	f7f8 fe9f 	bl	80006b8 <__aeabi_dmul>
 800797a:	ec53 2b18 	vmov	r2, r3, d8
 800797e:	4604      	mov	r4, r0
 8007980:	460d      	mov	r5, r1
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f8 fe97 	bl	80006b8 <__aeabi_dmul>
 800798a:	460b      	mov	r3, r1
 800798c:	4602      	mov	r2, r0
 800798e:	4629      	mov	r1, r5
 8007990:	4620      	mov	r0, r4
 8007992:	f7f8 fcd9 	bl	8000348 <__aeabi_dsub>
 8007996:	4b29      	ldr	r3, [pc, #164]	; (8007a3c <__kernel_cos+0x17c>)
 8007998:	429e      	cmp	r6, r3
 800799a:	4680      	mov	r8, r0
 800799c:	4689      	mov	r9, r1
 800799e:	dc11      	bgt.n	80079c4 <__kernel_cos+0x104>
 80079a0:	4602      	mov	r2, r0
 80079a2:	460b      	mov	r3, r1
 80079a4:	4650      	mov	r0, sl
 80079a6:	4659      	mov	r1, fp
 80079a8:	f7f8 fcce 	bl	8000348 <__aeabi_dsub>
 80079ac:	460b      	mov	r3, r1
 80079ae:	4924      	ldr	r1, [pc, #144]	; (8007a40 <__kernel_cos+0x180>)
 80079b0:	4602      	mov	r2, r0
 80079b2:	2000      	movs	r0, #0
 80079b4:	f7f8 fcc8 	bl	8000348 <__aeabi_dsub>
 80079b8:	ecbd 8b02 	vpop	{d8}
 80079bc:	ec41 0b10 	vmov	d0, r0, r1
 80079c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c4:	4b1f      	ldr	r3, [pc, #124]	; (8007a44 <__kernel_cos+0x184>)
 80079c6:	491e      	ldr	r1, [pc, #120]	; (8007a40 <__kernel_cos+0x180>)
 80079c8:	429e      	cmp	r6, r3
 80079ca:	bfcc      	ite	gt
 80079cc:	4d1e      	ldrgt	r5, [pc, #120]	; (8007a48 <__kernel_cos+0x188>)
 80079ce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80079d2:	2400      	movs	r4, #0
 80079d4:	4622      	mov	r2, r4
 80079d6:	462b      	mov	r3, r5
 80079d8:	2000      	movs	r0, #0
 80079da:	f7f8 fcb5 	bl	8000348 <__aeabi_dsub>
 80079de:	4622      	mov	r2, r4
 80079e0:	4606      	mov	r6, r0
 80079e2:	460f      	mov	r7, r1
 80079e4:	462b      	mov	r3, r5
 80079e6:	4650      	mov	r0, sl
 80079e8:	4659      	mov	r1, fp
 80079ea:	f7f8 fcad 	bl	8000348 <__aeabi_dsub>
 80079ee:	4642      	mov	r2, r8
 80079f0:	464b      	mov	r3, r9
 80079f2:	f7f8 fca9 	bl	8000348 <__aeabi_dsub>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4630      	mov	r0, r6
 80079fc:	4639      	mov	r1, r7
 80079fe:	e7d9      	b.n	80079b4 <__kernel_cos+0xf4>
 8007a00:	2000      	movs	r0, #0
 8007a02:	490f      	ldr	r1, [pc, #60]	; (8007a40 <__kernel_cos+0x180>)
 8007a04:	e7d8      	b.n	80079b8 <__kernel_cos+0xf8>
 8007a06:	bf00      	nop
 8007a08:	be8838d4 	.word	0xbe8838d4
 8007a0c:	bda8fae9 	.word	0xbda8fae9
 8007a10:	bdb4b1c4 	.word	0xbdb4b1c4
 8007a14:	3e21ee9e 	.word	0x3e21ee9e
 8007a18:	809c52ad 	.word	0x809c52ad
 8007a1c:	3e927e4f 	.word	0x3e927e4f
 8007a20:	19cb1590 	.word	0x19cb1590
 8007a24:	3efa01a0 	.word	0x3efa01a0
 8007a28:	16c15177 	.word	0x16c15177
 8007a2c:	3f56c16c 	.word	0x3f56c16c
 8007a30:	5555554c 	.word	0x5555554c
 8007a34:	3fa55555 	.word	0x3fa55555
 8007a38:	3fe00000 	.word	0x3fe00000
 8007a3c:	3fd33332 	.word	0x3fd33332
 8007a40:	3ff00000 	.word	0x3ff00000
 8007a44:	3fe90000 	.word	0x3fe90000
 8007a48:	3fd20000 	.word	0x3fd20000
 8007a4c:	00000000 	.word	0x00000000

08007a50 <__kernel_rem_pio2>:
 8007a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a54:	ed2d 8b02 	vpush	{d8}
 8007a58:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007a5c:	1ed4      	subs	r4, r2, #3
 8007a5e:	9308      	str	r3, [sp, #32]
 8007a60:	9101      	str	r1, [sp, #4]
 8007a62:	4bc5      	ldr	r3, [pc, #788]	; (8007d78 <__kernel_rem_pio2+0x328>)
 8007a64:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007a66:	9009      	str	r0, [sp, #36]	; 0x24
 8007a68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a6c:	9304      	str	r3, [sp, #16]
 8007a6e:	9b08      	ldr	r3, [sp, #32]
 8007a70:	3b01      	subs	r3, #1
 8007a72:	9307      	str	r3, [sp, #28]
 8007a74:	2318      	movs	r3, #24
 8007a76:	fb94 f4f3 	sdiv	r4, r4, r3
 8007a7a:	f06f 0317 	mvn.w	r3, #23
 8007a7e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8007a82:	fb04 3303 	mla	r3, r4, r3, r3
 8007a86:	eb03 0a02 	add.w	sl, r3, r2
 8007a8a:	9b04      	ldr	r3, [sp, #16]
 8007a8c:	9a07      	ldr	r2, [sp, #28]
 8007a8e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007d68 <__kernel_rem_pio2+0x318>
 8007a92:	eb03 0802 	add.w	r8, r3, r2
 8007a96:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007a98:	1aa7      	subs	r7, r4, r2
 8007a9a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007a9e:	ae22      	add	r6, sp, #136	; 0x88
 8007aa0:	2500      	movs	r5, #0
 8007aa2:	4545      	cmp	r5, r8
 8007aa4:	dd13      	ble.n	8007ace <__kernel_rem_pio2+0x7e>
 8007aa6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007d68 <__kernel_rem_pio2+0x318>
 8007aaa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007aae:	2600      	movs	r6, #0
 8007ab0:	9b04      	ldr	r3, [sp, #16]
 8007ab2:	429e      	cmp	r6, r3
 8007ab4:	dc32      	bgt.n	8007b1c <__kernel_rem_pio2+0xcc>
 8007ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab8:	9302      	str	r3, [sp, #8]
 8007aba:	9b08      	ldr	r3, [sp, #32]
 8007abc:	199d      	adds	r5, r3, r6
 8007abe:	ab22      	add	r3, sp, #136	; 0x88
 8007ac0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007ac4:	9306      	str	r3, [sp, #24]
 8007ac6:	ec59 8b18 	vmov	r8, r9, d8
 8007aca:	2700      	movs	r7, #0
 8007acc:	e01f      	b.n	8007b0e <__kernel_rem_pio2+0xbe>
 8007ace:	42ef      	cmn	r7, r5
 8007ad0:	d407      	bmi.n	8007ae2 <__kernel_rem_pio2+0x92>
 8007ad2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007ad6:	f7f8 fd85 	bl	80005e4 <__aeabi_i2d>
 8007ada:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007ade:	3501      	adds	r5, #1
 8007ae0:	e7df      	b.n	8007aa2 <__kernel_rem_pio2+0x52>
 8007ae2:	ec51 0b18 	vmov	r0, r1, d8
 8007ae6:	e7f8      	b.n	8007ada <__kernel_rem_pio2+0x8a>
 8007ae8:	9906      	ldr	r1, [sp, #24]
 8007aea:	9d02      	ldr	r5, [sp, #8]
 8007aec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8007af0:	9106      	str	r1, [sp, #24]
 8007af2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8007af6:	9502      	str	r5, [sp, #8]
 8007af8:	f7f8 fdde 	bl	80006b8 <__aeabi_dmul>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	4640      	mov	r0, r8
 8007b02:	4649      	mov	r1, r9
 8007b04:	f7f8 fc22 	bl	800034c <__adddf3>
 8007b08:	3701      	adds	r7, #1
 8007b0a:	4680      	mov	r8, r0
 8007b0c:	4689      	mov	r9, r1
 8007b0e:	9b07      	ldr	r3, [sp, #28]
 8007b10:	429f      	cmp	r7, r3
 8007b12:	dde9      	ble.n	8007ae8 <__kernel_rem_pio2+0x98>
 8007b14:	e8eb 8902 	strd	r8, r9, [fp], #8
 8007b18:	3601      	adds	r6, #1
 8007b1a:	e7c9      	b.n	8007ab0 <__kernel_rem_pio2+0x60>
 8007b1c:	9b04      	ldr	r3, [sp, #16]
 8007b1e:	aa0e      	add	r2, sp, #56	; 0x38
 8007b20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007b24:	930c      	str	r3, [sp, #48]	; 0x30
 8007b26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007b28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007b2c:	9c04      	ldr	r4, [sp, #16]
 8007b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b30:	ab9a      	add	r3, sp, #616	; 0x268
 8007b32:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8007b36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b3a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007b3e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8007b42:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8007b46:	ab9a      	add	r3, sp, #616	; 0x268
 8007b48:	445b      	add	r3, fp
 8007b4a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8007b4e:	2500      	movs	r5, #0
 8007b50:	1b63      	subs	r3, r4, r5
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	dc78      	bgt.n	8007c48 <__kernel_rem_pio2+0x1f8>
 8007b56:	4650      	mov	r0, sl
 8007b58:	ec49 8b10 	vmov	d0, r8, r9
 8007b5c:	f000 fc0c 	bl	8008378 <scalbn>
 8007b60:	ec57 6b10 	vmov	r6, r7, d0
 8007b64:	2200      	movs	r2, #0
 8007b66:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007b6a:	ee10 0a10 	vmov	r0, s0
 8007b6e:	4639      	mov	r1, r7
 8007b70:	f7f8 fda2 	bl	80006b8 <__aeabi_dmul>
 8007b74:	ec41 0b10 	vmov	d0, r0, r1
 8007b78:	f000 fb6e 	bl	8008258 <floor>
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	ec51 0b10 	vmov	r0, r1, d0
 8007b82:	4b7e      	ldr	r3, [pc, #504]	; (8007d7c <__kernel_rem_pio2+0x32c>)
 8007b84:	f7f8 fd98 	bl	80006b8 <__aeabi_dmul>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	4639      	mov	r1, r7
 8007b90:	f7f8 fbda 	bl	8000348 <__aeabi_dsub>
 8007b94:	460f      	mov	r7, r1
 8007b96:	4606      	mov	r6, r0
 8007b98:	f7f9 f828 	bl	8000bec <__aeabi_d2iz>
 8007b9c:	9006      	str	r0, [sp, #24]
 8007b9e:	f7f8 fd21 	bl	80005e4 <__aeabi_i2d>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	4639      	mov	r1, r7
 8007baa:	f7f8 fbcd 	bl	8000348 <__aeabi_dsub>
 8007bae:	f1ba 0f00 	cmp.w	sl, #0
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	460f      	mov	r7, r1
 8007bb6:	dd6c      	ble.n	8007c92 <__kernel_rem_pio2+0x242>
 8007bb8:	1e62      	subs	r2, r4, #1
 8007bba:	ab0e      	add	r3, sp, #56	; 0x38
 8007bbc:	f1ca 0118 	rsb	r1, sl, #24
 8007bc0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007bc4:	9d06      	ldr	r5, [sp, #24]
 8007bc6:	fa40 f301 	asr.w	r3, r0, r1
 8007bca:	441d      	add	r5, r3
 8007bcc:	408b      	lsls	r3, r1
 8007bce:	1ac0      	subs	r0, r0, r3
 8007bd0:	ab0e      	add	r3, sp, #56	; 0x38
 8007bd2:	9506      	str	r5, [sp, #24]
 8007bd4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007bd8:	f1ca 0317 	rsb	r3, sl, #23
 8007bdc:	fa40 f303 	asr.w	r3, r0, r3
 8007be0:	9302      	str	r3, [sp, #8]
 8007be2:	9b02      	ldr	r3, [sp, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	dd62      	ble.n	8007cae <__kernel_rem_pio2+0x25e>
 8007be8:	9b06      	ldr	r3, [sp, #24]
 8007bea:	2200      	movs	r2, #0
 8007bec:	3301      	adds	r3, #1
 8007bee:	9306      	str	r3, [sp, #24]
 8007bf0:	4615      	mov	r5, r2
 8007bf2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007bf6:	4294      	cmp	r4, r2
 8007bf8:	f300 8095 	bgt.w	8007d26 <__kernel_rem_pio2+0x2d6>
 8007bfc:	f1ba 0f00 	cmp.w	sl, #0
 8007c00:	dd07      	ble.n	8007c12 <__kernel_rem_pio2+0x1c2>
 8007c02:	f1ba 0f01 	cmp.w	sl, #1
 8007c06:	f000 80a2 	beq.w	8007d4e <__kernel_rem_pio2+0x2fe>
 8007c0a:	f1ba 0f02 	cmp.w	sl, #2
 8007c0e:	f000 80c1 	beq.w	8007d94 <__kernel_rem_pio2+0x344>
 8007c12:	9b02      	ldr	r3, [sp, #8]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d14a      	bne.n	8007cae <__kernel_rem_pio2+0x25e>
 8007c18:	4632      	mov	r2, r6
 8007c1a:	463b      	mov	r3, r7
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	4958      	ldr	r1, [pc, #352]	; (8007d80 <__kernel_rem_pio2+0x330>)
 8007c20:	f7f8 fb92 	bl	8000348 <__aeabi_dsub>
 8007c24:	4606      	mov	r6, r0
 8007c26:	460f      	mov	r7, r1
 8007c28:	2d00      	cmp	r5, #0
 8007c2a:	d040      	beq.n	8007cae <__kernel_rem_pio2+0x25e>
 8007c2c:	4650      	mov	r0, sl
 8007c2e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007d70 <__kernel_rem_pio2+0x320>
 8007c32:	f000 fba1 	bl	8008378 <scalbn>
 8007c36:	4630      	mov	r0, r6
 8007c38:	4639      	mov	r1, r7
 8007c3a:	ec53 2b10 	vmov	r2, r3, d0
 8007c3e:	f7f8 fb83 	bl	8000348 <__aeabi_dsub>
 8007c42:	4606      	mov	r6, r0
 8007c44:	460f      	mov	r7, r1
 8007c46:	e032      	b.n	8007cae <__kernel_rem_pio2+0x25e>
 8007c48:	2200      	movs	r2, #0
 8007c4a:	4b4e      	ldr	r3, [pc, #312]	; (8007d84 <__kernel_rem_pio2+0x334>)
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	4649      	mov	r1, r9
 8007c50:	f7f8 fd32 	bl	80006b8 <__aeabi_dmul>
 8007c54:	f7f8 ffca 	bl	8000bec <__aeabi_d2iz>
 8007c58:	f7f8 fcc4 	bl	80005e4 <__aeabi_i2d>
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	4b4a      	ldr	r3, [pc, #296]	; (8007d88 <__kernel_rem_pio2+0x338>)
 8007c60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c64:	f7f8 fd28 	bl	80006b8 <__aeabi_dmul>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	4649      	mov	r1, r9
 8007c70:	f7f8 fb6a 	bl	8000348 <__aeabi_dsub>
 8007c74:	f7f8 ffba 	bl	8000bec <__aeabi_d2iz>
 8007c78:	ab0e      	add	r3, sp, #56	; 0x38
 8007c7a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8007c7e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c86:	f7f8 fb61 	bl	800034c <__adddf3>
 8007c8a:	3501      	adds	r5, #1
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	4689      	mov	r9, r1
 8007c90:	e75e      	b.n	8007b50 <__kernel_rem_pio2+0x100>
 8007c92:	d105      	bne.n	8007ca0 <__kernel_rem_pio2+0x250>
 8007c94:	1e63      	subs	r3, r4, #1
 8007c96:	aa0e      	add	r2, sp, #56	; 0x38
 8007c98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007c9c:	15c3      	asrs	r3, r0, #23
 8007c9e:	e79f      	b.n	8007be0 <__kernel_rem_pio2+0x190>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4b3a      	ldr	r3, [pc, #232]	; (8007d8c <__kernel_rem_pio2+0x33c>)
 8007ca4:	f7f8 ff8e 	bl	8000bc4 <__aeabi_dcmpge>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d139      	bne.n	8007d20 <__kernel_rem_pio2+0x2d0>
 8007cac:	9002      	str	r0, [sp, #8]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4630      	mov	r0, r6
 8007cb4:	4639      	mov	r1, r7
 8007cb6:	f7f8 ff67 	bl	8000b88 <__aeabi_dcmpeq>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	f000 80c7 	beq.w	8007e4e <__kernel_rem_pio2+0x3fe>
 8007cc0:	1e65      	subs	r5, r4, #1
 8007cc2:	462b      	mov	r3, r5
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	9904      	ldr	r1, [sp, #16]
 8007cc8:	428b      	cmp	r3, r1
 8007cca:	da6a      	bge.n	8007da2 <__kernel_rem_pio2+0x352>
 8007ccc:	2a00      	cmp	r2, #0
 8007cce:	f000 8088 	beq.w	8007de2 <__kernel_rem_pio2+0x392>
 8007cd2:	ab0e      	add	r3, sp, #56	; 0x38
 8007cd4:	f1aa 0a18 	sub.w	sl, sl, #24
 8007cd8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 80b4 	beq.w	8007e4a <__kernel_rem_pio2+0x3fa>
 8007ce2:	4650      	mov	r0, sl
 8007ce4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007d70 <__kernel_rem_pio2+0x320>
 8007ce8:	f000 fb46 	bl	8008378 <scalbn>
 8007cec:	00ec      	lsls	r4, r5, #3
 8007cee:	ab72      	add	r3, sp, #456	; 0x1c8
 8007cf0:	191e      	adds	r6, r3, r4
 8007cf2:	ec59 8b10 	vmov	r8, r9, d0
 8007cf6:	f106 0a08 	add.w	sl, r6, #8
 8007cfa:	462f      	mov	r7, r5
 8007cfc:	2f00      	cmp	r7, #0
 8007cfe:	f280 80df 	bge.w	8007ec0 <__kernel_rem_pio2+0x470>
 8007d02:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007d68 <__kernel_rem_pio2+0x318>
 8007d06:	f04f 0a00 	mov.w	sl, #0
 8007d0a:	eba5 030a 	sub.w	r3, r5, sl
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f2c0 810a 	blt.w	8007f28 <__kernel_rem_pio2+0x4d8>
 8007d14:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007d90 <__kernel_rem_pio2+0x340>
 8007d18:	ec59 8b18 	vmov	r8, r9, d8
 8007d1c:	2700      	movs	r7, #0
 8007d1e:	e0f5      	b.n	8007f0c <__kernel_rem_pio2+0x4bc>
 8007d20:	2302      	movs	r3, #2
 8007d22:	9302      	str	r3, [sp, #8]
 8007d24:	e760      	b.n	8007be8 <__kernel_rem_pio2+0x198>
 8007d26:	ab0e      	add	r3, sp, #56	; 0x38
 8007d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2c:	b94d      	cbnz	r5, 8007d42 <__kernel_rem_pio2+0x2f2>
 8007d2e:	b12b      	cbz	r3, 8007d3c <__kernel_rem_pio2+0x2ec>
 8007d30:	a80e      	add	r0, sp, #56	; 0x38
 8007d32:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007d36:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	3201      	adds	r2, #1
 8007d3e:	461d      	mov	r5, r3
 8007d40:	e759      	b.n	8007bf6 <__kernel_rem_pio2+0x1a6>
 8007d42:	a80e      	add	r0, sp, #56	; 0x38
 8007d44:	1acb      	subs	r3, r1, r3
 8007d46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007d4a:	462b      	mov	r3, r5
 8007d4c:	e7f6      	b.n	8007d3c <__kernel_rem_pio2+0x2ec>
 8007d4e:	1e62      	subs	r2, r4, #1
 8007d50:	ab0e      	add	r3, sp, #56	; 0x38
 8007d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d56:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007d5a:	a90e      	add	r1, sp, #56	; 0x38
 8007d5c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007d60:	e757      	b.n	8007c12 <__kernel_rem_pio2+0x1c2>
 8007d62:	bf00      	nop
 8007d64:	f3af 8000 	nop.w
	...
 8007d74:	3ff00000 	.word	0x3ff00000
 8007d78:	0801bd08 	.word	0x0801bd08
 8007d7c:	40200000 	.word	0x40200000
 8007d80:	3ff00000 	.word	0x3ff00000
 8007d84:	3e700000 	.word	0x3e700000
 8007d88:	41700000 	.word	0x41700000
 8007d8c:	3fe00000 	.word	0x3fe00000
 8007d90:	0801bcc8 	.word	0x0801bcc8
 8007d94:	1e62      	subs	r2, r4, #1
 8007d96:	ab0e      	add	r3, sp, #56	; 0x38
 8007d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007da0:	e7db      	b.n	8007d5a <__kernel_rem_pio2+0x30a>
 8007da2:	a90e      	add	r1, sp, #56	; 0x38
 8007da4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007da8:	3b01      	subs	r3, #1
 8007daa:	430a      	orrs	r2, r1
 8007dac:	e78b      	b.n	8007cc6 <__kernel_rem_pio2+0x276>
 8007dae:	3301      	adds	r3, #1
 8007db0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007db4:	2900      	cmp	r1, #0
 8007db6:	d0fa      	beq.n	8007dae <__kernel_rem_pio2+0x35e>
 8007db8:	9a08      	ldr	r2, [sp, #32]
 8007dba:	4422      	add	r2, r4
 8007dbc:	00d2      	lsls	r2, r2, #3
 8007dbe:	a922      	add	r1, sp, #136	; 0x88
 8007dc0:	18e3      	adds	r3, r4, r3
 8007dc2:	9206      	str	r2, [sp, #24]
 8007dc4:	440a      	add	r2, r1
 8007dc6:	9302      	str	r3, [sp, #8]
 8007dc8:	f10b 0108 	add.w	r1, fp, #8
 8007dcc:	f102 0308 	add.w	r3, r2, #8
 8007dd0:	1c66      	adds	r6, r4, #1
 8007dd2:	910a      	str	r1, [sp, #40]	; 0x28
 8007dd4:	2500      	movs	r5, #0
 8007dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8007dd8:	9b02      	ldr	r3, [sp, #8]
 8007dda:	42b3      	cmp	r3, r6
 8007ddc:	da04      	bge.n	8007de8 <__kernel_rem_pio2+0x398>
 8007dde:	461c      	mov	r4, r3
 8007de0:	e6a6      	b.n	8007b30 <__kernel_rem_pio2+0xe0>
 8007de2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007de4:	2301      	movs	r3, #1
 8007de6:	e7e3      	b.n	8007db0 <__kernel_rem_pio2+0x360>
 8007de8:	9b06      	ldr	r3, [sp, #24]
 8007dea:	18ef      	adds	r7, r5, r3
 8007dec:	ab22      	add	r3, sp, #136	; 0x88
 8007dee:	441f      	add	r7, r3
 8007df0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007df2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007df6:	f7f8 fbf5 	bl	80005e4 <__aeabi_i2d>
 8007dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dfc:	461c      	mov	r4, r3
 8007dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e00:	e9c7 0100 	strd	r0, r1, [r7]
 8007e04:	eb03 0b05 	add.w	fp, r3, r5
 8007e08:	2700      	movs	r7, #0
 8007e0a:	f04f 0800 	mov.w	r8, #0
 8007e0e:	f04f 0900 	mov.w	r9, #0
 8007e12:	9b07      	ldr	r3, [sp, #28]
 8007e14:	429f      	cmp	r7, r3
 8007e16:	dd08      	ble.n	8007e2a <__kernel_rem_pio2+0x3da>
 8007e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e1a:	aa72      	add	r2, sp, #456	; 0x1c8
 8007e1c:	18eb      	adds	r3, r5, r3
 8007e1e:	4413      	add	r3, r2
 8007e20:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8007e24:	3601      	adds	r6, #1
 8007e26:	3508      	adds	r5, #8
 8007e28:	e7d6      	b.n	8007dd8 <__kernel_rem_pio2+0x388>
 8007e2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007e2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007e32:	f7f8 fc41 	bl	80006b8 <__aeabi_dmul>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4640      	mov	r0, r8
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	f7f8 fa85 	bl	800034c <__adddf3>
 8007e42:	3701      	adds	r7, #1
 8007e44:	4680      	mov	r8, r0
 8007e46:	4689      	mov	r9, r1
 8007e48:	e7e3      	b.n	8007e12 <__kernel_rem_pio2+0x3c2>
 8007e4a:	3d01      	subs	r5, #1
 8007e4c:	e741      	b.n	8007cd2 <__kernel_rem_pio2+0x282>
 8007e4e:	f1ca 0000 	rsb	r0, sl, #0
 8007e52:	ec47 6b10 	vmov	d0, r6, r7
 8007e56:	f000 fa8f 	bl	8008378 <scalbn>
 8007e5a:	ec57 6b10 	vmov	r6, r7, d0
 8007e5e:	2200      	movs	r2, #0
 8007e60:	4b99      	ldr	r3, [pc, #612]	; (80080c8 <__kernel_rem_pio2+0x678>)
 8007e62:	ee10 0a10 	vmov	r0, s0
 8007e66:	4639      	mov	r1, r7
 8007e68:	f7f8 feac 	bl	8000bc4 <__aeabi_dcmpge>
 8007e6c:	b1f8      	cbz	r0, 8007eae <__kernel_rem_pio2+0x45e>
 8007e6e:	2200      	movs	r2, #0
 8007e70:	4b96      	ldr	r3, [pc, #600]	; (80080cc <__kernel_rem_pio2+0x67c>)
 8007e72:	4630      	mov	r0, r6
 8007e74:	4639      	mov	r1, r7
 8007e76:	f7f8 fc1f 	bl	80006b8 <__aeabi_dmul>
 8007e7a:	f7f8 feb7 	bl	8000bec <__aeabi_d2iz>
 8007e7e:	4680      	mov	r8, r0
 8007e80:	f7f8 fbb0 	bl	80005e4 <__aeabi_i2d>
 8007e84:	2200      	movs	r2, #0
 8007e86:	4b90      	ldr	r3, [pc, #576]	; (80080c8 <__kernel_rem_pio2+0x678>)
 8007e88:	f7f8 fc16 	bl	80006b8 <__aeabi_dmul>
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	4602      	mov	r2, r0
 8007e90:	4639      	mov	r1, r7
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7f8 fa58 	bl	8000348 <__aeabi_dsub>
 8007e98:	f7f8 fea8 	bl	8000bec <__aeabi_d2iz>
 8007e9c:	1c65      	adds	r5, r4, #1
 8007e9e:	ab0e      	add	r3, sp, #56	; 0x38
 8007ea0:	f10a 0a18 	add.w	sl, sl, #24
 8007ea4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007ea8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007eac:	e719      	b.n	8007ce2 <__kernel_rem_pio2+0x292>
 8007eae:	4630      	mov	r0, r6
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	f7f8 fe9b 	bl	8000bec <__aeabi_d2iz>
 8007eb6:	ab0e      	add	r3, sp, #56	; 0x38
 8007eb8:	4625      	mov	r5, r4
 8007eba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007ebe:	e710      	b.n	8007ce2 <__kernel_rem_pio2+0x292>
 8007ec0:	ab0e      	add	r3, sp, #56	; 0x38
 8007ec2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007ec6:	f7f8 fb8d 	bl	80005e4 <__aeabi_i2d>
 8007eca:	4642      	mov	r2, r8
 8007ecc:	464b      	mov	r3, r9
 8007ece:	f7f8 fbf3 	bl	80006b8 <__aeabi_dmul>
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007ed8:	4b7c      	ldr	r3, [pc, #496]	; (80080cc <__kernel_rem_pio2+0x67c>)
 8007eda:	4640      	mov	r0, r8
 8007edc:	4649      	mov	r1, r9
 8007ede:	f7f8 fbeb 	bl	80006b8 <__aeabi_dmul>
 8007ee2:	3f01      	subs	r7, #1
 8007ee4:	4680      	mov	r8, r0
 8007ee6:	4689      	mov	r9, r1
 8007ee8:	e708      	b.n	8007cfc <__kernel_rem_pio2+0x2ac>
 8007eea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8007ef6:	f7f8 fbdf 	bl	80006b8 <__aeabi_dmul>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	4640      	mov	r0, r8
 8007f00:	4649      	mov	r1, r9
 8007f02:	f7f8 fa23 	bl	800034c <__adddf3>
 8007f06:	3701      	adds	r7, #1
 8007f08:	4680      	mov	r8, r0
 8007f0a:	4689      	mov	r9, r1
 8007f0c:	9b04      	ldr	r3, [sp, #16]
 8007f0e:	429f      	cmp	r7, r3
 8007f10:	dc01      	bgt.n	8007f16 <__kernel_rem_pio2+0x4c6>
 8007f12:	45ba      	cmp	sl, r7
 8007f14:	dae9      	bge.n	8007eea <__kernel_rem_pio2+0x49a>
 8007f16:	ab4a      	add	r3, sp, #296	; 0x128
 8007f18:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f1c:	e9c3 8900 	strd	r8, r9, [r3]
 8007f20:	f10a 0a01 	add.w	sl, sl, #1
 8007f24:	3e08      	subs	r6, #8
 8007f26:	e6f0      	b.n	8007d0a <__kernel_rem_pio2+0x2ba>
 8007f28:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d85b      	bhi.n	8007fe6 <__kernel_rem_pio2+0x596>
 8007f2e:	e8df f003 	tbb	[pc, r3]
 8007f32:	264a      	.short	0x264a
 8007f34:	0226      	.short	0x0226
 8007f36:	ab9a      	add	r3, sp, #616	; 0x268
 8007f38:	441c      	add	r4, r3
 8007f3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007f3e:	46a2      	mov	sl, r4
 8007f40:	46ab      	mov	fp, r5
 8007f42:	f1bb 0f00 	cmp.w	fp, #0
 8007f46:	dc6c      	bgt.n	8008022 <__kernel_rem_pio2+0x5d2>
 8007f48:	46a2      	mov	sl, r4
 8007f4a:	46ab      	mov	fp, r5
 8007f4c:	f1bb 0f01 	cmp.w	fp, #1
 8007f50:	f300 8086 	bgt.w	8008060 <__kernel_rem_pio2+0x610>
 8007f54:	2000      	movs	r0, #0
 8007f56:	2100      	movs	r1, #0
 8007f58:	2d01      	cmp	r5, #1
 8007f5a:	f300 80a0 	bgt.w	800809e <__kernel_rem_pio2+0x64e>
 8007f5e:	9b02      	ldr	r3, [sp, #8]
 8007f60:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007f64:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f040 809e 	bne.w	80080aa <__kernel_rem_pio2+0x65a>
 8007f6e:	9b01      	ldr	r3, [sp, #4]
 8007f70:	e9c3 7800 	strd	r7, r8, [r3]
 8007f74:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007f78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007f7c:	e033      	b.n	8007fe6 <__kernel_rem_pio2+0x596>
 8007f7e:	3408      	adds	r4, #8
 8007f80:	ab4a      	add	r3, sp, #296	; 0x128
 8007f82:	441c      	add	r4, r3
 8007f84:	462e      	mov	r6, r5
 8007f86:	2000      	movs	r0, #0
 8007f88:	2100      	movs	r1, #0
 8007f8a:	2e00      	cmp	r6, #0
 8007f8c:	da3a      	bge.n	8008004 <__kernel_rem_pio2+0x5b4>
 8007f8e:	9b02      	ldr	r3, [sp, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d03d      	beq.n	8008010 <__kernel_rem_pio2+0x5c0>
 8007f94:	4602      	mov	r2, r0
 8007f96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f9a:	9c01      	ldr	r4, [sp, #4]
 8007f9c:	e9c4 2300 	strd	r2, r3, [r4]
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007fa8:	f7f8 f9ce 	bl	8000348 <__aeabi_dsub>
 8007fac:	ae4c      	add	r6, sp, #304	; 0x130
 8007fae:	2401      	movs	r4, #1
 8007fb0:	42a5      	cmp	r5, r4
 8007fb2:	da30      	bge.n	8008016 <__kernel_rem_pio2+0x5c6>
 8007fb4:	9b02      	ldr	r3, [sp, #8]
 8007fb6:	b113      	cbz	r3, 8007fbe <__kernel_rem_pio2+0x56e>
 8007fb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	9b01      	ldr	r3, [sp, #4]
 8007fc0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007fc4:	e00f      	b.n	8007fe6 <__kernel_rem_pio2+0x596>
 8007fc6:	ab9a      	add	r3, sp, #616	; 0x268
 8007fc8:	441c      	add	r4, r3
 8007fca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007fce:	2000      	movs	r0, #0
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	2d00      	cmp	r5, #0
 8007fd4:	da10      	bge.n	8007ff8 <__kernel_rem_pio2+0x5a8>
 8007fd6:	9b02      	ldr	r3, [sp, #8]
 8007fd8:	b113      	cbz	r3, 8007fe0 <__kernel_rem_pio2+0x590>
 8007fda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fde:	4619      	mov	r1, r3
 8007fe0:	9b01      	ldr	r3, [sp, #4]
 8007fe2:	e9c3 0100 	strd	r0, r1, [r3]
 8007fe6:	9b06      	ldr	r3, [sp, #24]
 8007fe8:	f003 0007 	and.w	r0, r3, #7
 8007fec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007ff0:	ecbd 8b02 	vpop	{d8}
 8007ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007ffc:	f7f8 f9a6 	bl	800034c <__adddf3>
 8008000:	3d01      	subs	r5, #1
 8008002:	e7e6      	b.n	8007fd2 <__kernel_rem_pio2+0x582>
 8008004:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008008:	f7f8 f9a0 	bl	800034c <__adddf3>
 800800c:	3e01      	subs	r6, #1
 800800e:	e7bc      	b.n	8007f8a <__kernel_rem_pio2+0x53a>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	e7c1      	b.n	8007f9a <__kernel_rem_pio2+0x54a>
 8008016:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800801a:	f7f8 f997 	bl	800034c <__adddf3>
 800801e:	3401      	adds	r4, #1
 8008020:	e7c6      	b.n	8007fb0 <__kernel_rem_pio2+0x560>
 8008022:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8008026:	ed3a 7b02 	vldmdb	sl!, {d7}
 800802a:	4640      	mov	r0, r8
 800802c:	ec53 2b17 	vmov	r2, r3, d7
 8008030:	4649      	mov	r1, r9
 8008032:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008036:	f7f8 f989 	bl	800034c <__adddf3>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4606      	mov	r6, r0
 8008040:	460f      	mov	r7, r1
 8008042:	4640      	mov	r0, r8
 8008044:	4649      	mov	r1, r9
 8008046:	f7f8 f97f 	bl	8000348 <__aeabi_dsub>
 800804a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800804e:	f7f8 f97d 	bl	800034c <__adddf3>
 8008052:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008056:	e9ca 0100 	strd	r0, r1, [sl]
 800805a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800805e:	e770      	b.n	8007f42 <__kernel_rem_pio2+0x4f2>
 8008060:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8008064:	ed3a 7b02 	vldmdb	sl!, {d7}
 8008068:	4630      	mov	r0, r6
 800806a:	ec53 2b17 	vmov	r2, r3, d7
 800806e:	4639      	mov	r1, r7
 8008070:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008074:	f7f8 f96a 	bl	800034c <__adddf3>
 8008078:	4602      	mov	r2, r0
 800807a:	460b      	mov	r3, r1
 800807c:	4680      	mov	r8, r0
 800807e:	4689      	mov	r9, r1
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	f7f8 f960 	bl	8000348 <__aeabi_dsub>
 8008088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800808c:	f7f8 f95e 	bl	800034c <__adddf3>
 8008090:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008094:	e9ca 0100 	strd	r0, r1, [sl]
 8008098:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800809c:	e756      	b.n	8007f4c <__kernel_rem_pio2+0x4fc>
 800809e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80080a2:	f7f8 f953 	bl	800034c <__adddf3>
 80080a6:	3d01      	subs	r5, #1
 80080a8:	e756      	b.n	8007f58 <__kernel_rem_pio2+0x508>
 80080aa:	9b01      	ldr	r3, [sp, #4]
 80080ac:	9a01      	ldr	r2, [sp, #4]
 80080ae:	601f      	str	r7, [r3, #0]
 80080b0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80080b4:	605c      	str	r4, [r3, #4]
 80080b6:	609d      	str	r5, [r3, #8]
 80080b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80080bc:	60d3      	str	r3, [r2, #12]
 80080be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080c2:	6110      	str	r0, [r2, #16]
 80080c4:	6153      	str	r3, [r2, #20]
 80080c6:	e78e      	b.n	8007fe6 <__kernel_rem_pio2+0x596>
 80080c8:	41700000 	.word	0x41700000
 80080cc:	3e700000 	.word	0x3e700000

080080d0 <__kernel_sin>:
 80080d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d4:	ec55 4b10 	vmov	r4, r5, d0
 80080d8:	b085      	sub	sp, #20
 80080da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80080de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80080e2:	ed8d 1b00 	vstr	d1, [sp]
 80080e6:	9002      	str	r0, [sp, #8]
 80080e8:	da06      	bge.n	80080f8 <__kernel_sin+0x28>
 80080ea:	ee10 0a10 	vmov	r0, s0
 80080ee:	4629      	mov	r1, r5
 80080f0:	f7f8 fd7c 	bl	8000bec <__aeabi_d2iz>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d051      	beq.n	800819c <__kernel_sin+0xcc>
 80080f8:	4622      	mov	r2, r4
 80080fa:	462b      	mov	r3, r5
 80080fc:	4620      	mov	r0, r4
 80080fe:	4629      	mov	r1, r5
 8008100:	f7f8 fada 	bl	80006b8 <__aeabi_dmul>
 8008104:	4682      	mov	sl, r0
 8008106:	468b      	mov	fp, r1
 8008108:	4602      	mov	r2, r0
 800810a:	460b      	mov	r3, r1
 800810c:	4620      	mov	r0, r4
 800810e:	4629      	mov	r1, r5
 8008110:	f7f8 fad2 	bl	80006b8 <__aeabi_dmul>
 8008114:	a341      	add	r3, pc, #260	; (adr r3, 800821c <__kernel_sin+0x14c>)
 8008116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811a:	4680      	mov	r8, r0
 800811c:	4689      	mov	r9, r1
 800811e:	4650      	mov	r0, sl
 8008120:	4659      	mov	r1, fp
 8008122:	f7f8 fac9 	bl	80006b8 <__aeabi_dmul>
 8008126:	a33f      	add	r3, pc, #252	; (adr r3, 8008224 <__kernel_sin+0x154>)
 8008128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812c:	f7f8 f90c 	bl	8000348 <__aeabi_dsub>
 8008130:	4652      	mov	r2, sl
 8008132:	465b      	mov	r3, fp
 8008134:	f7f8 fac0 	bl	80006b8 <__aeabi_dmul>
 8008138:	a33c      	add	r3, pc, #240	; (adr r3, 800822c <__kernel_sin+0x15c>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	f7f8 f905 	bl	800034c <__adddf3>
 8008142:	4652      	mov	r2, sl
 8008144:	465b      	mov	r3, fp
 8008146:	f7f8 fab7 	bl	80006b8 <__aeabi_dmul>
 800814a:	a33a      	add	r3, pc, #232	; (adr r3, 8008234 <__kernel_sin+0x164>)
 800814c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008150:	f7f8 f8fa 	bl	8000348 <__aeabi_dsub>
 8008154:	4652      	mov	r2, sl
 8008156:	465b      	mov	r3, fp
 8008158:	f7f8 faae 	bl	80006b8 <__aeabi_dmul>
 800815c:	a337      	add	r3, pc, #220	; (adr r3, 800823c <__kernel_sin+0x16c>)
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	f7f8 f8f3 	bl	800034c <__adddf3>
 8008166:	9b02      	ldr	r3, [sp, #8]
 8008168:	4606      	mov	r6, r0
 800816a:	460f      	mov	r7, r1
 800816c:	b9db      	cbnz	r3, 80081a6 <__kernel_sin+0xd6>
 800816e:	4602      	mov	r2, r0
 8008170:	460b      	mov	r3, r1
 8008172:	4650      	mov	r0, sl
 8008174:	4659      	mov	r1, fp
 8008176:	f7f8 fa9f 	bl	80006b8 <__aeabi_dmul>
 800817a:	a325      	add	r3, pc, #148	; (adr r3, 8008210 <__kernel_sin+0x140>)
 800817c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008180:	f7f8 f8e2 	bl	8000348 <__aeabi_dsub>
 8008184:	4642      	mov	r2, r8
 8008186:	464b      	mov	r3, r9
 8008188:	f7f8 fa96 	bl	80006b8 <__aeabi_dmul>
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	4620      	mov	r0, r4
 8008192:	4629      	mov	r1, r5
 8008194:	f7f8 f8da 	bl	800034c <__adddf3>
 8008198:	4604      	mov	r4, r0
 800819a:	460d      	mov	r5, r1
 800819c:	ec45 4b10 	vmov	d0, r4, r5
 80081a0:	b005      	add	sp, #20
 80081a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a6:	2200      	movs	r2, #0
 80081a8:	4b1b      	ldr	r3, [pc, #108]	; (8008218 <__kernel_sin+0x148>)
 80081aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80081ae:	f7f8 fa83 	bl	80006b8 <__aeabi_dmul>
 80081b2:	4632      	mov	r2, r6
 80081b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081b8:	463b      	mov	r3, r7
 80081ba:	4640      	mov	r0, r8
 80081bc:	4649      	mov	r1, r9
 80081be:	f7f8 fa7b 	bl	80006b8 <__aeabi_dmul>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ca:	f7f8 f8bd 	bl	8000348 <__aeabi_dsub>
 80081ce:	4652      	mov	r2, sl
 80081d0:	465b      	mov	r3, fp
 80081d2:	f7f8 fa71 	bl	80006b8 <__aeabi_dmul>
 80081d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081da:	f7f8 f8b5 	bl	8000348 <__aeabi_dsub>
 80081de:	a30c      	add	r3, pc, #48	; (adr r3, 8008210 <__kernel_sin+0x140>)
 80081e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e4:	4606      	mov	r6, r0
 80081e6:	460f      	mov	r7, r1
 80081e8:	4640      	mov	r0, r8
 80081ea:	4649      	mov	r1, r9
 80081ec:	f7f8 fa64 	bl	80006b8 <__aeabi_dmul>
 80081f0:	4602      	mov	r2, r0
 80081f2:	460b      	mov	r3, r1
 80081f4:	4630      	mov	r0, r6
 80081f6:	4639      	mov	r1, r7
 80081f8:	f7f8 f8a8 	bl	800034c <__adddf3>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4620      	mov	r0, r4
 8008202:	4629      	mov	r1, r5
 8008204:	f7f8 f8a0 	bl	8000348 <__aeabi_dsub>
 8008208:	e7c6      	b.n	8008198 <__kernel_sin+0xc8>
 800820a:	bf00      	nop
 800820c:	f3af 8000 	nop.w
 8008210:	55555549 	.word	0x55555549
 8008214:	3fc55555 	.word	0x3fc55555
 8008218:	3fe00000 	.word	0x3fe00000
 800821c:	5acfd57c 	.word	0x5acfd57c
 8008220:	3de5d93a 	.word	0x3de5d93a
 8008224:	8a2b9ceb 	.word	0x8a2b9ceb
 8008228:	3e5ae5e6 	.word	0x3e5ae5e6
 800822c:	57b1fe7d 	.word	0x57b1fe7d
 8008230:	3ec71de3 	.word	0x3ec71de3
 8008234:	19c161d5 	.word	0x19c161d5
 8008238:	3f2a01a0 	.word	0x3f2a01a0
 800823c:	1110f8a6 	.word	0x1110f8a6
 8008240:	3f811111 	.word	0x3f811111

08008244 <fabs>:
 8008244:	ec51 0b10 	vmov	r0, r1, d0
 8008248:	ee10 2a10 	vmov	r2, s0
 800824c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008250:	ec43 2b10 	vmov	d0, r2, r3
 8008254:	4770      	bx	lr
	...

08008258 <floor>:
 8008258:	ec51 0b10 	vmov	r0, r1, d0
 800825c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008260:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008264:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008268:	2e13      	cmp	r6, #19
 800826a:	460c      	mov	r4, r1
 800826c:	ee10 5a10 	vmov	r5, s0
 8008270:	4680      	mov	r8, r0
 8008272:	dc34      	bgt.n	80082de <floor+0x86>
 8008274:	2e00      	cmp	r6, #0
 8008276:	da16      	bge.n	80082a6 <floor+0x4e>
 8008278:	a335      	add	r3, pc, #212	; (adr r3, 8008350 <floor+0xf8>)
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	f7f8 f865 	bl	800034c <__adddf3>
 8008282:	2200      	movs	r2, #0
 8008284:	2300      	movs	r3, #0
 8008286:	f7f8 fca7 	bl	8000bd8 <__aeabi_dcmpgt>
 800828a:	b148      	cbz	r0, 80082a0 <floor+0x48>
 800828c:	2c00      	cmp	r4, #0
 800828e:	da59      	bge.n	8008344 <floor+0xec>
 8008290:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008294:	4a30      	ldr	r2, [pc, #192]	; (8008358 <floor+0x100>)
 8008296:	432b      	orrs	r3, r5
 8008298:	2500      	movs	r5, #0
 800829a:	42ab      	cmp	r3, r5
 800829c:	bf18      	it	ne
 800829e:	4614      	movne	r4, r2
 80082a0:	4621      	mov	r1, r4
 80082a2:	4628      	mov	r0, r5
 80082a4:	e025      	b.n	80082f2 <floor+0x9a>
 80082a6:	4f2d      	ldr	r7, [pc, #180]	; (800835c <floor+0x104>)
 80082a8:	4137      	asrs	r7, r6
 80082aa:	ea01 0307 	and.w	r3, r1, r7
 80082ae:	4303      	orrs	r3, r0
 80082b0:	d01f      	beq.n	80082f2 <floor+0x9a>
 80082b2:	a327      	add	r3, pc, #156	; (adr r3, 8008350 <floor+0xf8>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f7f8 f848 	bl	800034c <__adddf3>
 80082bc:	2200      	movs	r2, #0
 80082be:	2300      	movs	r3, #0
 80082c0:	f7f8 fc8a 	bl	8000bd8 <__aeabi_dcmpgt>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d0eb      	beq.n	80082a0 <floor+0x48>
 80082c8:	2c00      	cmp	r4, #0
 80082ca:	bfbe      	ittt	lt
 80082cc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80082d0:	fa43 f606 	asrlt.w	r6, r3, r6
 80082d4:	19a4      	addlt	r4, r4, r6
 80082d6:	ea24 0407 	bic.w	r4, r4, r7
 80082da:	2500      	movs	r5, #0
 80082dc:	e7e0      	b.n	80082a0 <floor+0x48>
 80082de:	2e33      	cmp	r6, #51	; 0x33
 80082e0:	dd0b      	ble.n	80082fa <floor+0xa2>
 80082e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80082e6:	d104      	bne.n	80082f2 <floor+0x9a>
 80082e8:	ee10 2a10 	vmov	r2, s0
 80082ec:	460b      	mov	r3, r1
 80082ee:	f7f8 f82d 	bl	800034c <__adddf3>
 80082f2:	ec41 0b10 	vmov	d0, r0, r1
 80082f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082fa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80082fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008302:	fa23 f707 	lsr.w	r7, r3, r7
 8008306:	4207      	tst	r7, r0
 8008308:	d0f3      	beq.n	80082f2 <floor+0x9a>
 800830a:	a311      	add	r3, pc, #68	; (adr r3, 8008350 <floor+0xf8>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f7f8 f81c 	bl	800034c <__adddf3>
 8008314:	2200      	movs	r2, #0
 8008316:	2300      	movs	r3, #0
 8008318:	f7f8 fc5e 	bl	8000bd8 <__aeabi_dcmpgt>
 800831c:	2800      	cmp	r0, #0
 800831e:	d0bf      	beq.n	80082a0 <floor+0x48>
 8008320:	2c00      	cmp	r4, #0
 8008322:	da02      	bge.n	800832a <floor+0xd2>
 8008324:	2e14      	cmp	r6, #20
 8008326:	d103      	bne.n	8008330 <floor+0xd8>
 8008328:	3401      	adds	r4, #1
 800832a:	ea25 0507 	bic.w	r5, r5, r7
 800832e:	e7b7      	b.n	80082a0 <floor+0x48>
 8008330:	2301      	movs	r3, #1
 8008332:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008336:	fa03 f606 	lsl.w	r6, r3, r6
 800833a:	4435      	add	r5, r6
 800833c:	4545      	cmp	r5, r8
 800833e:	bf38      	it	cc
 8008340:	18e4      	addcc	r4, r4, r3
 8008342:	e7f2      	b.n	800832a <floor+0xd2>
 8008344:	2500      	movs	r5, #0
 8008346:	462c      	mov	r4, r5
 8008348:	e7aa      	b.n	80082a0 <floor+0x48>
 800834a:	bf00      	nop
 800834c:	f3af 8000 	nop.w
 8008350:	8800759c 	.word	0x8800759c
 8008354:	7e37e43c 	.word	0x7e37e43c
 8008358:	bff00000 	.word	0xbff00000
 800835c:	000fffff 	.word	0x000fffff

08008360 <matherr>:
 8008360:	2000      	movs	r0, #0
 8008362:	4770      	bx	lr
 8008364:	0000      	movs	r0, r0
	...

08008368 <nan>:
 8008368:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008370 <nan+0x8>
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	00000000 	.word	0x00000000
 8008374:	7ff80000 	.word	0x7ff80000

08008378 <scalbn>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	ec55 4b10 	vmov	r4, r5, d0
 800837e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008382:	4606      	mov	r6, r0
 8008384:	462b      	mov	r3, r5
 8008386:	b9aa      	cbnz	r2, 80083b4 <scalbn+0x3c>
 8008388:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800838c:	4323      	orrs	r3, r4
 800838e:	d03b      	beq.n	8008408 <scalbn+0x90>
 8008390:	4b31      	ldr	r3, [pc, #196]	; (8008458 <scalbn+0xe0>)
 8008392:	4629      	mov	r1, r5
 8008394:	2200      	movs	r2, #0
 8008396:	ee10 0a10 	vmov	r0, s0
 800839a:	f7f8 f98d 	bl	80006b8 <__aeabi_dmul>
 800839e:	4b2f      	ldr	r3, [pc, #188]	; (800845c <scalbn+0xe4>)
 80083a0:	429e      	cmp	r6, r3
 80083a2:	4604      	mov	r4, r0
 80083a4:	460d      	mov	r5, r1
 80083a6:	da12      	bge.n	80083ce <scalbn+0x56>
 80083a8:	a327      	add	r3, pc, #156	; (adr r3, 8008448 <scalbn+0xd0>)
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	f7f8 f983 	bl	80006b8 <__aeabi_dmul>
 80083b2:	e009      	b.n	80083c8 <scalbn+0x50>
 80083b4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80083b8:	428a      	cmp	r2, r1
 80083ba:	d10c      	bne.n	80083d6 <scalbn+0x5e>
 80083bc:	ee10 2a10 	vmov	r2, s0
 80083c0:	4620      	mov	r0, r4
 80083c2:	4629      	mov	r1, r5
 80083c4:	f7f7 ffc2 	bl	800034c <__adddf3>
 80083c8:	4604      	mov	r4, r0
 80083ca:	460d      	mov	r5, r1
 80083cc:	e01c      	b.n	8008408 <scalbn+0x90>
 80083ce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80083d2:	460b      	mov	r3, r1
 80083d4:	3a36      	subs	r2, #54	; 0x36
 80083d6:	4432      	add	r2, r6
 80083d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80083dc:	428a      	cmp	r2, r1
 80083de:	dd0b      	ble.n	80083f8 <scalbn+0x80>
 80083e0:	ec45 4b11 	vmov	d1, r4, r5
 80083e4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008450 <scalbn+0xd8>
 80083e8:	f000 f92a 	bl	8008640 <copysign>
 80083ec:	a318      	add	r3, pc, #96	; (adr r3, 8008450 <scalbn+0xd8>)
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	ec51 0b10 	vmov	r0, r1, d0
 80083f6:	e7da      	b.n	80083ae <scalbn+0x36>
 80083f8:	2a00      	cmp	r2, #0
 80083fa:	dd08      	ble.n	800840e <scalbn+0x96>
 80083fc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008400:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008404:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008408:	ec45 4b10 	vmov	d0, r4, r5
 800840c:	bd70      	pop	{r4, r5, r6, pc}
 800840e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008412:	da0d      	bge.n	8008430 <scalbn+0xb8>
 8008414:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008418:	429e      	cmp	r6, r3
 800841a:	ec45 4b11 	vmov	d1, r4, r5
 800841e:	dce1      	bgt.n	80083e4 <scalbn+0x6c>
 8008420:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008448 <scalbn+0xd0>
 8008424:	f000 f90c 	bl	8008640 <copysign>
 8008428:	a307      	add	r3, pc, #28	; (adr r3, 8008448 <scalbn+0xd0>)
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	e7e0      	b.n	80083f2 <scalbn+0x7a>
 8008430:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008434:	3236      	adds	r2, #54	; 0x36
 8008436:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800843a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800843e:	4620      	mov	r0, r4
 8008440:	4629      	mov	r1, r5
 8008442:	2200      	movs	r2, #0
 8008444:	4b06      	ldr	r3, [pc, #24]	; (8008460 <scalbn+0xe8>)
 8008446:	e7b2      	b.n	80083ae <scalbn+0x36>
 8008448:	c2f8f359 	.word	0xc2f8f359
 800844c:	01a56e1f 	.word	0x01a56e1f
 8008450:	8800759c 	.word	0x8800759c
 8008454:	7e37e43c 	.word	0x7e37e43c
 8008458:	43500000 	.word	0x43500000
 800845c:	ffff3cb0 	.word	0xffff3cb0
 8008460:	3c900000 	.word	0x3c900000

08008464 <__ieee754_logf>:
 8008464:	ee10 3a10 	vmov	r3, s0
 8008468:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800846c:	d106      	bne.n	800847c <__ieee754_logf+0x18>
 800846e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8008604 <__ieee754_logf+0x1a0>
 8008472:	eddf 7a65 	vldr	s15, [pc, #404]	; 8008608 <__ieee754_logf+0x1a4>
 8008476:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800847a:	4770      	bx	lr
 800847c:	2b00      	cmp	r3, #0
 800847e:	da02      	bge.n	8008486 <__ieee754_logf+0x22>
 8008480:	ee30 7a40 	vsub.f32	s14, s0, s0
 8008484:	e7f5      	b.n	8008472 <__ieee754_logf+0xe>
 8008486:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800848a:	db02      	blt.n	8008492 <__ieee754_logf+0x2e>
 800848c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008490:	4770      	bx	lr
 8008492:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008496:	bfbf      	itttt	lt
 8008498:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800860c <__ieee754_logf+0x1a8>
 800849c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80084a0:	f06f 0118 	mvnlt.w	r1, #24
 80084a4:	ee17 3a90 	vmovlt	r3, s15
 80084a8:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80084ac:	bfa8      	it	ge
 80084ae:	2100      	movge	r1, #0
 80084b0:	3a7f      	subs	r2, #127	; 0x7f
 80084b2:	440a      	add	r2, r1
 80084b4:	4956      	ldr	r1, [pc, #344]	; (8008610 <__ieee754_logf+0x1ac>)
 80084b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80084ba:	4419      	add	r1, r3
 80084bc:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 80084c0:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 80084c4:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80084c8:	4319      	orrs	r1, r3
 80084ca:	ee07 1a90 	vmov	s15, r1
 80084ce:	f103 010f 	add.w	r1, r3, #15
 80084d2:	f3c1 0116 	ubfx	r1, r1, #0, #23
 80084d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80084da:	290f      	cmp	r1, #15
 80084dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80084e0:	dc31      	bgt.n	8008546 <__ieee754_logf+0xe2>
 80084e2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80084e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ea:	d10f      	bne.n	800850c <__ieee754_logf+0xa8>
 80084ec:	2a00      	cmp	r2, #0
 80084ee:	f000 8085 	beq.w	80085fc <__ieee754_logf+0x198>
 80084f2:	ee07 2a90 	vmov	s15, r2
 80084f6:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8008614 <__ieee754_logf+0x1b0>
 80084fa:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8008618 <__ieee754_logf+0x1b4>
 80084fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008502:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008506:	eea7 0a87 	vfma.f32	s0, s15, s14
 800850a:	4770      	bx	lr
 800850c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800861c <__ieee754_logf+0x1b8>
 8008510:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008514:	eea0 7a67 	vfms.f32	s14, s0, s15
 8008518:	ee60 7a00 	vmul.f32	s15, s0, s0
 800851c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008520:	b912      	cbnz	r2, 8008528 <__ieee754_logf+0xc4>
 8008522:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008526:	4770      	bx	lr
 8008528:	ee07 2a90 	vmov	s15, r2
 800852c:	eddf 6a39 	vldr	s13, [pc, #228]	; 8008614 <__ieee754_logf+0x1b0>
 8008530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008534:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8008538:	ee37 0a40 	vsub.f32	s0, s14, s0
 800853c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8008618 <__ieee754_logf+0x1b4>
 8008540:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8008544:	4770      	bx	lr
 8008546:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800854a:	ee70 7a27 	vadd.f32	s15, s0, s15
 800854e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008620 <__ieee754_logf+0x1bc>
 8008552:	eddf 4a34 	vldr	s9, [pc, #208]	; 8008624 <__ieee754_logf+0x1c0>
 8008556:	4934      	ldr	r1, [pc, #208]	; (8008628 <__ieee754_logf+0x1c4>)
 8008558:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800855c:	4419      	add	r1, r3
 800855e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8008562:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008566:	430b      	orrs	r3, r1
 8008568:	2b00      	cmp	r3, #0
 800856a:	ee07 2a90 	vmov	s15, r2
 800856e:	ee26 5a06 	vmul.f32	s10, s12, s12
 8008572:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008576:	ee25 7a05 	vmul.f32	s14, s10, s10
 800857a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800862c <__ieee754_logf+0x1c8>
 800857e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008582:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8008630 <__ieee754_logf+0x1cc>
 8008586:	eee7 5a87 	vfma.f32	s11, s15, s14
 800858a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8008634 <__ieee754_logf+0x1d0>
 800858e:	eee7 7a24 	vfma.f32	s15, s14, s9
 8008592:	eddf 4a29 	vldr	s9, [pc, #164]	; 8008638 <__ieee754_logf+0x1d4>
 8008596:	eee7 4a87 	vfma.f32	s9, s15, s14
 800859a:	eddf 7a28 	vldr	s15, [pc, #160]	; 800863c <__ieee754_logf+0x1d8>
 800859e:	eee4 7a87 	vfma.f32	s15, s9, s14
 80085a2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80085a6:	eee5 7a87 	vfma.f32	s15, s11, s14
 80085aa:	dd1c      	ble.n	80085e6 <__ieee754_logf+0x182>
 80085ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80085b0:	ee20 7a07 	vmul.f32	s14, s0, s14
 80085b4:	ee27 7a00 	vmul.f32	s14, s14, s0
 80085b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80085bc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80085c0:	b922      	cbnz	r2, 80085cc <__ieee754_logf+0x168>
 80085c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80085ca:	4770      	bx	lr
 80085cc:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8008614 <__ieee754_logf+0x1b0>
 80085d0:	eee6 7a86 	vfma.f32	s15, s13, s12
 80085d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085d8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80085dc:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8008618 <__ieee754_logf+0x1b4>
 80085e0:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80085e4:	4770      	bx	lr
 80085e6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80085ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 80085ee:	2a00      	cmp	r2, #0
 80085f0:	d0e9      	beq.n	80085c6 <__ieee754_logf+0x162>
 80085f2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8008614 <__ieee754_logf+0x1b0>
 80085f6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80085fa:	e7ed      	b.n	80085d8 <__ieee754_logf+0x174>
 80085fc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8008608 <__ieee754_logf+0x1a4>
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	cc000000 	.word	0xcc000000
 8008608:	00000000 	.word	0x00000000
 800860c:	4c000000 	.word	0x4c000000
 8008610:	004afb20 	.word	0x004afb20
 8008614:	3717f7d1 	.word	0x3717f7d1
 8008618:	3f317180 	.word	0x3f317180
 800861c:	3eaaaaab 	.word	0x3eaaaaab
 8008620:	3e1cd04f 	.word	0x3e1cd04f
 8008624:	3e178897 	.word	0x3e178897
 8008628:	ffcf5c30 	.word	0xffcf5c30
 800862c:	3e638e29 	.word	0x3e638e29
 8008630:	3ecccccd 	.word	0x3ecccccd
 8008634:	3e3a3325 	.word	0x3e3a3325
 8008638:	3e924925 	.word	0x3e924925
 800863c:	3f2aaaab 	.word	0x3f2aaaab

08008640 <copysign>:
 8008640:	ec51 0b10 	vmov	r0, r1, d0
 8008644:	ee11 0a90 	vmov	r0, s3
 8008648:	ee10 2a10 	vmov	r2, s0
 800864c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008650:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008654:	ea41 0300 	orr.w	r3, r1, r0
 8008658:	ec43 2b10 	vmov	d0, r2, r3
 800865c:	4770      	bx	lr
	...

08008660 <_init>:
 8008660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008662:	bf00      	nop
 8008664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008666:	bc08      	pop	{r3}
 8008668:	469e      	mov	lr, r3
 800866a:	4770      	bx	lr

0800866c <_fini>:
 800866c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866e:	bf00      	nop
 8008670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008672:	bc08      	pop	{r3}
 8008674:	469e      	mov	lr, r3
 8008676:	4770      	bx	lr
